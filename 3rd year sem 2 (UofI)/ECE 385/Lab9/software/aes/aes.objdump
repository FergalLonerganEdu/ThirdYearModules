
aes.elf:     file format elf32-littlenios2
aes.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1000022c

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00010958 memsz 0x00010958 flags r-x
    LOAD off    0x00011978 vaddr 0x10010978 paddr 0x10012aa0 align 2**12
         filesz 0x00002128 memsz 0x00002128 flags rw-
    LOAD off    0x00013bc8 vaddr 0x10014bc8 paddr 0x10014bc8 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000101a4  1000022c  1000022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000005a8  100103d0  100103d0  000113d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00002128  10010978  10012aa0  00011978  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  10014bc8  10014bc8  00013bc8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00013aa0  2**0
                  CONTENTS
  7 .sdram        00000000  10014d28  10014d28  00013aa0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00013aa0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000cf0  00000000  00000000  00013ac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00023719  00000000  00000000  000147b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008f00  00000000  00000000  00037ed1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000af8e  00000000  00000000  00040dd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000219c  00000000  00000000  0004bd60  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003666  00000000  00000000  0004defc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00016d4c  00000000  00000000  00051562  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  000682b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001388  00000000  00000000  000682c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006c8f5  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0006c8f8  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006c904  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006c905  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0006c906  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0006c90a  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0006c90e  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0006c912  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0006c91d  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0006c928  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0006c933  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000014  00000000  00000000  0006c93e  2**0
                  CONTENTS, READONLY
 30 .jdi          00004320  00000000  00000000  0006c952  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00078d8b  00000000  00000000  00070c72  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
1000022c l    d  .text	00000000 .text
100103d0 l    d  .rodata	00000000 .rodata
10010978 l    d  .rwdata	00000000 .rwdata
10014bc8 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10014d28 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../aes_bsp//obj/HAL/src/crt0.o
10000264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 aes.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
100106be l     O .rodata	00000010 zeroes.4181
100106ce l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
10003868 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10005410 l     F .text	00000008 __fp_lock
10005418 l     F .text	00000008 __fp_unlock
1000542c l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
10010fb4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
100113f8 l     O .rwdata	00000020 lc_ctype_charset
100113d8 l     O .rwdata	00000020 lc_message_charset
10011418 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
10010700 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
10008824 l     F .text	000000fc __sprint_r.part.0
10010834 l     O .rodata	00000010 blanks.4125
10010824 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
1000b328 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1000dc78 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000dda0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000ddcc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1000ded4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000dfd0 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1000e0b4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1000e298 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10012a90 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
1000e51c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1000e66c l     F .text	00000038 alt_dev_reg
10011a00 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1000e948 l     F .text	00000204 altera_avalon_jtag_uart_irq
1000eb4c l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
1000f2c8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
1000f760 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
1000f8b8 l     F .text	00000050 alt_get_errno
1000f908 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10014bfc g     O .bss	00000004 alt_instruction_exception_handler
10007e64 g     F .text	00000074 _mprec_log10
10000db8 g     F .text	000000bc charToHex
10007f50 g     F .text	0000008c __any_on
1000a250 g     F .text	00000054 _isatty_r
1001070c g     O .rodata	00000028 __mprec_tinytens
1000e1e0 g     F .text	00000078 alt_main
100014b4 g     F .text	000000b8 _puts_r
10014c28 g     O .bss	00000100 alt_irq
1000a2a4 g     F .text	0000005c _lseek_r
10012aa0 g       *ABS*	00000000 __flash_rwdata_start
1000c698 g     F .text	00000084 .hidden __eqdf2
10014d28 g       *ABS*	00000000 __alt_heap_start
10001478 g     F .text	0000003c printf
10000b88 g     F .text	00000058 RotWord
1000a4cc g     F .text	0000009c _wcrtomb_r
10000a88 g     F .text	00000100 SubWord
1000871c g     F .text	0000005c __sseek
10005774 g     F .text	00000010 __sinit
1000a35c g     F .text	00000154 __swbuf_r
100061ec g     F .text	0000007c _setlocale_r
100055cc g     F .text	00000078 __sfmoreglue
10000e74 g     F .text	00000068 charsToHex
1000e278 g     F .text	00000020 __malloc_unlock
10006d14 g     F .text	0000015c memmove
1000575c g     F .text	00000018 _cleanup
10006f94 g     F .text	000000a8 _Balloc
1000c71c g     F .text	000000e0 .hidden __gtdf2
1000fcf8 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
100103d0 g     O .rodata	00000100 aes_sbox
1000a1f8 g     F .text	00000058 _fstat_r
10014be0 g     O .bss	00000004 errno
10008698 g     F .text	00000008 __seofread
10014be8 g     O .bss	00000004 alt_argv
10010978 g     O .rwdata	00000600 gf_mul
100006b4 g     F .text	00000130 ShiftRows
1001aa60 g       *ABS*	00000000 _gp
10011880 g     O .rwdata	00000180 alt_fd_list
1000fd18 g     F .text	00000090 alt_find_dev
10001314 g     F .text	00000138 memcpy
10005420 g     F .text	0000000c _cleanup_r
1000daa0 g     F .text	000000d0 .hidden __floatsidf
1000f840 g     F .text	00000078 alt_io_redirect
1000c7fc g     F .text	000000e0 .hidden __ltdf2
100103d0 g       *ABS*	00000000 __DTOR_END__
1000156c g     F .text	00000014 puts
1000ff90 g     F .text	0000009c alt_exception_cause_generated_bad_addr
1000857c g     F .text	00000074 __fpclassifyd
10007dc0 g     F .text	000000a4 __ratio
10009d5c g     F .text	00000024 __vfiprintf_internal
1000ed48 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
1000144c g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
1000b444 g     F .text	00000008 .hidden __udivsi3
1000df24 g     F .text	000000ac isatty
1001075c g     O .rodata	000000c8 __mprec_tens
10006268 g     F .text	0000000c __locale_charset
10014bdc g     O .bss	00000004 __malloc_top_pad
10012a68 g     O .rwdata	00000004 __mb_cur_max
10006298 g     F .text	0000000c _localeconv_r
100073bc g     F .text	0000003c __i2b
10005bd8 g     F .text	000004a4 __sfvwrite_r
100085f0 g     F .text	00000054 _sbrk_r
1000a300 g     F .text	0000005c _read_r
10012a88 g     O .rwdata	00000004 alt_max_fd
10009f08 g     F .text	00000100 _fclose_r
100053e0 g     F .text	00000030 fflush
10014bd8 g     O .bss	00000004 __malloc_max_sbrked_mem
10000be0 g     F .text	000001d8 KeyExpansion
1000b47c g     F .text	0000089c .hidden __adddf3
10007b68 g     F .text	0000011c __b2d
1000ad0c g     F .text	0000061c .hidden __umoddi3
1000e104 g     F .text	000000dc lseek
10012a60 g     O .rwdata	00000004 _global_impure_ptr
10007fdc g     F .text	000005a0 _realloc_r
10014d28 g       *ABS*	00000000 __bss_end
1000f670 g     F .text	000000f0 alt_iic_isr_register
1000fbf4 g     F .text	00000104 alt_tick
1000a6cc g     F .text	00000640 .hidden __udivdi3
1000a01c g     F .text	00000184 _fputwc_r
10010734 g     O .rodata	00000028 __mprec_bigtens
100071a0 g     F .text	00000104 __s2b
1000db70 g     F .text	000000a4 .hidden __floatunsidf
10007910 g     F .text	00000060 __mcmp
10005794 g     F .text	00000018 __fp_lock_all
1000f624 g     F .text	0000004c alt_ic_irq_enabled
1000fb5c g     F .text	00000098 alt_alarm_stop
10014bf0 g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d0 alt_irq_handler
10011858 g     O .rwdata	00000028 alt_dev_null
1000f2ac g     F .text	0000001c alt_dcache_flush_all
100072a4 g     F .text	00000068 __hi0bits
1000da18 g     F .text	00000088 .hidden __fixdfsi
10012aa0 g       *ABS*	00000000 __ram_rwdata_end
10012a80 g     O .rwdata	00000008 alt_dev_list
1000e56c g     F .text	00000100 write
10010978 g       *ABS*	00000000 __ram_rodata_end
1000de1c g     F .text	000000b8 fstat
1000c7fc g     F .text	000000e0 .hidden __ledf2
10007688 g     F .text	00000140 __pow5mult
10008938 g     F .text	00001424 ___vfiprintf_internal_r
10014bd0 g     O .bss	00000004 __nlocale_changed
1000b44c g     F .text	00000008 .hidden __umodsi3
10014d28 g       *ABS*	00000000 end
10000268 g     F .text	0000020c encryption
1000e884 g     F .text	000000c4 altera_avalon_jtag_uart_init
100001cc g     F .exceptions	00000060 alt_instruction_exception_entry
100103d0 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
1000dc14 g     F .text	00000064 .hidden __clzsi2
1000ef54 g     F .text	00000218 altera_avalon_jtag_uart_write
10005784 g     F .text	00000004 __sfp_lock_acquire
10006c2c g     F .text	000000e8 memchr
10001618 g     F .text	000020fc ___vfprintf_internal_r
100058e8 g     F .text	000002f0 _free_r
10006274 g     F .text	00000010 __locale_mb_cur_max
10000834 g     F .text	00000254 MixColumns
10010208 g     F .text	00000194 __call_exitprocs
10014bcc g     O .bss	00000004 __mlocale_changed
10012a6c g     O .rwdata	00000004 __malloc_sbrk_base
1000022c g     F .text	0000003c _start
10014bf4 g     O .bss	00000004 _alt_tick_rate
100077c8 g     F .text	00000148 __lshift
10014bf8 g     O .bss	00000004 _alt_nticks
1000e2e8 g     F .text	00000104 read
1000e6d8 g     F .text	00000048 alt_sys_init
100100f4 g     F .text	00000114 __register_exitproc
100073f8 g     F .text	00000290 __multiply
1000ebf4 g     F .text	00000068 altera_avalon_jtag_uart_close
1000b454 g     F .text	00000028 .hidden __mulsi3
10010978 g       *ABS*	00000000 __ram_rwdata_start
100103d0 g       *ABS*	00000000 __ram_rodata_start
10014c00 g     O .bss	00000028 __malloc_current_mallinfo
10007c84 g     F .text	0000013c __d2b
1000e720 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
100104d0 g     O .rodata	00000100 aes_invsbox
1000febc g     F .text	000000d4 alt_get_fd
10009ddc g     F .text	00000054 _close_r
10010078 g     F .text	0000007c memcmp
1000e7e0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10014d28 g       *ABS*	00000000 __alt_stack_base
1000e830 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10003738 g     F .text	00000130 __swsetup_r
1000bd18 g     F .text	00000980 .hidden __divdf3
10005644 g     F .text	00000118 __sfp
10007ed8 g     F .text	00000078 __copybits
10011450 g     O .rwdata	00000408 __malloc_av_
10005790 g     F .text	00000004 __sinit_lock_release
1000c8dc g     F .text	0000086c .hidden __muldf3
10008644 g     F .text	00000054 __sread
1000fda8 g     F .text	00000114 alt_find_file
1000f318 g     F .text	000000a4 alt_dev_llist_insert
1000e258 g     F .text	00000020 __malloc_lock
1000e46c g     F .text	000000b0 sbrk
100051b8 g     F .text	00000228 _fflush_r
10000624 g     F .text	00000090 SubBytes
10009e30 g     F .text	000000d8 _calloc_r
100007e4 g     F .text	00000050 xtime
10014bc8 g       *ABS*	00000000 __bss_start
10006e70 g     F .text	00000124 memset
10000edc g     F .text	00000438 main
10014bec g     O .bss	00000004 alt_envp
10014bd4 g     O .bss	00000004 __malloc_max_total_mem
1000e780 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
1000a4b0 g     F .text	0000001c __swbuf
10008778 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000a008 g     F .text	00000014 fclose
10003a90 g     F .text	00001728 _dtoa_r
10006484 g     F .text	000007a8 _malloc_r
1000a640 g     F .text	00000030 __ascii_wctomb
10012a8c g     O .rwdata	00000004 alt_errno
1000607c g     F .text	000000b8 _fwalk
1000b394 g     F .text	00000054 .hidden __divsi3
100057c4 g     F .text	00000124 _malloc_trim_r
100103d0 g       *ABS*	00000000 __CTOR_END__
10008780 g     F .text	000000a4 strcmp
100103d0 g       *ABS*	00000000 __flash_rodata_start
100103d0 g       *ABS*	00000000 __DTOR_LIST__
1000c698 g     F .text	00000084 .hidden __nedf2
1000e6a4 g     F .text	00000034 alt_irq_init
1000e3ec g     F .text	00000080 alt_release_fd
10010844 g     O .rodata	00000100 .hidden __clz_tab
10014bc8 g     O .bss	00000004 _PathLocale
1001002c g     F .text	00000014 atexit
10009d80 g     F .text	0000005c _write_r
100062a4 g     F .text	0000001c setlocale
10012a64 g     O .rwdata	00000004 _impure_ptr
10014be4 g     O .bss	00000004 alt_argc
1000f418 g     F .text	0000005c _do_dtors
10006290 g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
10007b08 g     F .text	00000060 __ulp
100057ac g     F .text	00000018 __fp_unlock_all
10012a78 g     O .rwdata	00000008 alt_fs_list
10010f78 g     O .rwdata	0000003c Rcon
10000020 g       *ABS*	00000000 __ram_exceptions_start
100062c0 g     F .text	0000000c localeconv
1000f490 g     F .text	00000050 alt_ic_isr_register
10012aa0 g       *ABS*	00000000 _edata
10014d28 g       *ABS*	00000000 _end
1000022c g       *ABS*	00000000 __ram_exceptions_end
1000ec5c g     F .text	000000ec altera_avalon_jtag_uart_ioctl
1000f580 g     F .text	000000a4 alt_ic_irq_disable
100086a0 g     F .text	0000007c __swrite
10012a70 g     O .rwdata	00000004 __malloc_trim_threshold
10006284 g     F .text	0000000c __locale_msgcharset
10010040 g     F .text	00000038 exit
10006134 g     F .text	000000b8 _fwalk_reent
10007970 g     F .text	00000198 __mdiff
1000b3e8 g     F .text	0000005c .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10005788 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
1001039c g     F .text	00000034 _exit
1000f16c g     F .text	00000140 alt_alarm_start
100062cc g     F .text	000001b8 __smakebuf_r
10001580 g     F .text	00000098 strlen
1000f9fc g     F .text	00000160 open
1000c71c g     F .text	000000e0 .hidden __gedf2
10012a74 g     O .rwdata	00000004 __wctomb
10008920 g     F .text	00000018 __sprint_r
1000f474 g     F .text	0000001c alt_icache_flush_all
10012a94 g     O .rwdata	00000004 alt_priority_mask
1000f4e0 g     F .text	000000a0 alt_ic_irq_enable
10003714 g     F .text	00000024 __vfprintf_internal
1000a670 g     F .text	0000005c _wctomb_r
1000d148 g     F .text	000008d0 .hidden __subdf3
1000730c g     F .text	000000b0 __lo0bits
10012a98 g     O .rwdata	00000008 alt_alarm_list
10000474 g     F .text	000001b0 AddRoundKey
1000f3bc g     F .text	0000005c _do_ctors
1000a568 g     F .text	000000d8 wcrtomb
1000dcc8 g     F .text	000000d8 close
1000e034 g     F .text	00000080 alt_load
1000a1a0 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
1000578c g     F .text	00000004 __sinit_lock_acquire
10007064 g     F .text	0000013c __multadd
1000703c g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408b14 	ori	at,at,556
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001cc0 	call	100001cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840074 	movhi	r2,4097
10000140:	10930a04 	addi	r2,r2,19496
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840074 	movhi	r2,4097
10000158:	10930a04 	addi	r2,r2,19496
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	e037883a 	mov	sp,fp
100001bc:	dfc00117 	ldw	ra,4(sp)
100001c0:	df000017 	ldw	fp,0(sp)
100001c4:	dec00204 	addi	sp,sp,8
100001c8:	f800283a 	ret

100001cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001cc:	defffb04 	addi	sp,sp,-20
100001d0:	dfc00415 	stw	ra,16(sp)
100001d4:	df000315 	stw	fp,12(sp)
100001d8:	df000304 	addi	fp,sp,12
100001dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e0:	00bfffc4 	movi	r2,-1
100001e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001ec:	d0a86717 	ldw	r2,-24164(gp)
100001f0:	10000726 	beq	r2,zero,10000210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f4:	d0a86717 	ldw	r2,-24164(gp)
100001f8:	e0fffd17 	ldw	r3,-12(fp)
100001fc:	1809883a 	mov	r4,r3
10000200:	e17fff17 	ldw	r5,-4(fp)
10000204:	e1bffe17 	ldw	r6,-8(fp)
10000208:	103ee83a 	callr	r2
1000020c:	00000206 	br	10000218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000214:	0005883a 	mov	r2,zero
}
10000218:	e037883a 	mov	sp,fp
1000021c:	dfc00117 	ldw	ra,4(sp)
10000220:	df000017 	ldw	fp,0(sp)
10000224:	dec00204 	addi	sp,sp,8
10000228:	f800283a 	ret

Disassembly of section .text:

1000022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
1000022c:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000230:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000234:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
10000238:	d6aa9814 	ori	gp,gp,43616
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
1000023c:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
10000240:	1092f214 	ori	r2,r2,19400

    movhi r3, %hi(__bss_end)
10000244:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
10000248:	18d34a14 	ori	r3,r3,19752

    beq r2, r3, 1f
1000024c:	10c00326 	beq	r2,r3,1000025c <_start+0x30>

0:
    stw zero, (r2)
10000250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10000258:	10fffd36 	bltu	r2,r3,10000250 <__alt_data_end+0xf8000250>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
1000025c:	000e0340 	call	1000e034 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000260:	000e1e00 	call	1000e1e0 <alt_main>

10000264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000264:	003fff06 	br	10000264 <__alt_data_end+0xf8000264>

10000268 <encryption>:
unsigned long Rcon[]={0x01000000,0x02000000,0x04000000,0x08000000,0x10000000,0x20000000,
             0x40000000,0x80000000,0x1b000000,0x36000000,0x6c000000,0xd8000000,
             0xab000000,0x4d000000,0x9a000000};

void encryption(unsigned char state[16], unsigned char message[16], unsigned long schedule[44])
{
10000268:	defff404 	addi	sp,sp,-48
1000026c:	dfc00b15 	stw	ra,44(sp)
10000270:	df000a15 	stw	fp,40(sp)
10000274:	df000a04 	addi	fp,sp,40
10000278:	e13ffd15 	stw	r4,-12(fp)
1000027c:	e17ffe15 	stw	r5,-8(fp)
10000280:	e1bfff15 	stw	r6,-4(fp)
	int i, k, m;
	unsigned long temp[4];
	for(i = 0; i < 16; i++)
10000284:	e03ff615 	stw	zero,-40(fp)
10000288:	00000b06 	br	100002b8 <encryption+0x50>
	{
		message[i] = state[i];
1000028c:	e0bff617 	ldw	r2,-40(fp)
10000290:	e0fffe17 	ldw	r3,-8(fp)
10000294:	1885883a 	add	r2,r3,r2
10000298:	e0fff617 	ldw	r3,-40(fp)
1000029c:	e13ffd17 	ldw	r4,-12(fp)
100002a0:	20c7883a 	add	r3,r4,r3
100002a4:	18c00003 	ldbu	r3,0(r3)
100002a8:	10c00005 	stb	r3,0(r2)

void encryption(unsigned char state[16], unsigned char message[16], unsigned long schedule[44])
{
	int i, k, m;
	unsigned long temp[4];
	for(i = 0; i < 16; i++)
100002ac:	e0bff617 	ldw	r2,-40(fp)
100002b0:	10800044 	addi	r2,r2,1
100002b4:	e0bff615 	stw	r2,-40(fp)
100002b8:	e0bff617 	ldw	r2,-40(fp)
100002bc:	10800410 	cmplti	r2,r2,16
100002c0:	103ff21e 	bne	r2,zero,1000028c <__alt_data_end+0xf800028c>
	{
		message[i] = state[i];
	}
	for(k = 0; k < 4; k++)
100002c4:	e03ff715 	stw	zero,-36(fp)
100002c8:	00001106 	br	10000310 <encryption+0xa8>
	{
		temp[k]=schedule[k];
100002cc:	e0bff717 	ldw	r2,-36(fp)
100002d0:	1085883a 	add	r2,r2,r2
100002d4:	1085883a 	add	r2,r2,r2
100002d8:	1007883a 	mov	r3,r2
100002dc:	e0bfff17 	ldw	r2,-4(fp)
100002e0:	10c5883a 	add	r2,r2,r3
100002e4:	10c00017 	ldw	r3,0(r2)
100002e8:	e0bff717 	ldw	r2,-36(fp)
100002ec:	1085883a 	add	r2,r2,r2
100002f0:	1085883a 	add	r2,r2,r2
100002f4:	e13ff604 	addi	r4,fp,-40
100002f8:	2085883a 	add	r2,r4,r2
100002fc:	10800304 	addi	r2,r2,12
10000300:	10c00015 	stw	r3,0(r2)
	unsigned long temp[4];
	for(i = 0; i < 16; i++)
	{
		message[i] = state[i];
	}
	for(k = 0; k < 4; k++)
10000304:	e0bff717 	ldw	r2,-36(fp)
10000308:	10800044 	addi	r2,r2,1
1000030c:	e0bff715 	stw	r2,-36(fp)
10000310:	e0bff717 	ldw	r2,-36(fp)
10000314:	10800110 	cmplti	r2,r2,4
10000318:	103fec1e 	bne	r2,zero,100002cc <__alt_data_end+0xf80002cc>
	{
		temp[k]=schedule[k];
	}
	AddRoundKey(message, temp);
1000031c:	e0bff904 	addi	r2,fp,-28
10000320:	e13ffe17 	ldw	r4,-8(fp)
10000324:	100b883a 	mov	r5,r2
10000328:	00004740 	call	10000474 <AddRoundKey>
	for(m = 1; m < 10; m++)
1000032c:	00800044 	movi	r2,1
10000330:	e0bff815 	stw	r2,-32(fp)
10000334:	00002806 	br	100003d8 <encryption+0x170>
	{
		SubBytes(message);
10000338:	e13ffe17 	ldw	r4,-8(fp)
1000033c:	00006240 	call	10000624 <SubBytes>
		ShiftRows(message);
10000340:	e13ffe17 	ldw	r4,-8(fp)
10000344:	00006b40 	call	100006b4 <ShiftRows>
		MixColumns(message);
10000348:	e13ffe17 	ldw	r4,-8(fp)
1000034c:	00008340 	call	10000834 <MixColumns>
		for(k = 0; k < 4; k++)
10000350:	e03ff715 	stw	zero,-36(fp)
10000354:	00001606 	br	100003b0 <encryption+0x148>
		{
			temp[k]=schedule[4*m+k];
10000358:	e0bff817 	ldw	r2,-32(fp)
1000035c:	1085883a 	add	r2,r2,r2
10000360:	1085883a 	add	r2,r2,r2
10000364:	1007883a 	mov	r3,r2
10000368:	e0bff717 	ldw	r2,-36(fp)
1000036c:	1885883a 	add	r2,r3,r2
10000370:	1085883a 	add	r2,r2,r2
10000374:	1085883a 	add	r2,r2,r2
10000378:	1007883a 	mov	r3,r2
1000037c:	e0bfff17 	ldw	r2,-4(fp)
10000380:	10c5883a 	add	r2,r2,r3
10000384:	10c00017 	ldw	r3,0(r2)
10000388:	e0bff717 	ldw	r2,-36(fp)
1000038c:	1085883a 	add	r2,r2,r2
10000390:	1085883a 	add	r2,r2,r2
10000394:	e13ff604 	addi	r4,fp,-40
10000398:	2085883a 	add	r2,r4,r2
1000039c:	10800304 	addi	r2,r2,12
100003a0:	10c00015 	stw	r3,0(r2)
	for(m = 1; m < 10; m++)
	{
		SubBytes(message);
		ShiftRows(message);
		MixColumns(message);
		for(k = 0; k < 4; k++)
100003a4:	e0bff717 	ldw	r2,-36(fp)
100003a8:	10800044 	addi	r2,r2,1
100003ac:	e0bff715 	stw	r2,-36(fp)
100003b0:	e0bff717 	ldw	r2,-36(fp)
100003b4:	10800110 	cmplti	r2,r2,4
100003b8:	103fe71e 	bne	r2,zero,10000358 <__alt_data_end+0xf8000358>
		{
			temp[k]=schedule[4*m+k];
		}
		AddRoundKey(message, temp);
100003bc:	e0bff904 	addi	r2,fp,-28
100003c0:	e13ffe17 	ldw	r4,-8(fp)
100003c4:	100b883a 	mov	r5,r2
100003c8:	00004740 	call	10000474 <AddRoundKey>
	for(k = 0; k < 4; k++)
	{
		temp[k]=schedule[k];
	}
	AddRoundKey(message, temp);
	for(m = 1; m < 10; m++)
100003cc:	e0bff817 	ldw	r2,-32(fp)
100003d0:	10800044 	addi	r2,r2,1
100003d4:	e0bff815 	stw	r2,-32(fp)
100003d8:	e0bff817 	ldw	r2,-32(fp)
100003dc:	10800290 	cmplti	r2,r2,10
100003e0:	103fd51e 	bne	r2,zero,10000338 <__alt_data_end+0xf8000338>
		{
			temp[k]=schedule[4*m+k];
		}
		AddRoundKey(message, temp);
	}
	SubBytes(message);
100003e4:	e13ffe17 	ldw	r4,-8(fp)
100003e8:	00006240 	call	10000624 <SubBytes>
	ShiftRows(message);
100003ec:	e13ffe17 	ldw	r4,-8(fp)
100003f0:	00006b40 	call	100006b4 <ShiftRows>
	for(k = 0; k < 4; k++)
100003f4:	e03ff715 	stw	zero,-36(fp)
100003f8:	00001206 	br	10000444 <encryption+0x1dc>
	{
		temp[k]=schedule[40+k];
100003fc:	e0bff717 	ldw	r2,-36(fp)
10000400:	10800a04 	addi	r2,r2,40
10000404:	1085883a 	add	r2,r2,r2
10000408:	1085883a 	add	r2,r2,r2
1000040c:	1007883a 	mov	r3,r2
10000410:	e0bfff17 	ldw	r2,-4(fp)
10000414:	10c5883a 	add	r2,r2,r3
10000418:	10c00017 	ldw	r3,0(r2)
1000041c:	e0bff717 	ldw	r2,-36(fp)
10000420:	1085883a 	add	r2,r2,r2
10000424:	1085883a 	add	r2,r2,r2
10000428:	e13ff604 	addi	r4,fp,-40
1000042c:	2085883a 	add	r2,r4,r2
10000430:	10800304 	addi	r2,r2,12
10000434:	10c00015 	stw	r3,0(r2)
		}
		AddRoundKey(message, temp);
	}
	SubBytes(message);
	ShiftRows(message);
	for(k = 0; k < 4; k++)
10000438:	e0bff717 	ldw	r2,-36(fp)
1000043c:	10800044 	addi	r2,r2,1
10000440:	e0bff715 	stw	r2,-36(fp)
10000444:	e0bff717 	ldw	r2,-36(fp)
10000448:	10800110 	cmplti	r2,r2,4
1000044c:	103feb1e 	bne	r2,zero,100003fc <__alt_data_end+0xf80003fc>
	{
		temp[k]=schedule[40+k];
	}
	AddRoundKey(message, temp);
10000450:	e0bff904 	addi	r2,fp,-28
10000454:	e13ffe17 	ldw	r4,-8(fp)
10000458:	100b883a 	mov	r5,r2
1000045c:	00004740 	call	10000474 <AddRoundKey>
}
10000460:	e037883a 	mov	sp,fp
10000464:	dfc00117 	ldw	ra,4(sp)
10000468:	df000017 	ldw	fp,0(sp)
1000046c:	dec00204 	addi	sp,sp,8
10000470:	f800283a 	ret

10000474 <AddRoundKey>:

void AddRoundKey(unsigned char state[16], unsigned long roundkey[4])
{
10000474:	defffc04 	addi	sp,sp,-16
10000478:	df000315 	stw	fp,12(sp)
1000047c:	df000304 	addi	fp,sp,12
10000480:	e13ffe15 	stw	r4,-8(fp)
10000484:	e17fff15 	stw	r5,-4(fp)
	int i;
	for(i = 0; i < 4 ; i++)
10000488:	e03ffd15 	stw	zero,-12(fp)
1000048c:	00005e06 	br	10000608 <AddRoundKey+0x194>
	{
		state[4*i]   ^= roundkey[i] >> 24;
10000490:	e0bffd17 	ldw	r2,-12(fp)
10000494:	1085883a 	add	r2,r2,r2
10000498:	1085883a 	add	r2,r2,r2
1000049c:	1007883a 	mov	r3,r2
100004a0:	e0bffe17 	ldw	r2,-8(fp)
100004a4:	10c7883a 	add	r3,r2,r3
100004a8:	e0bffd17 	ldw	r2,-12(fp)
100004ac:	1085883a 	add	r2,r2,r2
100004b0:	1085883a 	add	r2,r2,r2
100004b4:	1009883a 	mov	r4,r2
100004b8:	e0bffe17 	ldw	r2,-8(fp)
100004bc:	1105883a 	add	r2,r2,r4
100004c0:	11000003 	ldbu	r4,0(r2)
100004c4:	e0bffd17 	ldw	r2,-12(fp)
100004c8:	1085883a 	add	r2,r2,r2
100004cc:	1085883a 	add	r2,r2,r2
100004d0:	100b883a 	mov	r5,r2
100004d4:	e0bfff17 	ldw	r2,-4(fp)
100004d8:	1145883a 	add	r2,r2,r5
100004dc:	10800017 	ldw	r2,0(r2)
100004e0:	1004d63a 	srli	r2,r2,24
100004e4:	2084f03a 	xor	r2,r4,r2
100004e8:	18800005 	stb	r2,0(r3)
		state[4*i+1] ^= roundkey[i] >> 16;
100004ec:	e0bffd17 	ldw	r2,-12(fp)
100004f0:	1085883a 	add	r2,r2,r2
100004f4:	1085883a 	add	r2,r2,r2
100004f8:	10800044 	addi	r2,r2,1
100004fc:	e0fffe17 	ldw	r3,-8(fp)
10000500:	1887883a 	add	r3,r3,r2
10000504:	e0bffd17 	ldw	r2,-12(fp)
10000508:	1085883a 	add	r2,r2,r2
1000050c:	1085883a 	add	r2,r2,r2
10000510:	10800044 	addi	r2,r2,1
10000514:	e13ffe17 	ldw	r4,-8(fp)
10000518:	2085883a 	add	r2,r4,r2
1000051c:	11000003 	ldbu	r4,0(r2)
10000520:	e0bffd17 	ldw	r2,-12(fp)
10000524:	1085883a 	add	r2,r2,r2
10000528:	1085883a 	add	r2,r2,r2
1000052c:	100b883a 	mov	r5,r2
10000530:	e0bfff17 	ldw	r2,-4(fp)
10000534:	1145883a 	add	r2,r2,r5
10000538:	10800017 	ldw	r2,0(r2)
1000053c:	1004d43a 	srli	r2,r2,16
10000540:	2084f03a 	xor	r2,r4,r2
10000544:	18800005 	stb	r2,0(r3)
		state[4*i+2] ^= roundkey[i] >> 8;
10000548:	e0bffd17 	ldw	r2,-12(fp)
1000054c:	1085883a 	add	r2,r2,r2
10000550:	1085883a 	add	r2,r2,r2
10000554:	10800084 	addi	r2,r2,2
10000558:	e0fffe17 	ldw	r3,-8(fp)
1000055c:	1887883a 	add	r3,r3,r2
10000560:	e0bffd17 	ldw	r2,-12(fp)
10000564:	1085883a 	add	r2,r2,r2
10000568:	1085883a 	add	r2,r2,r2
1000056c:	10800084 	addi	r2,r2,2
10000570:	e13ffe17 	ldw	r4,-8(fp)
10000574:	2085883a 	add	r2,r4,r2
10000578:	11000003 	ldbu	r4,0(r2)
1000057c:	e0bffd17 	ldw	r2,-12(fp)
10000580:	1085883a 	add	r2,r2,r2
10000584:	1085883a 	add	r2,r2,r2
10000588:	100b883a 	mov	r5,r2
1000058c:	e0bfff17 	ldw	r2,-4(fp)
10000590:	1145883a 	add	r2,r2,r5
10000594:	10800017 	ldw	r2,0(r2)
10000598:	1004d23a 	srli	r2,r2,8
1000059c:	2084f03a 	xor	r2,r4,r2
100005a0:	18800005 	stb	r2,0(r3)
		state[4*i+3] ^= roundkey[i];
100005a4:	e0bffd17 	ldw	r2,-12(fp)
100005a8:	1085883a 	add	r2,r2,r2
100005ac:	1085883a 	add	r2,r2,r2
100005b0:	108000c4 	addi	r2,r2,3
100005b4:	e0fffe17 	ldw	r3,-8(fp)
100005b8:	1887883a 	add	r3,r3,r2
100005bc:	e0bffd17 	ldw	r2,-12(fp)
100005c0:	1085883a 	add	r2,r2,r2
100005c4:	1085883a 	add	r2,r2,r2
100005c8:	108000c4 	addi	r2,r2,3
100005cc:	e13ffe17 	ldw	r4,-8(fp)
100005d0:	2085883a 	add	r2,r4,r2
100005d4:	11000003 	ldbu	r4,0(r2)
100005d8:	e0bffd17 	ldw	r2,-12(fp)
100005dc:	1085883a 	add	r2,r2,r2
100005e0:	1085883a 	add	r2,r2,r2
100005e4:	100b883a 	mov	r5,r2
100005e8:	e0bfff17 	ldw	r2,-4(fp)
100005ec:	1145883a 	add	r2,r2,r5
100005f0:	10800017 	ldw	r2,0(r2)
100005f4:	2084f03a 	xor	r2,r4,r2
100005f8:	18800005 	stb	r2,0(r3)
}

void AddRoundKey(unsigned char state[16], unsigned long roundkey[4])
{
	int i;
	for(i = 0; i < 4 ; i++)
100005fc:	e0bffd17 	ldw	r2,-12(fp)
10000600:	10800044 	addi	r2,r2,1
10000604:	e0bffd15 	stw	r2,-12(fp)
10000608:	e0bffd17 	ldw	r2,-12(fp)
1000060c:	10800110 	cmplti	r2,r2,4
10000610:	103f9f1e 	bne	r2,zero,10000490 <__alt_data_end+0xf8000490>
		state[4*i]   ^= roundkey[i] >> 24;
		state[4*i+1] ^= roundkey[i] >> 16;
		state[4*i+2] ^= roundkey[i] >> 8;
		state[4*i+3] ^= roundkey[i];
	}
}
10000614:	e037883a 	mov	sp,fp
10000618:	df000017 	ldw	fp,0(sp)
1000061c:	dec00104 	addi	sp,sp,4
10000620:	f800283a 	ret

10000624 <SubBytes>:

void SubBytes(unsigned char state[16])
{
10000624:	defffc04 	addi	sp,sp,-16
10000628:	df000315 	stw	fp,12(sp)
1000062c:	df000304 	addi	fp,sp,12
10000630:	e13fff15 	stw	r4,-4(fp)
	int i;
	unsigned char x;
	for(i = 0; i < 16; i++)
10000634:	e03ffd15 	stw	zero,-12(fp)
10000638:	00001706 	br	10000698 <SubBytes+0x74>
	{
		x = state[i];
1000063c:	e0bffd17 	ldw	r2,-12(fp)
10000640:	e0ffff17 	ldw	r3,-4(fp)
10000644:	1885883a 	add	r2,r3,r2
10000648:	10800003 	ldbu	r2,0(r2)
1000064c:	e0bffe05 	stb	r2,-8(fp)
		state[i] = aes_sbox[x >> 4][x & 0x0F];
10000650:	e0bffd17 	ldw	r2,-12(fp)
10000654:	e0ffff17 	ldw	r3,-4(fp)
10000658:	1887883a 	add	r3,r3,r2
1000065c:	e0bffe03 	ldbu	r2,-8(fp)
10000660:	1004d13a 	srli	r2,r2,4
10000664:	11403fcc 	andi	r5,r2,255
10000668:	e0bffe03 	ldbu	r2,-8(fp)
1000066c:	110003cc 	andi	r4,r2,15
10000670:	00840074 	movhi	r2,4097
10000674:	1080f404 	addi	r2,r2,976
10000678:	280a913a 	slli	r5,r5,4
1000067c:	2909883a 	add	r4,r5,r4
10000680:	1105883a 	add	r2,r2,r4
10000684:	10800003 	ldbu	r2,0(r2)
10000688:	18800005 	stb	r2,0(r3)

void SubBytes(unsigned char state[16])
{
	int i;
	unsigned char x;
	for(i = 0; i < 16; i++)
1000068c:	e0bffd17 	ldw	r2,-12(fp)
10000690:	10800044 	addi	r2,r2,1
10000694:	e0bffd15 	stw	r2,-12(fp)
10000698:	e0bffd17 	ldw	r2,-12(fp)
1000069c:	10800410 	cmplti	r2,r2,16
100006a0:	103fe61e 	bne	r2,zero,1000063c <__alt_data_end+0xf800063c>
	{
		x = state[i];
		state[i] = aes_sbox[x >> 4][x & 0x0F];
	}
}
100006a4:	e037883a 	mov	sp,fp
100006a8:	df000017 	ldw	fp,0(sp)
100006ac:	dec00104 	addi	sp,sp,4
100006b0:	f800283a 	ret

100006b4 <ShiftRows>:

void ShiftRows(unsigned char state[16])
{
100006b4:	defffd04 	addi	sp,sp,-12
100006b8:	df000215 	stw	fp,8(sp)
100006bc:	df000204 	addi	fp,sp,8
100006c0:	e13fff15 	stw	r4,-4(fp)
	unsigned char temp;

	temp = state[1];
100006c4:	e0bfff17 	ldw	r2,-4(fp)
100006c8:	10800043 	ldbu	r2,1(r2)
100006cc:	e0bffe05 	stb	r2,-8(fp)
	state[1] = state[5];
100006d0:	e0bfff17 	ldw	r2,-4(fp)
100006d4:	10800044 	addi	r2,r2,1
100006d8:	e0ffff17 	ldw	r3,-4(fp)
100006dc:	18c00143 	ldbu	r3,5(r3)
100006e0:	10c00005 	stb	r3,0(r2)
	state[5] = state[9];
100006e4:	e0bfff17 	ldw	r2,-4(fp)
100006e8:	10800144 	addi	r2,r2,5
100006ec:	e0ffff17 	ldw	r3,-4(fp)
100006f0:	18c00243 	ldbu	r3,9(r3)
100006f4:	10c00005 	stb	r3,0(r2)
	state[9] = state[13];
100006f8:	e0bfff17 	ldw	r2,-4(fp)
100006fc:	10800244 	addi	r2,r2,9
10000700:	e0ffff17 	ldw	r3,-4(fp)
10000704:	18c00343 	ldbu	r3,13(r3)
10000708:	10c00005 	stb	r3,0(r2)
	state[13] = temp;
1000070c:	e0bfff17 	ldw	r2,-4(fp)
10000710:	10800344 	addi	r2,r2,13
10000714:	e0fffe03 	ldbu	r3,-8(fp)
10000718:	10c00005 	stb	r3,0(r2)

	temp = state[2];
1000071c:	e0bfff17 	ldw	r2,-4(fp)
10000720:	10800083 	ldbu	r2,2(r2)
10000724:	e0bffe05 	stb	r2,-8(fp)
	state[2] = state[10];
10000728:	e0bfff17 	ldw	r2,-4(fp)
1000072c:	10800084 	addi	r2,r2,2
10000730:	e0ffff17 	ldw	r3,-4(fp)
10000734:	18c00283 	ldbu	r3,10(r3)
10000738:	10c00005 	stb	r3,0(r2)
	state[10] = temp;
1000073c:	e0bfff17 	ldw	r2,-4(fp)
10000740:	10800284 	addi	r2,r2,10
10000744:	e0fffe03 	ldbu	r3,-8(fp)
10000748:	10c00005 	stb	r3,0(r2)
	temp = state[6];
1000074c:	e0bfff17 	ldw	r2,-4(fp)
10000750:	10800183 	ldbu	r2,6(r2)
10000754:	e0bffe05 	stb	r2,-8(fp)
	state[6] = state[14];
10000758:	e0bfff17 	ldw	r2,-4(fp)
1000075c:	10800184 	addi	r2,r2,6
10000760:	e0ffff17 	ldw	r3,-4(fp)
10000764:	18c00383 	ldbu	r3,14(r3)
10000768:	10c00005 	stb	r3,0(r2)
	state[14] = temp;
1000076c:	e0bfff17 	ldw	r2,-4(fp)
10000770:	10800384 	addi	r2,r2,14
10000774:	e0fffe03 	ldbu	r3,-8(fp)
10000778:	10c00005 	stb	r3,0(r2)

	temp=state[3];
1000077c:	e0bfff17 	ldw	r2,-4(fp)
10000780:	108000c3 	ldbu	r2,3(r2)
10000784:	e0bffe05 	stb	r2,-8(fp)
	state[3] = state[15];
10000788:	e0bfff17 	ldw	r2,-4(fp)
1000078c:	108000c4 	addi	r2,r2,3
10000790:	e0ffff17 	ldw	r3,-4(fp)
10000794:	18c003c3 	ldbu	r3,15(r3)
10000798:	10c00005 	stb	r3,0(r2)
	state[15] = state[11];
1000079c:	e0bfff17 	ldw	r2,-4(fp)
100007a0:	108003c4 	addi	r2,r2,15
100007a4:	e0ffff17 	ldw	r3,-4(fp)
100007a8:	18c002c3 	ldbu	r3,11(r3)
100007ac:	10c00005 	stb	r3,0(r2)
	state[11] = state[7];
100007b0:	e0bfff17 	ldw	r2,-4(fp)
100007b4:	108002c4 	addi	r2,r2,11
100007b8:	e0ffff17 	ldw	r3,-4(fp)
100007bc:	18c001c3 	ldbu	r3,7(r3)
100007c0:	10c00005 	stb	r3,0(r2)
	state[7] = temp;
100007c4:	e0bfff17 	ldw	r2,-4(fp)
100007c8:	108001c4 	addi	r2,r2,7
100007cc:	e0fffe03 	ldbu	r3,-8(fp)
100007d0:	10c00005 	stb	r3,0(r2)
}
100007d4:	e037883a 	mov	sp,fp
100007d8:	df000017 	ldw	fp,0(sp)
100007dc:	dec00104 	addi	sp,sp,4
100007e0:	f800283a 	ret

100007e4 <xtime>:

unsigned char xtime(unsigned char x)
{
100007e4:	defffe04 	addi	sp,sp,-8
100007e8:	df000115 	stw	fp,4(sp)
100007ec:	df000104 	addi	fp,sp,4
100007f0:	2005883a 	mov	r2,r4
100007f4:	e0bfff05 	stb	r2,-4(fp)
	if ( (x>>7) == 1)
100007f8:	e0bfff03 	ldbu	r2,-4(fp)
100007fc:	1004d1fa 	srli	r2,r2,7
10000800:	10803fcc 	andi	r2,r2,255
10000804:	10800058 	cmpnei	r2,r2,1
10000808:	1000041e 	bne	r2,zero,1000081c <xtime+0x38>
	{
		return ( (x << 1) ^ 0x1b );
1000080c:	e0bfff03 	ldbu	r2,-4(fp)
10000810:	1085883a 	add	r2,r2,r2
10000814:	108006dc 	xori	r2,r2,27
10000818:	00000206 	br	10000824 <xtime+0x40>
	}
	return x << 1;
1000081c:	e0bfff03 	ldbu	r2,-4(fp)
10000820:	1085883a 	add	r2,r2,r2
}
10000824:	e037883a 	mov	sp,fp
10000828:	df000017 	ldw	fp,0(sp)
1000082c:	dec00104 	addi	sp,sp,4
10000830:	f800283a 	ret

10000834 <MixColumns>:

void MixColumns(unsigned char state[16])
{
10000834:	defff904 	addi	sp,sp,-28
10000838:	dfc00615 	stw	ra,24(sp)
1000083c:	df000515 	stw	fp,20(sp)
10000840:	dc400415 	stw	r17,16(sp)
10000844:	dc000315 	stw	r16,12(sp)
10000848:	df000504 	addi	fp,sp,20
1000084c:	e13ffd15 	stw	r4,-12(fp)
	int i;
	unsigned char a, b, c, d;
	for(i = 0; i < 4; i++)
10000850:	e03ffb15 	stw	zero,-20(fp)
10000854:	00008206 	br	10000a60 <MixColumns+0x22c>
	{
		a = state[4*i];
10000858:	e0bffb17 	ldw	r2,-20(fp)
1000085c:	1085883a 	add	r2,r2,r2
10000860:	1085883a 	add	r2,r2,r2
10000864:	1007883a 	mov	r3,r2
10000868:	e0bffd17 	ldw	r2,-12(fp)
1000086c:	10c5883a 	add	r2,r2,r3
10000870:	10800003 	ldbu	r2,0(r2)
10000874:	e0bffc05 	stb	r2,-16(fp)
		b = state[4*i+1];
10000878:	e0bffb17 	ldw	r2,-20(fp)
1000087c:	1085883a 	add	r2,r2,r2
10000880:	1085883a 	add	r2,r2,r2
10000884:	10800044 	addi	r2,r2,1
10000888:	e0fffd17 	ldw	r3,-12(fp)
1000088c:	1885883a 	add	r2,r3,r2
10000890:	10800003 	ldbu	r2,0(r2)
10000894:	e0bffc45 	stb	r2,-15(fp)
		c = state[4*i+2];
10000898:	e0bffb17 	ldw	r2,-20(fp)
1000089c:	1085883a 	add	r2,r2,r2
100008a0:	1085883a 	add	r2,r2,r2
100008a4:	10800084 	addi	r2,r2,2
100008a8:	e0fffd17 	ldw	r3,-12(fp)
100008ac:	1885883a 	add	r2,r3,r2
100008b0:	10800003 	ldbu	r2,0(r2)
100008b4:	e0bffc85 	stb	r2,-14(fp)
		d = state[4*i+3];
100008b8:	e0bffb17 	ldw	r2,-20(fp)
100008bc:	1085883a 	add	r2,r2,r2
100008c0:	1085883a 	add	r2,r2,r2
100008c4:	108000c4 	addi	r2,r2,3
100008c8:	e0fffd17 	ldw	r3,-12(fp)
100008cc:	1885883a 	add	r2,r3,r2
100008d0:	10800003 	ldbu	r2,0(r2)
100008d4:	e0bffcc5 	stb	r2,-13(fp)
		state[4*i]   = xtime(a) ^ xtime(b) ^ b ^ c ^ d;
100008d8:	e0bffb17 	ldw	r2,-20(fp)
100008dc:	1085883a 	add	r2,r2,r2
100008e0:	1085883a 	add	r2,r2,r2
100008e4:	1007883a 	mov	r3,r2
100008e8:	e0bffd17 	ldw	r2,-12(fp)
100008ec:	10e1883a 	add	r16,r2,r3
100008f0:	e0bffc03 	ldbu	r2,-16(fp)
100008f4:	1009883a 	mov	r4,r2
100008f8:	00007e40 	call	100007e4 <xtime>
100008fc:	1023883a 	mov	r17,r2
10000900:	e0bffc43 	ldbu	r2,-15(fp)
10000904:	1009883a 	mov	r4,r2
10000908:	00007e40 	call	100007e4 <xtime>
1000090c:	8884f03a 	xor	r2,r17,r2
10000910:	1007883a 	mov	r3,r2
10000914:	e0bffc43 	ldbu	r2,-15(fp)
10000918:	1884f03a 	xor	r2,r3,r2
1000091c:	1007883a 	mov	r3,r2
10000920:	e0bffc83 	ldbu	r2,-14(fp)
10000924:	1884f03a 	xor	r2,r3,r2
10000928:	1007883a 	mov	r3,r2
1000092c:	e0bffcc3 	ldbu	r2,-13(fp)
10000930:	1884f03a 	xor	r2,r3,r2
10000934:	80800005 	stb	r2,0(r16)
		state[4*i+1] = a ^ xtime(b) ^ xtime(c) ^ c ^ d;
10000938:	e0bffb17 	ldw	r2,-20(fp)
1000093c:	1085883a 	add	r2,r2,r2
10000940:	1085883a 	add	r2,r2,r2
10000944:	10800044 	addi	r2,r2,1
10000948:	e0fffd17 	ldw	r3,-12(fp)
1000094c:	18a1883a 	add	r16,r3,r2
10000950:	e0bffc43 	ldbu	r2,-15(fp)
10000954:	1009883a 	mov	r4,r2
10000958:	00007e40 	call	100007e4 <xtime>
1000095c:	1007883a 	mov	r3,r2
10000960:	e0bffc03 	ldbu	r2,-16(fp)
10000964:	1884f03a 	xor	r2,r3,r2
10000968:	1023883a 	mov	r17,r2
1000096c:	e0bffc83 	ldbu	r2,-14(fp)
10000970:	1009883a 	mov	r4,r2
10000974:	00007e40 	call	100007e4 <xtime>
10000978:	8884f03a 	xor	r2,r17,r2
1000097c:	1007883a 	mov	r3,r2
10000980:	e0bffc83 	ldbu	r2,-14(fp)
10000984:	1884f03a 	xor	r2,r3,r2
10000988:	1007883a 	mov	r3,r2
1000098c:	e0bffcc3 	ldbu	r2,-13(fp)
10000990:	1884f03a 	xor	r2,r3,r2
10000994:	80800005 	stb	r2,0(r16)
		state[4*i+2] = a ^ b ^ xtime(c) ^ xtime(d) ^ d;
10000998:	e0bffb17 	ldw	r2,-20(fp)
1000099c:	1085883a 	add	r2,r2,r2
100009a0:	1085883a 	add	r2,r2,r2
100009a4:	10800084 	addi	r2,r2,2
100009a8:	e0fffd17 	ldw	r3,-12(fp)
100009ac:	18a1883a 	add	r16,r3,r2
100009b0:	e0fffc03 	ldbu	r3,-16(fp)
100009b4:	e0bffc43 	ldbu	r2,-15(fp)
100009b8:	1884f03a 	xor	r2,r3,r2
100009bc:	1023883a 	mov	r17,r2
100009c0:	e0bffc83 	ldbu	r2,-14(fp)
100009c4:	1009883a 	mov	r4,r2
100009c8:	00007e40 	call	100007e4 <xtime>
100009cc:	8884f03a 	xor	r2,r17,r2
100009d0:	1023883a 	mov	r17,r2
100009d4:	e0bffcc3 	ldbu	r2,-13(fp)
100009d8:	1009883a 	mov	r4,r2
100009dc:	00007e40 	call	100007e4 <xtime>
100009e0:	8884f03a 	xor	r2,r17,r2
100009e4:	1007883a 	mov	r3,r2
100009e8:	e0bffcc3 	ldbu	r2,-13(fp)
100009ec:	1884f03a 	xor	r2,r3,r2
100009f0:	80800005 	stb	r2,0(r16)
		state[4*i+3] = xtime(a) ^ a ^ b ^ c ^ xtime(d);
100009f4:	e0bffb17 	ldw	r2,-20(fp)
100009f8:	1085883a 	add	r2,r2,r2
100009fc:	1085883a 	add	r2,r2,r2
10000a00:	108000c4 	addi	r2,r2,3
10000a04:	e0fffd17 	ldw	r3,-12(fp)
10000a08:	18a1883a 	add	r16,r3,r2
10000a0c:	e0bffc03 	ldbu	r2,-16(fp)
10000a10:	1009883a 	mov	r4,r2
10000a14:	00007e40 	call	100007e4 <xtime>
10000a18:	1007883a 	mov	r3,r2
10000a1c:	e0bffc03 	ldbu	r2,-16(fp)
10000a20:	1884f03a 	xor	r2,r3,r2
10000a24:	1007883a 	mov	r3,r2
10000a28:	e0bffc43 	ldbu	r2,-15(fp)
10000a2c:	1884f03a 	xor	r2,r3,r2
10000a30:	1007883a 	mov	r3,r2
10000a34:	e0bffc83 	ldbu	r2,-14(fp)
10000a38:	1884f03a 	xor	r2,r3,r2
10000a3c:	1023883a 	mov	r17,r2
10000a40:	e0bffcc3 	ldbu	r2,-13(fp)
10000a44:	1009883a 	mov	r4,r2
10000a48:	00007e40 	call	100007e4 <xtime>
10000a4c:	8884f03a 	xor	r2,r17,r2
10000a50:	80800005 	stb	r2,0(r16)

void MixColumns(unsigned char state[16])
{
	int i;
	unsigned char a, b, c, d;
	for(i = 0; i < 4; i++)
10000a54:	e0bffb17 	ldw	r2,-20(fp)
10000a58:	10800044 	addi	r2,r2,1
10000a5c:	e0bffb15 	stw	r2,-20(fp)
10000a60:	e0bffb17 	ldw	r2,-20(fp)
10000a64:	10800110 	cmplti	r2,r2,4
10000a68:	103f7b1e 	bne	r2,zero,10000858 <__alt_data_end+0xf8000858>
		state[4*i]   = xtime(a) ^ xtime(b) ^ b ^ c ^ d;
		state[4*i+1] = a ^ xtime(b) ^ xtime(c) ^ c ^ d;
		state[4*i+2] = a ^ b ^ xtime(c) ^ xtime(d) ^ d;
		state[4*i+3] = xtime(a) ^ a ^ b ^ c ^ xtime(d);
	}
}
10000a6c:	e6fffe04 	addi	sp,fp,-8
10000a70:	dfc00317 	ldw	ra,12(sp)
10000a74:	df000217 	ldw	fp,8(sp)
10000a78:	dc400117 	ldw	r17,4(sp)
10000a7c:	dc000017 	ldw	r16,0(sp)
10000a80:	dec00404 	addi	sp,sp,16
10000a84:	f800283a 	ret

10000a88 <SubWord>:

unsigned long SubWord(unsigned long word)
{
10000a88:	defffe04 	addi	sp,sp,-8
10000a8c:	df000115 	stw	fp,4(sp)
10000a90:	df000104 	addi	fp,sp,4
10000a94:	e13fff15 	stw	r4,-4(fp)
	return ( aes_sbox[word >> 28][ (word >> 24) & 0x0F] << 24 ) +
10000a98:	e0bfff17 	ldw	r2,-4(fp)
10000a9c:	1008d73a 	srli	r4,r2,28
10000aa0:	e0bfff17 	ldw	r2,-4(fp)
10000aa4:	1004d63a 	srli	r2,r2,24
10000aa8:	10c003cc 	andi	r3,r2,15
10000aac:	00840074 	movhi	r2,4097
10000ab0:	1080f404 	addi	r2,r2,976
10000ab4:	2008913a 	slli	r4,r4,4
10000ab8:	20c7883a 	add	r3,r4,r3
10000abc:	10c5883a 	add	r2,r2,r3
10000ac0:	10800003 	ldbu	r2,0(r2)
10000ac4:	10803fcc 	andi	r2,r2,255
10000ac8:	1006963a 	slli	r3,r2,24
		   ( aes_sbox[ (word >> 20) & 0x00F][ (word >> 16) & 0x000F] << 16 ) +
10000acc:	e0bfff17 	ldw	r2,-4(fp)
10000ad0:	1004d53a 	srli	r2,r2,20
10000ad4:	114003cc 	andi	r5,r2,15
10000ad8:	e0bfff17 	ldw	r2,-4(fp)
10000adc:	1004d43a 	srli	r2,r2,16
10000ae0:	110003cc 	andi	r4,r2,15
10000ae4:	00840074 	movhi	r2,4097
10000ae8:	1080f404 	addi	r2,r2,976
10000aec:	280a913a 	slli	r5,r5,4
10000af0:	2909883a 	add	r4,r5,r4
10000af4:	1105883a 	add	r2,r2,r4
10000af8:	10800003 	ldbu	r2,0(r2)
10000afc:	10803fcc 	andi	r2,r2,255
10000b00:	1004943a 	slli	r2,r2,16
	}
}

unsigned long SubWord(unsigned long word)
{
	return ( aes_sbox[word >> 28][ (word >> 24) & 0x0F] << 24 ) +
10000b04:	1887883a 	add	r3,r3,r2
		   ( aes_sbox[ (word >> 20) & 0x00F][ (word >> 16) & 0x000F] << 16 ) +
		   ( aes_sbox[(word >> 12) & 0x0000F][ (word >> 8) & 0x00000F] << 8 ) +
10000b08:	e0bfff17 	ldw	r2,-4(fp)
10000b0c:	1004d33a 	srli	r2,r2,12
10000b10:	114003cc 	andi	r5,r2,15
10000b14:	e0bfff17 	ldw	r2,-4(fp)
10000b18:	1004d23a 	srli	r2,r2,8
10000b1c:	110003cc 	andi	r4,r2,15
10000b20:	00840074 	movhi	r2,4097
10000b24:	1080f404 	addi	r2,r2,976
10000b28:	280a913a 	slli	r5,r5,4
10000b2c:	2909883a 	add	r4,r5,r4
10000b30:	1105883a 	add	r2,r2,r4
10000b34:	10800003 	ldbu	r2,0(r2)
10000b38:	10803fcc 	andi	r2,r2,255
10000b3c:	1004923a 	slli	r2,r2,8
}

unsigned long SubWord(unsigned long word)
{
	return ( aes_sbox[word >> 28][ (word >> 24) & 0x0F] << 24 ) +
		   ( aes_sbox[ (word >> 20) & 0x00F][ (word >> 16) & 0x000F] << 16 ) +
10000b40:	1887883a 	add	r3,r3,r2
		   ( aes_sbox[(word >> 12) & 0x0000F][ (word >> 8) & 0x00000F] << 8 ) +
		   ( aes_sbox[(word >> 4) & 0x000000F][ (word) & 0x0000000F] );
10000b44:	e0bfff17 	ldw	r2,-4(fp)
10000b48:	1004d13a 	srli	r2,r2,4
10000b4c:	114003cc 	andi	r5,r2,15
10000b50:	e0bfff17 	ldw	r2,-4(fp)
10000b54:	110003cc 	andi	r4,r2,15
10000b58:	00840074 	movhi	r2,4097
10000b5c:	1080f404 	addi	r2,r2,976
10000b60:	280a913a 	slli	r5,r5,4
10000b64:	2909883a 	add	r4,r5,r4
10000b68:	1105883a 	add	r2,r2,r4
10000b6c:	10800003 	ldbu	r2,0(r2)

unsigned long SubWord(unsigned long word)
{
	return ( aes_sbox[word >> 28][ (word >> 24) & 0x0F] << 24 ) +
		   ( aes_sbox[ (word >> 20) & 0x00F][ (word >> 16) & 0x000F] << 16 ) +
		   ( aes_sbox[(word >> 12) & 0x0000F][ (word >> 8) & 0x00000F] << 8 ) +
10000b70:	10803fcc 	andi	r2,r2,255
10000b74:	1885883a 	add	r2,r3,r2
		   ( aes_sbox[(word >> 4) & 0x000000F][ (word) & 0x0000000F] );
}
10000b78:	e037883a 	mov	sp,fp
10000b7c:	df000017 	ldw	fp,0(sp)
10000b80:	dec00104 	addi	sp,sp,4
10000b84:	f800283a 	ret

10000b88 <RotWord>:

unsigned long RotWord(unsigned long word)
{
10000b88:	defffe04 	addi	sp,sp,-8
10000b8c:	df000115 	stw	fp,4(sp)
10000b90:	df000104 	addi	fp,sp,4
10000b94:	e13fff15 	stw	r4,-4(fp)
	return ( (word & 0x00FF0000) << 8 ) + ( (word & 0x0000FF00) << 8 ) + ( (word & 0x000000FF) << 8 ) + ( (word & 0xFF000000) >> 24 );
10000b98:	e0bfff17 	ldw	r2,-4(fp)
10000b9c:	10803fec 	andhi	r2,r2,255
10000ba0:	1006923a 	slli	r3,r2,8
10000ba4:	e0bfff17 	ldw	r2,-4(fp)
10000ba8:	10bfc00c 	andi	r2,r2,65280
10000bac:	1004923a 	slli	r2,r2,8
10000bb0:	1887883a 	add	r3,r3,r2
10000bb4:	e0bfff17 	ldw	r2,-4(fp)
10000bb8:	1004923a 	slli	r2,r2,8
10000bbc:	10bfffcc 	andi	r2,r2,65535
10000bc0:	1887883a 	add	r3,r3,r2
10000bc4:	e0bfff17 	ldw	r2,-4(fp)
10000bc8:	1004d63a 	srli	r2,r2,24
10000bcc:	1885883a 	add	r2,r3,r2
}
10000bd0:	e037883a 	mov	sp,fp
10000bd4:	df000017 	ldw	fp,0(sp)
10000bd8:	dec00104 	addi	sp,sp,4
10000bdc:	f800283a 	ret

10000be0 <KeyExpansion>:

void KeyExpansion(unsigned char key[16], unsigned long schedule[44])
{
10000be0:	defffa04 	addi	sp,sp,-24
10000be4:	dfc00515 	stw	ra,20(sp)
10000be8:	df000415 	stw	fp,16(sp)
10000bec:	df000404 	addi	fp,sp,16
10000bf0:	e13ffe15 	stw	r4,-8(fp)
10000bf4:	e17fff15 	stw	r5,-4(fp)
	int i;
	unsigned long temp;
	for(i = 0; i < 4; i++)
10000bf8:	e03ffc15 	stw	zero,-16(fp)
10000bfc:	00003006 	br	10000cc0 <KeyExpansion+0xe0>
	{
		schedule[i] = (key[4*i] << 24) + (key[4*i+1] << 16) + (key[4*i+2] << 8) + key[4*i+3];
10000c00:	e0bffc17 	ldw	r2,-16(fp)
10000c04:	1085883a 	add	r2,r2,r2
10000c08:	1085883a 	add	r2,r2,r2
10000c0c:	1007883a 	mov	r3,r2
10000c10:	e0bfff17 	ldw	r2,-4(fp)
10000c14:	10c7883a 	add	r3,r2,r3
10000c18:	e0bffc17 	ldw	r2,-16(fp)
10000c1c:	1085883a 	add	r2,r2,r2
10000c20:	1085883a 	add	r2,r2,r2
10000c24:	1009883a 	mov	r4,r2
10000c28:	e0bffe17 	ldw	r2,-8(fp)
10000c2c:	1105883a 	add	r2,r2,r4
10000c30:	10800003 	ldbu	r2,0(r2)
10000c34:	10803fcc 	andi	r2,r2,255
10000c38:	1008963a 	slli	r4,r2,24
10000c3c:	e0bffc17 	ldw	r2,-16(fp)
10000c40:	1085883a 	add	r2,r2,r2
10000c44:	1085883a 	add	r2,r2,r2
10000c48:	10800044 	addi	r2,r2,1
10000c4c:	e17ffe17 	ldw	r5,-8(fp)
10000c50:	2885883a 	add	r2,r5,r2
10000c54:	10800003 	ldbu	r2,0(r2)
10000c58:	10803fcc 	andi	r2,r2,255
10000c5c:	1004943a 	slli	r2,r2,16
10000c60:	2089883a 	add	r4,r4,r2
10000c64:	e0bffc17 	ldw	r2,-16(fp)
10000c68:	1085883a 	add	r2,r2,r2
10000c6c:	1085883a 	add	r2,r2,r2
10000c70:	10800084 	addi	r2,r2,2
10000c74:	e17ffe17 	ldw	r5,-8(fp)
10000c78:	2885883a 	add	r2,r5,r2
10000c7c:	10800003 	ldbu	r2,0(r2)
10000c80:	10803fcc 	andi	r2,r2,255
10000c84:	1004923a 	slli	r2,r2,8
10000c88:	2089883a 	add	r4,r4,r2
10000c8c:	e0bffc17 	ldw	r2,-16(fp)
10000c90:	1085883a 	add	r2,r2,r2
10000c94:	1085883a 	add	r2,r2,r2
10000c98:	108000c4 	addi	r2,r2,3
10000c9c:	e17ffe17 	ldw	r5,-8(fp)
10000ca0:	2885883a 	add	r2,r5,r2
10000ca4:	10800003 	ldbu	r2,0(r2)
10000ca8:	10803fcc 	andi	r2,r2,255
10000cac:	2085883a 	add	r2,r4,r2
10000cb0:	18800015 	stw	r2,0(r3)

void KeyExpansion(unsigned char key[16], unsigned long schedule[44])
{
	int i;
	unsigned long temp;
	for(i = 0; i < 4; i++)
10000cb4:	e0bffc17 	ldw	r2,-16(fp)
10000cb8:	10800044 	addi	r2,r2,1
10000cbc:	e0bffc15 	stw	r2,-16(fp)
10000cc0:	e0bffc17 	ldw	r2,-16(fp)
10000cc4:	10800110 	cmplti	r2,r2,4
10000cc8:	103fcd1e 	bne	r2,zero,10000c00 <__alt_data_end+0xf8000c00>
	{
		schedule[i] = (key[4*i] << 24) + (key[4*i+1] << 16) + (key[4*i+2] << 8) + key[4*i+3];
	}
	for(i = 4; i < 44; i++)
10000ccc:	00800104 	movi	r2,4
10000cd0:	e0bffc15 	stw	r2,-16(fp)
10000cd4:	00003006 	br	10000d98 <KeyExpansion+0x1b8>
	{
		temp = schedule[i-1];
10000cd8:	e0bffc17 	ldw	r2,-16(fp)
10000cdc:	1085883a 	add	r2,r2,r2
10000ce0:	1085883a 	add	r2,r2,r2
10000ce4:	10bfff04 	addi	r2,r2,-4
10000ce8:	e0ffff17 	ldw	r3,-4(fp)
10000cec:	1885883a 	add	r2,r3,r2
10000cf0:	10800017 	ldw	r2,0(r2)
10000cf4:	e0bffd15 	stw	r2,-12(fp)
		if ((i % 4) == 0)
10000cf8:	e0bffc17 	ldw	r2,-16(fp)
10000cfc:	108000cc 	andi	r2,r2,3
10000d00:	1000121e 	bne	r2,zero,10000d4c <KeyExpansion+0x16c>
		{
			temp = SubWord(RotWord(temp)) ^ Rcon[i / 4 - 1];
10000d04:	e13ffd17 	ldw	r4,-12(fp)
10000d08:	0000b880 	call	10000b88 <RotWord>
10000d0c:	1009883a 	mov	r4,r2
10000d10:	0000a880 	call	10000a88 <SubWord>
10000d14:	1009883a 	mov	r4,r2
10000d18:	e0bffc17 	ldw	r2,-16(fp)
10000d1c:	1000010e 	bge	r2,zero,10000d24 <KeyExpansion+0x144>
10000d20:	108000c4 	addi	r2,r2,3
10000d24:	1005d0ba 	srai	r2,r2,2
10000d28:	10ffffc4 	addi	r3,r2,-1
10000d2c:	00840074 	movhi	r2,4097
10000d30:	1083de04 	addi	r2,r2,3960
10000d34:	18c7883a 	add	r3,r3,r3
10000d38:	18c7883a 	add	r3,r3,r3
10000d3c:	10c5883a 	add	r2,r2,r3
10000d40:	10800017 	ldw	r2,0(r2)
10000d44:	2084f03a 	xor	r2,r4,r2
10000d48:	e0bffd15 	stw	r2,-12(fp)
		}
		schedule[i] = schedule[i-4] ^ temp;
10000d4c:	e0bffc17 	ldw	r2,-16(fp)
10000d50:	1085883a 	add	r2,r2,r2
10000d54:	1085883a 	add	r2,r2,r2
10000d58:	1007883a 	mov	r3,r2
10000d5c:	e0bfff17 	ldw	r2,-4(fp)
10000d60:	10c7883a 	add	r3,r2,r3
10000d64:	e0bffc17 	ldw	r2,-16(fp)
10000d68:	1085883a 	add	r2,r2,r2
10000d6c:	1085883a 	add	r2,r2,r2
10000d70:	10bffc04 	addi	r2,r2,-16
10000d74:	e13fff17 	ldw	r4,-4(fp)
10000d78:	2085883a 	add	r2,r4,r2
10000d7c:	11000017 	ldw	r4,0(r2)
10000d80:	e0bffd17 	ldw	r2,-12(fp)
10000d84:	2084f03a 	xor	r2,r4,r2
10000d88:	18800015 	stw	r2,0(r3)
	unsigned long temp;
	for(i = 0; i < 4; i++)
	{
		schedule[i] = (key[4*i] << 24) + (key[4*i+1] << 16) + (key[4*i+2] << 8) + key[4*i+3];
	}
	for(i = 4; i < 44; i++)
10000d8c:	e0bffc17 	ldw	r2,-16(fp)
10000d90:	10800044 	addi	r2,r2,1
10000d94:	e0bffc15 	stw	r2,-16(fp)
10000d98:	e0bffc17 	ldw	r2,-16(fp)
10000d9c:	10800b10 	cmplti	r2,r2,44
10000da0:	103fcd1e 	bne	r2,zero,10000cd8 <__alt_data_end+0xf8000cd8>
		{
			temp = SubWord(RotWord(temp)) ^ Rcon[i / 4 - 1];
		}
		schedule[i] = schedule[i-4] ^ temp;
	}
}
10000da4:	e037883a 	mov	sp,fp
10000da8:	dfc00117 	ldw	ra,4(sp)
10000dac:	df000017 	ldw	fp,0(sp)
10000db0:	dec00204 	addi	sp,sp,8
10000db4:	f800283a 	ret

10000db8 <charToHex>:
#define TEMPTEXT_2 (volatile char*) 0x00000030 // actual address here
#define TEMPTEXT_3 (volatile char*) 0x00000020 // actual address here


char charToHex(char c)
{
10000db8:	defffd04 	addi	sp,sp,-12
10000dbc:	df000215 	stw	fp,8(sp)
10000dc0:	df000204 	addi	fp,sp,8
10000dc4:	2005883a 	mov	r2,r4
10000dc8:	e0bfff05 	stb	r2,-4(fp)
	char hex = c;
10000dcc:	e0bfff03 	ldbu	r2,-4(fp)
10000dd0:	e0bffe05 	stb	r2,-8(fp)

	if (hex >= '0' && hex <= '9')
10000dd4:	e0bffe07 	ldb	r2,-8(fp)
10000dd8:	10800c10 	cmplti	r2,r2,48
10000ddc:	1000071e 	bne	r2,zero,10000dfc <charToHex+0x44>
10000de0:	e0bffe07 	ldb	r2,-8(fp)
10000de4:	10800e88 	cmpgei	r2,r2,58
10000de8:	1000041e 	bne	r2,zero,10000dfc <charToHex+0x44>
		hex -= '0';
10000dec:	e0bffe03 	ldbu	r2,-8(fp)
10000df0:	10bff404 	addi	r2,r2,-48
10000df4:	e0bffe05 	stb	r2,-8(fp)
10000df8:	00001906 	br	10000e60 <charToHex+0xa8>
	else if (hex >= 'A' && hex <='F')
10000dfc:	e0bffe07 	ldb	r2,-8(fp)
10000e00:	10801050 	cmplti	r2,r2,65
10000e04:	10000a1e 	bne	r2,zero,10000e30 <charToHex+0x78>
10000e08:	e0bffe07 	ldb	r2,-8(fp)
10000e0c:	108011c8 	cmpgei	r2,r2,71
10000e10:	1000071e 	bne	r2,zero,10000e30 <charToHex+0x78>
	{
		hex -= 'A';
10000e14:	e0bffe03 	ldbu	r2,-8(fp)
10000e18:	10bfefc4 	addi	r2,r2,-65
10000e1c:	e0bffe05 	stb	r2,-8(fp)
		hex += 10;
10000e20:	e0bffe03 	ldbu	r2,-8(fp)
10000e24:	10800284 	addi	r2,r2,10
10000e28:	e0bffe05 	stb	r2,-8(fp)
10000e2c:	00000c06 	br	10000e60 <charToHex+0xa8>
	}
	else if (hex >= 'a' && hex <='f')
10000e30:	e0bffe07 	ldb	r2,-8(fp)
10000e34:	10801850 	cmplti	r2,r2,97
10000e38:	1000091e 	bne	r2,zero,10000e60 <charToHex+0xa8>
10000e3c:	e0bffe07 	ldb	r2,-8(fp)
10000e40:	108019c8 	cmpgei	r2,r2,103
10000e44:	1000061e 	bne	r2,zero,10000e60 <charToHex+0xa8>
	{
		hex -= 'a';
10000e48:	e0bffe03 	ldbu	r2,-8(fp)
10000e4c:	10bfe7c4 	addi	r2,r2,-97
10000e50:	e0bffe05 	stb	r2,-8(fp)
		hex += 10;
10000e54:	e0bffe03 	ldbu	r2,-8(fp)
10000e58:	10800284 	addi	r2,r2,10
10000e5c:	e0bffe05 	stb	r2,-8(fp)
	}
	return hex;
10000e60:	e0bffe03 	ldbu	r2,-8(fp)
}
10000e64:	e037883a 	mov	sp,fp
10000e68:	df000017 	ldw	fp,0(sp)
10000e6c:	dec00104 	addi	sp,sp,4
10000e70:	f800283a 	ret

10000e74 <charsToHex>:

char charsToHex(char c1, char c2)
{
10000e74:	defffb04 	addi	sp,sp,-20
10000e78:	dfc00415 	stw	ra,16(sp)
10000e7c:	df000315 	stw	fp,12(sp)
10000e80:	df000304 	addi	fp,sp,12
10000e84:	2007883a 	mov	r3,r4
10000e88:	2805883a 	mov	r2,r5
10000e8c:	e0fffe05 	stb	r3,-8(fp)
10000e90:	e0bfff05 	stb	r2,-4(fp)
	char hex1 = charToHex(c1);
10000e94:	e0bffe07 	ldb	r2,-8(fp)
10000e98:	1009883a 	mov	r4,r2
10000e9c:	0000db80 	call	10000db8 <charToHex>
10000ea0:	e0bffd05 	stb	r2,-12(fp)
	char hex2 = charToHex(c2);
10000ea4:	e0bfff07 	ldb	r2,-4(fp)
10000ea8:	1009883a 	mov	r4,r2
10000eac:	0000db80 	call	10000db8 <charToHex>
10000eb0:	e0bffd45 	stb	r2,-11(fp)
	return (hex1 << 4) + hex2;
10000eb4:	e0bffd03 	ldbu	r2,-12(fp)
10000eb8:	1004913a 	slli	r2,r2,4
10000ebc:	1007883a 	mov	r3,r2
10000ec0:	e0bffd43 	ldbu	r2,-11(fp)
10000ec4:	1885883a 	add	r2,r3,r2
}
10000ec8:	e037883a 	mov	sp,fp
10000ecc:	dfc00117 	ldw	ra,4(sp)
10000ed0:	df000017 	ldw	fp,0(sp)
10000ed4:	dec00204 	addi	sp,sp,8
10000ed8:	f800283a 	ret

10000edc <main>:

int main()
{
10000edc:	deffaf04 	addi	sp,sp,-324
10000ee0:	dfc05015 	stw	ra,320(sp)
10000ee4:	df004f15 	stw	fp,316(sp)
10000ee8:	df004f04 	addi	fp,sp,316
	//unsigned char newkey[16];
	unsigned char message[16];
	unsigned char decoded[16];
	unsigned long keyschedule[44];
	// Start with pressing reset
	*to_hw_sig = 0;
10000eec:	00802004 	movi	r2,128
10000ef0:	10000005 	stb	zero,0(r2)
	*to_hw_port = 0;
10000ef4:	00802404 	movi	r2,144
10000ef8:	10000005 	stb	zero,0(r2)
	printf("Press reset!\n");
10000efc:	01040074 	movhi	r4,4097
10000f00:	21017404 	addi	r4,r4,1488
10000f04:	000156c0 	call	1000156c <puts>
	while (*to_sw_sig != 3);
10000f08:	0001883a 	nop
10000f0c:	00801804 	movi	r2,96
10000f10:	10800003 	ldbu	r2,0(r2)
10000f14:	10803fcc 	andi	r2,r2,255
10000f18:	1080201c 	xori	r2,r2,128
10000f1c:	10bfe004 	addi	r2,r2,-128
10000f20:	108000d8 	cmpnei	r2,r2,3
10000f24:	103ff91e 	bne	r2,zero,10000f0c <__alt_data_end+0xf8000f0c>

	//while (1)
	//{
		*to_hw_sig = 0;
10000f28:	00802004 	movi	r2,128
10000f2c:	10000005 	stb	zero,0(r2)
		{
			newtext[i] = charsToHex(plaintext[2*i], plaintext[2*i+1]);
			newkey[i] = charsToHex(key[2*i], key[2*i+1]);
		}
*/
		unsigned char newtext[16] = {0xec,0xe2,0x98,0xdc,0xec,0xe2,0x98,0xdc,0xec,0xe2,0x98,0xdc,0xec,0xe2,0x98,0xdc};
10000f30:	00840074 	movhi	r2,4097
10000f34:	10819584 	addi	r2,r2,1622
10000f38:	e0fff804 	addi	r3,fp,-32
10000f3c:	100b883a 	mov	r5,r2
10000f40:	00800404 	movi	r2,16
10000f44:	1809883a 	mov	r4,r3
10000f48:	100d883a 	mov	r6,r2
10000f4c:	00013140 	call	10001314 <memcpy>
		unsigned char newkey[16] = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f};
10000f50:	00840074 	movhi	r2,4097
10000f54:	10819984 	addi	r2,r2,1638
10000f58:	e0fffc04 	addi	r3,fp,-16
10000f5c:	100b883a 	mov	r5,r2
10000f60:	00800404 	movi	r2,16
10000f64:	1809883a 	mov	r4,r3
10000f68:	100d883a 	mov	r6,r2
10000f6c:	00013140 	call	10001314 <memcpy>
		printf("\nText is: ");
10000f70:	01040074 	movhi	r4,4097
10000f74:	21017804 	addi	r4,r4,1504
10000f78:	00014780 	call	10001478 <printf>
		for (i = 0; i < 16; i++)
10000f7c:	e03fb115 	stw	zero,-316(fp)
10000f80:	00000c06 	br	10000fb4 <main+0xd8>
		{
			printf("%x", newtext[i]);
10000f84:	e0fff804 	addi	r3,fp,-32
10000f88:	e0bfb117 	ldw	r2,-316(fp)
10000f8c:	1885883a 	add	r2,r3,r2
10000f90:	10800003 	ldbu	r2,0(r2)
10000f94:	10803fcc 	andi	r2,r2,255
10000f98:	01040074 	movhi	r4,4097
10000f9c:	21017b04 	addi	r4,r4,1516
10000fa0:	100b883a 	mov	r5,r2
10000fa4:	00014780 	call	10001478 <printf>
		}
*/
		unsigned char newtext[16] = {0xec,0xe2,0x98,0xdc,0xec,0xe2,0x98,0xdc,0xec,0xe2,0x98,0xdc,0xec,0xe2,0x98,0xdc};
		unsigned char newkey[16] = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f};
		printf("\nText is: ");
		for (i = 0; i < 16; i++)
10000fa8:	e0bfb117 	ldw	r2,-316(fp)
10000fac:	10800044 	addi	r2,r2,1
10000fb0:	e0bfb115 	stw	r2,-316(fp)
10000fb4:	e0bfb117 	ldw	r2,-316(fp)
10000fb8:	10800410 	cmplti	r2,r2,16
10000fbc:	103ff11e 	bne	r2,zero,10000f84 <__alt_data_end+0xf8000f84>
		{
			printf("%x", newtext[i]);
		}
		printf("\nKey is: ");
10000fc0:	01040074 	movhi	r4,4097
10000fc4:	21017c04 	addi	r4,r4,1520
10000fc8:	00014780 	call	10001478 <printf>
		for (i = 0; i < 16; i++)
10000fcc:	e03fb115 	stw	zero,-316(fp)
10000fd0:	00000c06 	br	10001004 <main+0x128>
		{
			printf("%x", newkey[i]);
10000fd4:	e0fffc04 	addi	r3,fp,-16
10000fd8:	e0bfb117 	ldw	r2,-316(fp)
10000fdc:	1885883a 	add	r2,r3,r2
10000fe0:	10800003 	ldbu	r2,0(r2)
10000fe4:	10803fcc 	andi	r2,r2,255
10000fe8:	01040074 	movhi	r4,4097
10000fec:	21017b04 	addi	r4,r4,1516
10000ff0:	100b883a 	mov	r5,r2
10000ff4:	00014780 	call	10001478 <printf>
		for (i = 0; i < 16; i++)
		{
			printf("%x", newtext[i]);
		}
		printf("\nKey is: ");
		for (i = 0; i < 16; i++)
10000ff8:	e0bfb117 	ldw	r2,-316(fp)
10000ffc:	10800044 	addi	r2,r2,1
10001000:	e0bfb115 	stw	r2,-316(fp)
10001004:	e0bfb117 	ldw	r2,-316(fp)
10001008:	10800410 	cmplti	r2,r2,16
1000100c:	103ff11e 	bne	r2,zero,10000fd4 <__alt_data_end+0xf8000fd4>
		{
			printf("%x", newkey[i]);
		} 
		KeyExpansion(newkey,keyschedule);
10001010:	e0fffc04 	addi	r3,fp,-16
10001014:	e0bfcc04 	addi	r2,fp,-208
10001018:	1809883a 	mov	r4,r3
1000101c:	100b883a 	mov	r5,r2
10001020:	0000be00 	call	10000be0 <KeyExpansion>
		encryption(newtext, message, keyschedule);
10001024:	e13ff804 	addi	r4,fp,-32
10001028:	e0ffc384 	addi	r3,fp,-242
1000102c:	e0bfcc04 	addi	r2,fp,-208
10001030:	180b883a 	mov	r5,r3
10001034:	100d883a 	mov	r6,r2
10001038:	00002680 	call	10000268 <encryption>

		// TODO: display the encrypted message.
		printf("\nEncrypted message is: ");
1000103c:	01040074 	movhi	r4,4097
10001040:	21017f04 	addi	r4,r4,1532
10001044:	00014780 	call	10001478 <printf>
		for (i = 0; i < 16; i++)
10001048:	e03fb115 	stw	zero,-316(fp)
1000104c:	00000c06 	br	10001080 <main+0x1a4>
		{
			printf("%x", message[i]);
10001050:	e0ffc384 	addi	r3,fp,-242
10001054:	e0bfb117 	ldw	r2,-316(fp)
10001058:	1885883a 	add	r2,r3,r2
1000105c:	10800003 	ldbu	r2,0(r2)
10001060:	10803fcc 	andi	r2,r2,255
10001064:	01040074 	movhi	r4,4097
10001068:	21017b04 	addi	r4,r4,1516
1000106c:	100b883a 	mov	r5,r2
10001070:	00014780 	call	10001478 <printf>
		KeyExpansion(newkey,keyschedule);
		encryption(newtext, message, keyschedule);

		// TODO: display the encrypted message.
		printf("\nEncrypted message is: ");
		for (i = 0; i < 16; i++)
10001074:	e0bfb117 	ldw	r2,-316(fp)
10001078:	10800044 	addi	r2,r2,1
1000107c:	e0bfb115 	stw	r2,-316(fp)
10001080:	e0bfb117 	ldw	r2,-316(fp)
10001084:	10800410 	cmplti	r2,r2,16
10001088:	103ff11e 	bne	r2,zero,10001050 <__alt_data_end+0xf8001050>
		{
			printf("%x", message[i]);
		}

		// Transmit encrypted message to hardware side for decryption.
		printf("\nTransmitting message...\n");
1000108c:	01040074 	movhi	r4,4097
10001090:	21018504 	addi	r4,r4,1556
10001094:	000156c0 	call	1000156c <puts>

		for (i = 0; i < 16; i++)
10001098:	e03fb115 	stw	zero,-316(fp)
1000109c:	00001e06 	br	10001118 <main+0x23c>
		{
			*to_hw_sig = 1;
100010a0:	00802004 	movi	r2,128
100010a4:	00c00044 	movi	r3,1
100010a8:	10c00005 	stb	r3,0(r2)
			*to_hw_port = message[i]; // encryptedMsg is your encrypted message
100010ac:	00802404 	movi	r2,144
100010b0:	e13fc384 	addi	r4,fp,-242
100010b4:	e0ffb117 	ldw	r3,-316(fp)
100010b8:	20c7883a 	add	r3,r4,r3
100010bc:	18c00003 	ldbu	r3,0(r3)
100010c0:	10c00005 	stb	r3,0(r2)
			// Consider to use charToHex() if your encrypted message is a string. 
			while (*to_sw_sig != 1);
100010c4:	0001883a 	nop
100010c8:	00801804 	movi	r2,96
100010cc:	10800003 	ldbu	r2,0(r2)
100010d0:	10803fcc 	andi	r2,r2,255
100010d4:	1080201c 	xori	r2,r2,128
100010d8:	10bfe004 	addi	r2,r2,-128
100010dc:	10800058 	cmpnei	r2,r2,1
100010e0:	103ff91e 	bne	r2,zero,100010c8 <__alt_data_end+0xf80010c8>
			*to_hw_sig = 2;
100010e4:	00802004 	movi	r2,128
100010e8:	00c00084 	movi	r3,2
100010ec:	10c00005 	stb	r3,0(r2)
			while (*to_sw_sig != 0);
100010f0:	0001883a 	nop
100010f4:	00801804 	movi	r2,96
100010f8:	10800003 	ldbu	r2,0(r2)
100010fc:	10803fcc 	andi	r2,r2,255
10001100:	1080201c 	xori	r2,r2,128
10001104:	10bfe004 	addi	r2,r2,-128
10001108:	103ffa1e 	bne	r2,zero,100010f4 <__alt_data_end+0xf80010f4>
		}

		// Transmit encrypted message to hardware side for decryption.
		printf("\nTransmitting message...\n");

		for (i = 0; i < 16; i++)
1000110c:	e0bfb117 	ldw	r2,-316(fp)
10001110:	10800044 	addi	r2,r2,1
10001114:	e0bfb115 	stw	r2,-316(fp)
10001118:	e0bfb117 	ldw	r2,-316(fp)
1000111c:	10800410 	cmplti	r2,r2,16
10001120:	103fdf1e 	bne	r2,zero,100010a0 <__alt_data_end+0xf80010a0>
			// Consider to use charToHex() if your encrypted message is a string. 
			while (*to_sw_sig != 1);
			*to_hw_sig = 2;
			while (*to_sw_sig != 0);
		}
		*to_hw_sig=0;
10001124:	00802004 	movi	r2,128
10001128:	10000005 	stb	zero,0(r2)
		while (*to_sw_sig != 0);
1000112c:	0001883a 	nop
10001130:	00801804 	movi	r2,96
10001134:	10800003 	ldbu	r2,0(r2)
10001138:	10803fcc 	andi	r2,r2,255
1000113c:	1080201c 	xori	r2,r2,128
10001140:	10bfe004 	addi	r2,r2,-128
10001144:	103ffa1e 	bne	r2,zero,10001130 <__alt_data_end+0xf8001130>
		// Transmit encrypted message to hardware side for decryption. 

		//TODO: Transmit key
		printf("\nTransmitting key...\n");
10001148:	01040074 	movhi	r4,4097
1000114c:	21018c04 	addi	r4,r4,1584
10001150:	000156c0 	call	1000156c <puts>
		for (i = 0; i < 16; i++) {
10001154:	e03fb115 	stw	zero,-316(fp)
10001158:	00001e06 	br	100011d4 <main+0x2f8>
			*to_hw_sig = 2;
1000115c:	00802004 	movi	r2,128
10001160:	00c00084 	movi	r3,2
10001164:	10c00005 	stb	r3,0(r2)
			*to_hw_port = newkey[i];
10001168:	00802404 	movi	r2,144
1000116c:	e13ffc04 	addi	r4,fp,-16
10001170:	e0ffb117 	ldw	r3,-316(fp)
10001174:	20c7883a 	add	r3,r4,r3
10001178:	18c00003 	ldbu	r3,0(r3)
1000117c:	10c00005 	stb	r3,0(r2)
			while (*to_sw_sig != 1);
10001180:	0001883a 	nop
10001184:	00801804 	movi	r2,96
10001188:	10800003 	ldbu	r2,0(r2)
1000118c:	10803fcc 	andi	r2,r2,255
10001190:	1080201c 	xori	r2,r2,128
10001194:	10bfe004 	addi	r2,r2,-128
10001198:	10800058 	cmpnei	r2,r2,1
1000119c:	103ff91e 	bne	r2,zero,10001184 <__alt_data_end+0xf8001184>
			*to_hw_sig = 1;
100011a0:	00802004 	movi	r2,128
100011a4:	00c00044 	movi	r3,1
100011a8:	10c00005 	stb	r3,0(r2)
			while (*to_sw_sig != 0);
100011ac:	0001883a 	nop
100011b0:	00801804 	movi	r2,96
100011b4:	10800003 	ldbu	r2,0(r2)
100011b8:	10803fcc 	andi	r2,r2,255
100011bc:	1080201c 	xori	r2,r2,128
100011c0:	10bfe004 	addi	r2,r2,-128
100011c4:	103ffa1e 	bne	r2,zero,100011b0 <__alt_data_end+0xf80011b0>
		while (*to_sw_sig != 0);
		// Transmit encrypted message to hardware side for decryption. 

		//TODO: Transmit key
		printf("\nTransmitting key...\n");
		for (i = 0; i < 16; i++) {
100011c8:	e0bfb117 	ldw	r2,-316(fp)
100011cc:	10800044 	addi	r2,r2,1
100011d0:	e0bfb115 	stw	r2,-316(fp)
100011d4:	e0bfb117 	ldw	r2,-316(fp)
100011d8:	10800410 	cmplti	r2,r2,16
100011dc:	103fdf1e 	bne	r2,zero,1000115c <__alt_data_end+0xf800115c>
			while (*to_sw_sig != 1);
			*to_hw_sig = 1;
			while (*to_sw_sig != 0);
		}

		printf("start\n\n");
100011e0:	01040074 	movhi	r4,4097
100011e4:	21019204 	addi	r4,r4,1608
100011e8:	000156c0 	call	1000156c <puts>
		int k;
		for (k = 0; k<100000; k++)
100011ec:	e03fb215 	stw	zero,-312(fp)
100011f0:	00003b06 	br	100012e0 <main+0x404>
		{
		*to_hw_sig=3;
100011f4:	00802004 	movi	r2,128
100011f8:	00c000c4 	movi	r3,3
100011fc:	10c00005 	stb	r3,0(r2)
		while (*to_sw_sig != 2);
10001200:	0001883a 	nop
10001204:	00801804 	movi	r2,96
10001208:	10800003 	ldbu	r2,0(r2)
1000120c:	10803fcc 	andi	r2,r2,255
10001210:	1080201c 	xori	r2,r2,128
10001214:	10bfe004 	addi	r2,r2,-128
10001218:	10800098 	cmpnei	r2,r2,2
1000121c:	103ff91e 	bne	r2,zero,10001204 <__alt_data_end+0xf8001204>

//		printf("\n\n");
//		printf("\nRetrieving message...\n");
		for (i = 0; i < 16; ++i)
10001220:	e03fb115 	stw	zero,-316(fp)
10001224:	00001f06 	br	100012a4 <main+0x3c8>
		{
			*to_hw_sig = 1;
10001228:	00802004 	movi	r2,128
1000122c:	00c00044 	movi	r3,1
10001230:	10c00005 	stb	r3,0(r2)
			while (*to_sw_sig != 1);
10001234:	0001883a 	nop
10001238:	00801804 	movi	r2,96
1000123c:	10800003 	ldbu	r2,0(r2)
10001240:	10803fcc 	andi	r2,r2,255
10001244:	1080201c 	xori	r2,r2,128
10001248:	10bfe004 	addi	r2,r2,-128
1000124c:	10800058 	cmpnei	r2,r2,1
10001250:	103ff91e 	bne	r2,zero,10001238 <__alt_data_end+0xf8001238>
			decoded[i] = *to_sw_port;
10001254:	00801c04 	movi	r2,112
10001258:	10800003 	ldbu	r2,0(r2)
1000125c:	1009883a 	mov	r4,r2
10001260:	e0ffc784 	addi	r3,fp,-226
10001264:	e0bfb117 	ldw	r2,-316(fp)
10001268:	1885883a 	add	r2,r3,r2
1000126c:	11000005 	stb	r4,0(r2)
			*to_hw_sig = 2;
10001270:	00802004 	movi	r2,128
10001274:	00c00084 	movi	r3,2
10001278:	10c00005 	stb	r3,0(r2)
			while (*to_sw_sig != 0);
1000127c:	0001883a 	nop
10001280:	00801804 	movi	r2,96
10001284:	10800003 	ldbu	r2,0(r2)
10001288:	10803fcc 	andi	r2,r2,255
1000128c:	1080201c 	xori	r2,r2,128
10001290:	10bfe004 	addi	r2,r2,-128
10001294:	103ffa1e 	bne	r2,zero,10001280 <__alt_data_end+0xf8001280>
		*to_hw_sig=3;
		while (*to_sw_sig != 2);

//		printf("\n\n");
//		printf("\nRetrieving message...\n");
		for (i = 0; i < 16; ++i)
10001298:	e0bfb117 	ldw	r2,-316(fp)
1000129c:	10800044 	addi	r2,r2,1
100012a0:	e0bfb115 	stw	r2,-316(fp)
100012a4:	e0bfb117 	ldw	r2,-316(fp)
100012a8:	10800410 	cmplti	r2,r2,16
100012ac:	103fde1e 	bne	r2,zero,10001228 <__alt_data_end+0xf8001228>
			while (*to_sw_sig != 1);
			decoded[i] = *to_sw_port;
			*to_hw_sig = 2;
			while (*to_sw_sig != 0);
		}
		*to_hw_sig=0;
100012b0:	00802004 	movi	r2,128
100012b4:	10000005 	stb	zero,0(r2)
		while (*to_sw_sig != 0);
100012b8:	0001883a 	nop
100012bc:	00801804 	movi	r2,96
100012c0:	10800003 	ldbu	r2,0(r2)
100012c4:	10803fcc 	andi	r2,r2,255
100012c8:	1080201c 	xori	r2,r2,128
100012cc:	10bfe004 	addi	r2,r2,-128
100012d0:	103ffa1e 	bne	r2,zero,100012bc <__alt_data_end+0xf80012bc>
			while (*to_sw_sig != 0);
		}

		printf("start\n\n");
		int k;
		for (k = 0; k<100000; k++)
100012d4:	e0bfb217 	ldw	r2,-312(fp)
100012d8:	10800044 	addi	r2,r2,1
100012dc:	e0bfb215 	stw	r2,-312(fp)
100012e0:	e0ffb217 	ldw	r3,-312(fp)
100012e4:	008000b4 	movhi	r2,2
100012e8:	10a1a7c4 	addi	r2,r2,-31073
100012ec:	10ffc10e 	bge	r2,r3,100011f4 <__alt_data_end+0xf80011f4>
//		for (i = 0; i < 16; i++)
	//	{
	//		printf("%x", decoded[i]);
	//	}
		}
		printf("done\n\n");
100012f0:	01040074 	movhi	r4,4097
100012f4:	21019404 	addi	r4,r4,1616
100012f8:	000156c0 	call	1000156c <puts>
//	}

	return 0;
100012fc:	0005883a 	mov	r2,zero
}
10001300:	e037883a 	mov	sp,fp
10001304:	dfc00117 	ldw	ra,4(sp)
10001308:	df000017 	ldw	fp,0(sp)
1000130c:	dec00204 	addi	sp,sp,8
10001310:	f800283a 	ret

10001314 <memcpy>:
10001314:	deffff04 	addi	sp,sp,-4
10001318:	dc000015 	stw	r16,0(sp)
1000131c:	00c003c4 	movi	r3,15
10001320:	2005883a 	mov	r2,r4
10001324:	1980432e 	bgeu	r3,r6,10001434 <memcpy+0x120>
10001328:	2146b03a 	or	r3,r4,r5
1000132c:	18c000cc 	andi	r3,r3,3
10001330:	1800421e 	bne	r3,zero,1000143c <memcpy+0x128>
10001334:	343ffc04 	addi	r16,r6,-16
10001338:	8020d13a 	srli	r16,r16,4
1000133c:	28c00104 	addi	r3,r5,4
10001340:	23400104 	addi	r13,r4,4
10001344:	801e913a 	slli	r15,r16,4
10001348:	2b000204 	addi	r12,r5,8
1000134c:	22c00204 	addi	r11,r4,8
10001350:	7bc00504 	addi	r15,r15,20
10001354:	2a800304 	addi	r10,r5,12
10001358:	22400304 	addi	r9,r4,12
1000135c:	2bdf883a 	add	r15,r5,r15
10001360:	2811883a 	mov	r8,r5
10001364:	200f883a 	mov	r7,r4
10001368:	41000017 	ldw	r4,0(r8)
1000136c:	39c00404 	addi	r7,r7,16
10001370:	18c00404 	addi	r3,r3,16
10001374:	393ffc15 	stw	r4,-16(r7)
10001378:	1bbffc17 	ldw	r14,-16(r3)
1000137c:	6b400404 	addi	r13,r13,16
10001380:	5ac00404 	addi	r11,r11,16
10001384:	6bbffc15 	stw	r14,-16(r13)
10001388:	63800017 	ldw	r14,0(r12)
1000138c:	4a400404 	addi	r9,r9,16
10001390:	42000404 	addi	r8,r8,16
10001394:	5bbffc15 	stw	r14,-16(r11)
10001398:	53800017 	ldw	r14,0(r10)
1000139c:	63000404 	addi	r12,r12,16
100013a0:	52800404 	addi	r10,r10,16
100013a4:	4bbffc15 	stw	r14,-16(r9)
100013a8:	1bffef1e 	bne	r3,r15,10001368 <__alt_data_end+0xf8001368>
100013ac:	81c00044 	addi	r7,r16,1
100013b0:	380e913a 	slli	r7,r7,4
100013b4:	310003cc 	andi	r4,r6,15
100013b8:	02c000c4 	movi	r11,3
100013bc:	11c7883a 	add	r3,r2,r7
100013c0:	29cb883a 	add	r5,r5,r7
100013c4:	59001f2e 	bgeu	r11,r4,10001444 <memcpy+0x130>
100013c8:	1813883a 	mov	r9,r3
100013cc:	2811883a 	mov	r8,r5
100013d0:	200f883a 	mov	r7,r4
100013d4:	42800017 	ldw	r10,0(r8)
100013d8:	4a400104 	addi	r9,r9,4
100013dc:	39ffff04 	addi	r7,r7,-4
100013e0:	4abfff15 	stw	r10,-4(r9)
100013e4:	42000104 	addi	r8,r8,4
100013e8:	59fffa36 	bltu	r11,r7,100013d4 <__alt_data_end+0xf80013d4>
100013ec:	213fff04 	addi	r4,r4,-4
100013f0:	2008d0ba 	srli	r4,r4,2
100013f4:	318000cc 	andi	r6,r6,3
100013f8:	21000044 	addi	r4,r4,1
100013fc:	2109883a 	add	r4,r4,r4
10001400:	2109883a 	add	r4,r4,r4
10001404:	1907883a 	add	r3,r3,r4
10001408:	290b883a 	add	r5,r5,r4
1000140c:	30000626 	beq	r6,zero,10001428 <memcpy+0x114>
10001410:	198d883a 	add	r6,r3,r6
10001414:	29c00003 	ldbu	r7,0(r5)
10001418:	18c00044 	addi	r3,r3,1
1000141c:	29400044 	addi	r5,r5,1
10001420:	19ffffc5 	stb	r7,-1(r3)
10001424:	19bffb1e 	bne	r3,r6,10001414 <__alt_data_end+0xf8001414>
10001428:	dc000017 	ldw	r16,0(sp)
1000142c:	dec00104 	addi	sp,sp,4
10001430:	f800283a 	ret
10001434:	2007883a 	mov	r3,r4
10001438:	003ff406 	br	1000140c <__alt_data_end+0xf800140c>
1000143c:	2007883a 	mov	r3,r4
10001440:	003ff306 	br	10001410 <__alt_data_end+0xf8001410>
10001444:	200d883a 	mov	r6,r4
10001448:	003ff006 	br	1000140c <__alt_data_end+0xf800140c>

1000144c <_printf_r>:
1000144c:	defffd04 	addi	sp,sp,-12
10001450:	dfc00015 	stw	ra,0(sp)
10001454:	d9800115 	stw	r6,4(sp)
10001458:	d9c00215 	stw	r7,8(sp)
1000145c:	280d883a 	mov	r6,r5
10001460:	21400217 	ldw	r5,8(r4)
10001464:	d9c00104 	addi	r7,sp,4
10001468:	00016180 	call	10001618 <___vfprintf_internal_r>
1000146c:	dfc00017 	ldw	ra,0(sp)
10001470:	dec00304 	addi	sp,sp,12
10001474:	f800283a 	ret

10001478 <printf>:
10001478:	defffc04 	addi	sp,sp,-16
1000147c:	dfc00015 	stw	ra,0(sp)
10001480:	d9400115 	stw	r5,4(sp)
10001484:	d9800215 	stw	r6,8(sp)
10001488:	d9c00315 	stw	r7,12(sp)
1000148c:	00840074 	movhi	r2,4097
10001490:	108a9904 	addi	r2,r2,10852
10001494:	10800017 	ldw	r2,0(r2)
10001498:	200b883a 	mov	r5,r4
1000149c:	d9800104 	addi	r6,sp,4
100014a0:	11000217 	ldw	r4,8(r2)
100014a4:	00037140 	call	10003714 <__vfprintf_internal>
100014a8:	dfc00017 	ldw	ra,0(sp)
100014ac:	dec00404 	addi	sp,sp,16
100014b0:	f800283a 	ret

100014b4 <_puts_r>:
100014b4:	defff604 	addi	sp,sp,-40
100014b8:	dc000715 	stw	r16,28(sp)
100014bc:	2021883a 	mov	r16,r4
100014c0:	2809883a 	mov	r4,r5
100014c4:	dc400815 	stw	r17,32(sp)
100014c8:	dfc00915 	stw	ra,36(sp)
100014cc:	2823883a 	mov	r17,r5
100014d0:	00015800 	call	10001580 <strlen>
100014d4:	00c40074 	movhi	r3,4097
100014d8:	18ca9904 	addi	r3,r3,10852
100014dc:	18c00017 	ldw	r3,0(r3)
100014e0:	11000044 	addi	r4,r2,1
100014e4:	d8800115 	stw	r2,4(sp)
100014e8:	18c00217 	ldw	r3,8(r3)
100014ec:	01440074 	movhi	r5,4097
100014f0:	29419e04 	addi	r5,r5,1656
100014f4:	1880030b 	ldhu	r2,12(r3)
100014f8:	d9400215 	stw	r5,8(sp)
100014fc:	d9000615 	stw	r4,24(sp)
10001500:	01400044 	movi	r5,1
10001504:	01000084 	movi	r4,2
10001508:	d9000515 	stw	r4,20(sp)
1000150c:	dc400015 	stw	r17,0(sp)
10001510:	d9400315 	stw	r5,12(sp)
10001514:	dec00415 	stw	sp,16(sp)
10001518:	1108000c 	andi	r4,r2,8192
1000151c:	2000061e 	bne	r4,zero,10001538 <_puts_r+0x84>
10001520:	19401917 	ldw	r5,100(r3)
10001524:	0137ffc4 	movi	r4,-8193
10001528:	10880014 	ori	r2,r2,8192
1000152c:	2908703a 	and	r4,r5,r4
10001530:	1880030d 	sth	r2,12(r3)
10001534:	19001915 	stw	r4,100(r3)
10001538:	81400217 	ldw	r5,8(r16)
1000153c:	8009883a 	mov	r4,r16
10001540:	d9800404 	addi	r6,sp,16
10001544:	0005bd80 	call	10005bd8 <__sfvwrite_r>
10001548:	1000061e 	bne	r2,zero,10001564 <_puts_r+0xb0>
1000154c:	00800284 	movi	r2,10
10001550:	dfc00917 	ldw	ra,36(sp)
10001554:	dc400817 	ldw	r17,32(sp)
10001558:	dc000717 	ldw	r16,28(sp)
1000155c:	dec00a04 	addi	sp,sp,40
10001560:	f800283a 	ret
10001564:	00bfffc4 	movi	r2,-1
10001568:	003ff906 	br	10001550 <__alt_data_end+0xf8001550>

1000156c <puts>:
1000156c:	00840074 	movhi	r2,4097
10001570:	108a9904 	addi	r2,r2,10852
10001574:	200b883a 	mov	r5,r4
10001578:	11000017 	ldw	r4,0(r2)
1000157c:	00014b41 	jmpi	100014b4 <_puts_r>

10001580 <strlen>:
10001580:	208000cc 	andi	r2,r4,3
10001584:	10002026 	beq	r2,zero,10001608 <strlen+0x88>
10001588:	20800007 	ldb	r2,0(r4)
1000158c:	10002026 	beq	r2,zero,10001610 <strlen+0x90>
10001590:	2005883a 	mov	r2,r4
10001594:	00000206 	br	100015a0 <strlen+0x20>
10001598:	10c00007 	ldb	r3,0(r2)
1000159c:	18001826 	beq	r3,zero,10001600 <strlen+0x80>
100015a0:	10800044 	addi	r2,r2,1
100015a4:	10c000cc 	andi	r3,r2,3
100015a8:	183ffb1e 	bne	r3,zero,10001598 <__alt_data_end+0xf8001598>
100015ac:	10c00017 	ldw	r3,0(r2)
100015b0:	01ffbff4 	movhi	r7,65279
100015b4:	39ffbfc4 	addi	r7,r7,-257
100015b8:	00ca303a 	nor	r5,zero,r3
100015bc:	01a02074 	movhi	r6,32897
100015c0:	19c7883a 	add	r3,r3,r7
100015c4:	31a02004 	addi	r6,r6,-32640
100015c8:	1946703a 	and	r3,r3,r5
100015cc:	1986703a 	and	r3,r3,r6
100015d0:	1800091e 	bne	r3,zero,100015f8 <strlen+0x78>
100015d4:	10800104 	addi	r2,r2,4
100015d8:	10c00017 	ldw	r3,0(r2)
100015dc:	19cb883a 	add	r5,r3,r7
100015e0:	00c6303a 	nor	r3,zero,r3
100015e4:	28c6703a 	and	r3,r5,r3
100015e8:	1986703a 	and	r3,r3,r6
100015ec:	183ff926 	beq	r3,zero,100015d4 <__alt_data_end+0xf80015d4>
100015f0:	00000106 	br	100015f8 <strlen+0x78>
100015f4:	10800044 	addi	r2,r2,1
100015f8:	10c00007 	ldb	r3,0(r2)
100015fc:	183ffd1e 	bne	r3,zero,100015f4 <__alt_data_end+0xf80015f4>
10001600:	1105c83a 	sub	r2,r2,r4
10001604:	f800283a 	ret
10001608:	2005883a 	mov	r2,r4
1000160c:	003fe706 	br	100015ac <__alt_data_end+0xf80015ac>
10001610:	0005883a 	mov	r2,zero
10001614:	f800283a 	ret

10001618 <___vfprintf_internal_r>:
10001618:	defeb604 	addi	sp,sp,-1320
1000161c:	dfc14915 	stw	ra,1316(sp)
10001620:	ddc14715 	stw	r23,1308(sp)
10001624:	dd814615 	stw	r22,1304(sp)
10001628:	202f883a 	mov	r23,r4
1000162c:	282d883a 	mov	r22,r5
10001630:	d9812a15 	stw	r6,1192(sp)
10001634:	d9c12d15 	stw	r7,1204(sp)
10001638:	df014815 	stw	fp,1312(sp)
1000163c:	dd414515 	stw	r21,1300(sp)
10001640:	dd014415 	stw	r20,1296(sp)
10001644:	dcc14315 	stw	r19,1292(sp)
10001648:	dc814215 	stw	r18,1288(sp)
1000164c:	dc414115 	stw	r17,1284(sp)
10001650:	dc014015 	stw	r16,1280(sp)
10001654:	00062980 	call	10006298 <_localeconv_r>
10001658:	10800017 	ldw	r2,0(r2)
1000165c:	1009883a 	mov	r4,r2
10001660:	d8813515 	stw	r2,1236(sp)
10001664:	00015800 	call	10001580 <strlen>
10001668:	d8813815 	stw	r2,1248(sp)
1000166c:	b8000226 	beq	r23,zero,10001678 <___vfprintf_internal_r+0x60>
10001670:	b8800e17 	ldw	r2,56(r23)
10001674:	10010526 	beq	r2,zero,10001a8c <___vfprintf_internal_r+0x474>
10001678:	b0c0030b 	ldhu	r3,12(r22)
1000167c:	1908000c 	andi	r4,r3,8192
10001680:	1805883a 	mov	r2,r3
10001684:	2000071e 	bne	r4,zero,100016a4 <___vfprintf_internal_r+0x8c>
10001688:	b1001917 	ldw	r4,100(r22)
1000168c:	18880014 	ori	r2,r3,8192
10001690:	00f7ffc4 	movi	r3,-8193
10001694:	20c8703a 	and	r4,r4,r3
10001698:	b080030d 	sth	r2,12(r22)
1000169c:	1007883a 	mov	r3,r2
100016a0:	b1001915 	stw	r4,100(r22)
100016a4:	1100020c 	andi	r4,r2,8
100016a8:	2000a826 	beq	r4,zero,1000194c <___vfprintf_internal_r+0x334>
100016ac:	b1000417 	ldw	r4,16(r22)
100016b0:	2000a626 	beq	r4,zero,1000194c <___vfprintf_internal_r+0x334>
100016b4:	1080068c 	andi	r2,r2,26
100016b8:	01000284 	movi	r4,10
100016bc:	1100ac26 	beq	r2,r4,10001970 <___vfprintf_internal_r+0x358>
100016c0:	d8c10e04 	addi	r3,sp,1080
100016c4:	d9010dc4 	addi	r4,sp,1079
100016c8:	d9400404 	addi	r5,sp,16
100016cc:	05040074 	movhi	r20,4097
100016d0:	1905c83a 	sub	r2,r3,r4
100016d4:	a501af84 	addi	r20,r20,1726
100016d8:	d8c12815 	stw	r3,1184(sp)
100016dc:	d9012915 	stw	r4,1188(sp)
100016e0:	d9411e15 	stw	r5,1144(sp)
100016e4:	d8012015 	stw	zero,1152(sp)
100016e8:	d8011f15 	stw	zero,1148(sp)
100016ec:	d8013315 	stw	zero,1228(sp)
100016f0:	d8013715 	stw	zero,1244(sp)
100016f4:	d8013915 	stw	zero,1252(sp)
100016f8:	d8013b15 	stw	zero,1260(sp)
100016fc:	d8013a15 	stw	zero,1256(sp)
10001700:	d8012f15 	stw	zero,1212(sp)
10001704:	2811883a 	mov	r8,r5
10001708:	d8813c15 	stw	r2,1264(sp)
1000170c:	d8c12a17 	ldw	r3,1192(sp)
10001710:	18800007 	ldb	r2,0(r3)
10001714:	10021326 	beq	r2,zero,10001f64 <___vfprintf_internal_r+0x94c>
10001718:	00c00944 	movi	r3,37
1000171c:	dc012a17 	ldw	r16,1192(sp)
10001720:	10c0021e 	bne	r2,r3,1000172c <___vfprintf_internal_r+0x114>
10001724:	00001606 	br	10001780 <___vfprintf_internal_r+0x168>
10001728:	10c08526 	beq	r2,r3,10001940 <___vfprintf_internal_r+0x328>
1000172c:	84000044 	addi	r16,r16,1
10001730:	80800007 	ldb	r2,0(r16)
10001734:	103ffc1e 	bne	r2,zero,10001728 <__alt_data_end+0xf8001728>
10001738:	d9012a17 	ldw	r4,1192(sp)
1000173c:	8123c83a 	sub	r17,r16,r4
10001740:	88000f26 	beq	r17,zero,10001780 <___vfprintf_internal_r+0x168>
10001744:	d8812a17 	ldw	r2,1192(sp)
10001748:	d8c12017 	ldw	r3,1152(sp)
1000174c:	44400115 	stw	r17,4(r8)
10001750:	40800015 	stw	r2,0(r8)
10001754:	d8811f17 	ldw	r2,1148(sp)
10001758:	1c47883a 	add	r3,r3,r17
1000175c:	d8c12015 	stw	r3,1152(sp)
10001760:	10800044 	addi	r2,r2,1
10001764:	d8811f15 	stw	r2,1148(sp)
10001768:	00c001c4 	movi	r3,7
1000176c:	1880b516 	blt	r3,r2,10001a44 <___vfprintf_internal_r+0x42c>
10001770:	42000204 	addi	r8,r8,8
10001774:	d8c12f17 	ldw	r3,1212(sp)
10001778:	1c47883a 	add	r3,r3,r17
1000177c:	d8c12f15 	stw	r3,1212(sp)
10001780:	80800007 	ldb	r2,0(r16)
10001784:	1000b626 	beq	r2,zero,10001a60 <___vfprintf_internal_r+0x448>
10001788:	80800044 	addi	r2,r16,1
1000178c:	84000047 	ldb	r16,1(r16)
10001790:	0027883a 	mov	r19,zero
10001794:	0039883a 	mov	fp,zero
10001798:	dcc12b05 	stb	r19,1196(sp)
1000179c:	d8012785 	stb	zero,1182(sp)
100017a0:	027fffc4 	movi	r9,-1
100017a4:	d8012e15 	stw	zero,1208(sp)
100017a8:	04401604 	movi	r17,88
100017ac:	04800244 	movi	r18,9
100017b0:	da012a15 	stw	r8,1192(sp)
100017b4:	e027883a 	mov	r19,fp
100017b8:	17000044 	addi	fp,r2,1
100017bc:	80bff804 	addi	r2,r16,-32
100017c0:	88831236 	bltu	r17,r2,1000240c <___vfprintf_internal_r+0xdf4>
100017c4:	100490ba 	slli	r2,r2,2
100017c8:	01040034 	movhi	r4,4096
100017cc:	2105f704 	addi	r4,r4,6108
100017d0:	1105883a 	add	r2,r2,r4
100017d4:	10800017 	ldw	r2,0(r2)
100017d8:	1000683a 	jmp	r2
100017dc:	10002328 	cmpgeui	zero,r2,140
100017e0:	1000240c 	andi	zero,r2,144
100017e4:	1000240c 	andi	zero,r2,144
100017e8:	10002344 	addi	zero,r2,141
100017ec:	1000240c 	andi	zero,r2,144
100017f0:	1000240c 	andi	zero,r2,144
100017f4:	1000240c 	andi	zero,r2,144
100017f8:	1000240c 	andi	zero,r2,144
100017fc:	1000240c 	andi	zero,r2,144
10001800:	1000240c 	andi	zero,r2,144
10001804:	10002354 	ori	zero,r2,141
10001808:	1000237c 	xorhi	zero,r2,141
1000180c:	1000240c 	andi	zero,r2,144
10001810:	10001a98 	cmpnei	zero,r2,106
10001814:	10001aa8 	cmpgeui	zero,r2,106
10001818:	1000240c 	andi	zero,r2,144
1000181c:	10001af8 	rdprs	zero,r2,107
10001820:	10001b08 	cmpgei	zero,r2,108
10001824:	10001b08 	cmpgei	zero,r2,108
10001828:	10001b08 	cmpgei	zero,r2,108
1000182c:	10001b08 	cmpgei	zero,r2,108
10001830:	10001b08 	cmpgei	zero,r2,108
10001834:	10001b08 	cmpgei	zero,r2,108
10001838:	10001b08 	cmpgei	zero,r2,108
1000183c:	10001b08 	cmpgei	zero,r2,108
10001840:	10001b08 	cmpgei	zero,r2,108
10001844:	1000240c 	andi	zero,r2,144
10001848:	1000240c 	andi	zero,r2,144
1000184c:	1000240c 	andi	zero,r2,144
10001850:	1000240c 	andi	zero,r2,144
10001854:	1000240c 	andi	zero,r2,144
10001858:	1000240c 	andi	zero,r2,144
1000185c:	1000240c 	andi	zero,r2,144
10001860:	1000240c 	andi	zero,r2,144
10001864:	1000240c 	andi	zero,r2,144
10001868:	1000240c 	andi	zero,r2,144
1000186c:	10001b4c 	andi	zero,r2,109
10001870:	10001f6c 	andhi	zero,r2,125
10001874:	1000240c 	andi	zero,r2,144
10001878:	10001f6c 	andhi	zero,r2,125
1000187c:	1000240c 	andi	zero,r2,144
10001880:	1000240c 	andi	zero,r2,144
10001884:	1000240c 	andi	zero,r2,144
10001888:	1000240c 	andi	zero,r2,144
1000188c:	10002014 	ori	zero,r2,128
10001890:	1000240c 	andi	zero,r2,144
10001894:	1000240c 	andi	zero,r2,144
10001898:	10002024 	muli	zero,r2,128
1000189c:	1000240c 	andi	zero,r2,144
100018a0:	1000240c 	andi	zero,r2,144
100018a4:	1000240c 	andi	zero,r2,144
100018a8:	1000240c 	andi	zero,r2,144
100018ac:	1000240c 	andi	zero,r2,144
100018b0:	10002068 	cmpgeui	zero,r2,129
100018b4:	1000240c 	andi	zero,r2,144
100018b8:	1000240c 	andi	zero,r2,144
100018bc:	100020a0 	cmpeqi	zero,r2,130
100018c0:	1000240c 	andi	zero,r2,144
100018c4:	1000240c 	andi	zero,r2,144
100018c8:	1000240c 	andi	zero,r2,144
100018cc:	1000240c 	andi	zero,r2,144
100018d0:	1000240c 	andi	zero,r2,144
100018d4:	1000240c 	andi	zero,r2,144
100018d8:	1000240c 	andi	zero,r2,144
100018dc:	1000240c 	andi	zero,r2,144
100018e0:	1000240c 	andi	zero,r2,144
100018e4:	1000240c 	andi	zero,r2,144
100018e8:	100022dc 	xori	zero,r2,139
100018ec:	10002288 	cmpgei	zero,r2,138
100018f0:	10001f6c 	andhi	zero,r2,125
100018f4:	10001f6c 	andhi	zero,r2,125
100018f8:	10001f6c 	andhi	zero,r2,125
100018fc:	100022cc 	andi	zero,r2,139
10001900:	10002288 	cmpgei	zero,r2,138
10001904:	1000240c 	andi	zero,r2,144
10001908:	1000240c 	andi	zero,r2,144
1000190c:	100021a4 	muli	zero,r2,134
10001910:	1000240c 	andi	zero,r2,144
10001914:	100021bc 	xorhi	zero,r2,134
10001918:	100021fc 	xorhi	zero,r2,135
1000191c:	1000223c 	xorhi	zero,r2,136
10001920:	10002108 	cmpgei	zero,r2,132
10001924:	1000240c 	andi	zero,r2,144
10001928:	10002390 	cmplti	zero,r2,142
1000192c:	1000240c 	andi	zero,r2,144
10001930:	10002118 	cmpnei	zero,r2,132
10001934:	1000240c 	andi	zero,r2,144
10001938:	1000240c 	andi	zero,r2,144
1000193c:	10002158 	cmpnei	zero,r2,133
10001940:	d9412a17 	ldw	r5,1192(sp)
10001944:	8163c83a 	sub	r17,r16,r5
10001948:	003f7d06 	br	10001740 <__alt_data_end+0xf8001740>
1000194c:	b809883a 	mov	r4,r23
10001950:	b00b883a 	mov	r5,r22
10001954:	00037380 	call	10003738 <__swsetup_r>
10001958:	10002d1e 	bne	r2,zero,10001a10 <___vfprintf_internal_r+0x3f8>
1000195c:	b0c0030b 	ldhu	r3,12(r22)
10001960:	01000284 	movi	r4,10
10001964:	1805883a 	mov	r2,r3
10001968:	1080068c 	andi	r2,r2,26
1000196c:	113f541e 	bne	r2,r4,100016c0 <__alt_data_end+0xf80016c0>
10001970:	b080038b 	ldhu	r2,14(r22)
10001974:	113fffcc 	andi	r4,r2,65535
10001978:	2120001c 	xori	r4,r4,32768
1000197c:	21200004 	addi	r4,r4,-32768
10001980:	203f4f16 	blt	r4,zero,100016c0 <__alt_data_end+0xf80016c0>
10001984:	b2c01917 	ldw	r11,100(r22)
10001988:	b2800717 	ldw	r10,28(r22)
1000198c:	b2400917 	ldw	r9,36(r22)
10001990:	d9812a17 	ldw	r6,1192(sp)
10001994:	d9c12d17 	ldw	r7,1204(sp)
10001998:	02010004 	movi	r8,1024
1000199c:	18ffff4c 	andi	r3,r3,65533
100019a0:	d881078d 	sth	r2,1054(sp)
100019a4:	b809883a 	mov	r4,r23
100019a8:	d8800404 	addi	r2,sp,16
100019ac:	d9410404 	addi	r5,sp,1040
100019b0:	d8c1070d 	sth	r3,1052(sp)
100019b4:	dac11d15 	stw	r11,1140(sp)
100019b8:	da810b15 	stw	r10,1068(sp)
100019bc:	da410d15 	stw	r9,1076(sp)
100019c0:	d8810415 	stw	r2,1040(sp)
100019c4:	d8810815 	stw	r2,1056(sp)
100019c8:	da010615 	stw	r8,1048(sp)
100019cc:	da010915 	stw	r8,1060(sp)
100019d0:	d8010a15 	stw	zero,1064(sp)
100019d4:	00016180 	call	10001618 <___vfprintf_internal_r>
100019d8:	1021883a 	mov	r16,r2
100019dc:	10000416 	blt	r2,zero,100019f0 <___vfprintf_internal_r+0x3d8>
100019e0:	b809883a 	mov	r4,r23
100019e4:	d9410404 	addi	r5,sp,1040
100019e8:	00051b80 	call	100051b8 <_fflush_r>
100019ec:	1007301e 	bne	r2,zero,100036b0 <___vfprintf_internal_r+0x2098>
100019f0:	d881070b 	ldhu	r2,1052(sp)
100019f4:	1080100c 	andi	r2,r2,64
100019f8:	10000326 	beq	r2,zero,10001a08 <___vfprintf_internal_r+0x3f0>
100019fc:	b080030b 	ldhu	r2,12(r22)
10001a00:	10801014 	ori	r2,r2,64
10001a04:	b080030d 	sth	r2,12(r22)
10001a08:	8005883a 	mov	r2,r16
10001a0c:	00000106 	br	10001a14 <___vfprintf_internal_r+0x3fc>
10001a10:	00bfffc4 	movi	r2,-1
10001a14:	dfc14917 	ldw	ra,1316(sp)
10001a18:	df014817 	ldw	fp,1312(sp)
10001a1c:	ddc14717 	ldw	r23,1308(sp)
10001a20:	dd814617 	ldw	r22,1304(sp)
10001a24:	dd414517 	ldw	r21,1300(sp)
10001a28:	dd014417 	ldw	r20,1296(sp)
10001a2c:	dcc14317 	ldw	r19,1292(sp)
10001a30:	dc814217 	ldw	r18,1288(sp)
10001a34:	dc414117 	ldw	r17,1284(sp)
10001a38:	dc014017 	ldw	r16,1280(sp)
10001a3c:	dec14a04 	addi	sp,sp,1320
10001a40:	f800283a 	ret
10001a44:	b809883a 	mov	r4,r23
10001a48:	b00b883a 	mov	r5,r22
10001a4c:	d9811e04 	addi	r6,sp,1144
10001a50:	00089200 	call	10008920 <__sprint_r>
10001a54:	1000081e 	bne	r2,zero,10001a78 <___vfprintf_internal_r+0x460>
10001a58:	da000404 	addi	r8,sp,16
10001a5c:	003f4506 	br	10001774 <__alt_data_end+0xf8001774>
10001a60:	d8812017 	ldw	r2,1152(sp)
10001a64:	10000426 	beq	r2,zero,10001a78 <___vfprintf_internal_r+0x460>
10001a68:	b809883a 	mov	r4,r23
10001a6c:	b00b883a 	mov	r5,r22
10001a70:	d9811e04 	addi	r6,sp,1144
10001a74:	00089200 	call	10008920 <__sprint_r>
10001a78:	b080030b 	ldhu	r2,12(r22)
10001a7c:	1080100c 	andi	r2,r2,64
10001a80:	103fe31e 	bne	r2,zero,10001a10 <__alt_data_end+0xf8001a10>
10001a84:	d8812f17 	ldw	r2,1212(sp)
10001a88:	003fe206 	br	10001a14 <__alt_data_end+0xf8001a14>
10001a8c:	b809883a 	mov	r4,r23
10001a90:	00057740 	call	10005774 <__sinit>
10001a94:	003ef806 	br	10001678 <__alt_data_end+0xf8001678>
10001a98:	e005883a 	mov	r2,fp
10001a9c:	9cc00114 	ori	r19,r19,4
10001aa0:	e4000007 	ldb	r16,0(fp)
10001aa4:	003f4406 	br	100017b8 <__alt_data_end+0xf80017b8>
10001aa8:	e4000007 	ldb	r16,0(fp)
10001aac:	01000a84 	movi	r4,42
10001ab0:	e0800044 	addi	r2,fp,1
10001ab4:	8106f626 	beq	r16,r4,10003690 <___vfprintf_internal_r+0x2078>
10001ab8:	857ff404 	addi	r21,r16,-48
10001abc:	1039883a 	mov	fp,r2
10001ac0:	0013883a 	mov	r9,zero
10001ac4:	957f3d36 	bltu	r18,r21,100017bc <__alt_data_end+0xf80017bc>
10001ac8:	0009883a 	mov	r4,zero
10001acc:	01400284 	movi	r5,10
10001ad0:	000b4540 	call	1000b454 <__mulsi3>
10001ad4:	e4000007 	ldb	r16,0(fp)
10001ad8:	a889883a 	add	r4,r21,r2
10001adc:	e7000044 	addi	fp,fp,1
10001ae0:	857ff404 	addi	r21,r16,-48
10001ae4:	957ff92e 	bgeu	r18,r21,10001acc <__alt_data_end+0xf8001acc>
10001ae8:	2013883a 	mov	r9,r4
10001aec:	203f330e 	bge	r4,zero,100017bc <__alt_data_end+0xf80017bc>
10001af0:	027fffc4 	movi	r9,-1
10001af4:	003f3106 	br	100017bc <__alt_data_end+0xf80017bc>
10001af8:	9cc02014 	ori	r19,r19,128
10001afc:	e005883a 	mov	r2,fp
10001b00:	e4000007 	ldb	r16,0(fp)
10001b04:	003f2c06 	br	100017b8 <__alt_data_end+0xf80017b8>
10001b08:	857ff404 	addi	r21,r16,-48
10001b0c:	d8012e15 	stw	zero,1208(sp)
10001b10:	e021883a 	mov	r16,fp
10001b14:	0009883a 	mov	r4,zero
10001b18:	da412c15 	stw	r9,1200(sp)
10001b1c:	01400284 	movi	r5,10
10001b20:	000b4540 	call	1000b454 <__mulsi3>
10001b24:	81400007 	ldb	r5,0(r16)
10001b28:	1549883a 	add	r4,r2,r21
10001b2c:	e7000044 	addi	fp,fp,1
10001b30:	2d7ff404 	addi	r21,r5,-48
10001b34:	e021883a 	mov	r16,fp
10001b38:	957ff82e 	bgeu	r18,r21,10001b1c <__alt_data_end+0xf8001b1c>
10001b3c:	2821883a 	mov	r16,r5
10001b40:	d9012e15 	stw	r4,1208(sp)
10001b44:	da412c17 	ldw	r9,1200(sp)
10001b48:	003f1c06 	br	100017bc <__alt_data_end+0xf80017bc>
10001b4c:	da012a17 	ldw	r8,1192(sp)
10001b50:	df012a15 	stw	fp,1192(sp)
10001b54:	9839883a 	mov	fp,r19
10001b58:	dcc12b03 	ldbu	r19,1196(sp)
10001b5c:	e7000414 	ori	fp,fp,16
10001b60:	e080080c 	andi	r2,fp,32
10001b64:	dcc12785 	stb	r19,1182(sp)
10001b68:	d8c12d17 	ldw	r3,1204(sp)
10001b6c:	1001ce26 	beq	r2,zero,100022a8 <___vfprintf_internal_r+0xc90>
10001b70:	d9012d17 	ldw	r4,1204(sp)
10001b74:	18800117 	ldw	r2,4(r3)
10001b78:	1c800017 	ldw	r18,0(r3)
10001b7c:	21000204 	addi	r4,r4,8
10001b80:	d9012d15 	stw	r4,1204(sp)
10001b84:	102b883a 	mov	r21,r2
10001b88:	10044916 	blt	r2,zero,10002cb0 <___vfprintf_internal_r+0x1698>
10001b8c:	dcc12783 	ldbu	r19,1182(sp)
10001b90:	da413215 	stw	r9,1224(sp)
10001b94:	00800044 	movi	r2,1
10001b98:	9546b03a 	or	r3,r18,r21
10001b9c:	48000216 	blt	r9,zero,10001ba8 <___vfprintf_internal_r+0x590>
10001ba0:	013fdfc4 	movi	r4,-129
10001ba4:	e138703a 	and	fp,fp,r4
10001ba8:	1802251e 	bne	r3,zero,10002440 <___vfprintf_internal_r+0xe28>
10001bac:	48031726 	beq	r9,zero,1000280c <___vfprintf_internal_r+0x11f4>
10001bb0:	10803fcc 	andi	r2,r2,255
10001bb4:	00c00044 	movi	r3,1
10001bb8:	10c24526 	beq	r2,r3,100024d0 <___vfprintf_internal_r+0xeb8>
10001bbc:	00c00084 	movi	r3,2
10001bc0:	10c33426 	beq	r2,r3,10002894 <___vfprintf_internal_r+0x127c>
10001bc4:	d8c10e04 	addi	r3,sp,1080
10001bc8:	9008d0fa 	srli	r4,r18,3
10001bcc:	a80a977a 	slli	r5,r21,29
10001bd0:	a82ad0fa 	srli	r21,r21,3
10001bd4:	948001cc 	andi	r18,r18,7
10001bd8:	90800c04 	addi	r2,r18,48
10001bdc:	18ffffc4 	addi	r3,r3,-1
10001be0:	2924b03a 	or	r18,r5,r4
10001be4:	18800005 	stb	r2,0(r3)
10001be8:	9548b03a 	or	r4,r18,r21
10001bec:	203ff61e 	bne	r4,zero,10001bc8 <__alt_data_end+0xf8001bc8>
10001bf0:	e100004c 	andi	r4,fp,1
10001bf4:	d8c13115 	stw	r3,1220(sp)
10001bf8:	20039a1e 	bne	r4,zero,10002a64 <___vfprintf_internal_r+0x144c>
10001bfc:	d8812817 	ldw	r2,1184(sp)
10001c00:	10e3c83a 	sub	r17,r2,r3
10001c04:	8805883a 	mov	r2,r17
10001c08:	8a40010e 	bge	r17,r9,10001c10 <___vfprintf_internal_r+0x5f8>
10001c0c:	4805883a 	mov	r2,r9
10001c10:	d8812b15 	stw	r2,1196(sp)
10001c14:	d8013415 	stw	zero,1232(sp)
10001c18:	98803fcc 	andi	r2,r19,255
10001c1c:	1080201c 	xori	r2,r2,128
10001c20:	10bfe004 	addi	r2,r2,-128
10001c24:	10000326 	beq	r2,zero,10001c34 <___vfprintf_internal_r+0x61c>
10001c28:	d8c12b17 	ldw	r3,1196(sp)
10001c2c:	18c00044 	addi	r3,r3,1
10001c30:	d8c12b15 	stw	r3,1196(sp)
10001c34:	e0c0008c 	andi	r3,fp,2
10001c38:	d8c12c15 	stw	r3,1200(sp)
10001c3c:	18000326 	beq	r3,zero,10001c4c <___vfprintf_internal_r+0x634>
10001c40:	d8c12b17 	ldw	r3,1196(sp)
10001c44:	18c00084 	addi	r3,r3,2
10001c48:	d8c12b15 	stw	r3,1196(sp)
10001c4c:	e0c0210c 	andi	r3,fp,132
10001c50:	d8c13015 	stw	r3,1216(sp)
10001c54:	1801f81e 	bne	r3,zero,10002438 <___vfprintf_internal_r+0xe20>
10001c58:	d9012e17 	ldw	r4,1208(sp)
10001c5c:	d8c12b17 	ldw	r3,1196(sp)
10001c60:	20ebc83a 	sub	r21,r4,r3
10001c64:	0541f40e 	bge	zero,r21,10002438 <___vfprintf_internal_r+0xe20>
10001c68:	02400404 	movi	r9,16
10001c6c:	d8c12017 	ldw	r3,1152(sp)
10001c70:	d8811f17 	ldw	r2,1148(sp)
10001c74:	4d45750e 	bge	r9,r21,1000324c <___vfprintf_internal_r+0x1c34>
10001c78:	01440074 	movhi	r5,4097
10001c7c:	2941b384 	addi	r5,r5,1742
10001c80:	d9413615 	stw	r5,1240(sp)
10001c84:	4827883a 	mov	r19,r9
10001c88:	048001c4 	movi	r18,7
10001c8c:	00000306 	br	10001c9c <___vfprintf_internal_r+0x684>
10001c90:	ad7ffc04 	addi	r21,r21,-16
10001c94:	42000204 	addi	r8,r8,8
10001c98:	9d40130e 	bge	r19,r21,10001ce8 <___vfprintf_internal_r+0x6d0>
10001c9c:	01040074 	movhi	r4,4097
10001ca0:	18c00404 	addi	r3,r3,16
10001ca4:	10800044 	addi	r2,r2,1
10001ca8:	2101b384 	addi	r4,r4,1742
10001cac:	41000015 	stw	r4,0(r8)
10001cb0:	44c00115 	stw	r19,4(r8)
10001cb4:	d8c12015 	stw	r3,1152(sp)
10001cb8:	d8811f15 	stw	r2,1148(sp)
10001cbc:	90bff40e 	bge	r18,r2,10001c90 <__alt_data_end+0xf8001c90>
10001cc0:	b809883a 	mov	r4,r23
10001cc4:	b00b883a 	mov	r5,r22
10001cc8:	d9811e04 	addi	r6,sp,1144
10001ccc:	00089200 	call	10008920 <__sprint_r>
10001cd0:	103f691e 	bne	r2,zero,10001a78 <__alt_data_end+0xf8001a78>
10001cd4:	ad7ffc04 	addi	r21,r21,-16
10001cd8:	d8c12017 	ldw	r3,1152(sp)
10001cdc:	d8811f17 	ldw	r2,1148(sp)
10001ce0:	da000404 	addi	r8,sp,16
10001ce4:	9d7fed16 	blt	r19,r21,10001c9c <__alt_data_end+0xf8001c9c>
10001ce8:	d9413617 	ldw	r5,1240(sp)
10001cec:	a8c7883a 	add	r3,r21,r3
10001cf0:	10800044 	addi	r2,r2,1
10001cf4:	41400015 	stw	r5,0(r8)
10001cf8:	45400115 	stw	r21,4(r8)
10001cfc:	d8c12015 	stw	r3,1152(sp)
10001d00:	d8811f15 	stw	r2,1148(sp)
10001d04:	010001c4 	movi	r4,7
10001d08:	20832b16 	blt	r4,r2,100029b8 <___vfprintf_internal_r+0x13a0>
10001d0c:	d8812787 	ldb	r2,1182(sp)
10001d10:	42000204 	addi	r8,r8,8
10001d14:	10000c26 	beq	r2,zero,10001d48 <___vfprintf_internal_r+0x730>
10001d18:	d8811f17 	ldw	r2,1148(sp)
10001d1c:	d9012784 	addi	r4,sp,1182
10001d20:	18c00044 	addi	r3,r3,1
10001d24:	10800044 	addi	r2,r2,1
10001d28:	41000015 	stw	r4,0(r8)
10001d2c:	01000044 	movi	r4,1
10001d30:	41000115 	stw	r4,4(r8)
10001d34:	d8c12015 	stw	r3,1152(sp)
10001d38:	d8811f15 	stw	r2,1148(sp)
10001d3c:	010001c4 	movi	r4,7
10001d40:	2082c416 	blt	r4,r2,10002854 <___vfprintf_internal_r+0x123c>
10001d44:	42000204 	addi	r8,r8,8
10001d48:	d8812c17 	ldw	r2,1200(sp)
10001d4c:	10000c26 	beq	r2,zero,10001d80 <___vfprintf_internal_r+0x768>
10001d50:	d8811f17 	ldw	r2,1148(sp)
10001d54:	d9012704 	addi	r4,sp,1180
10001d58:	18c00084 	addi	r3,r3,2
10001d5c:	10800044 	addi	r2,r2,1
10001d60:	41000015 	stw	r4,0(r8)
10001d64:	01000084 	movi	r4,2
10001d68:	41000115 	stw	r4,4(r8)
10001d6c:	d8c12015 	stw	r3,1152(sp)
10001d70:	d8811f15 	stw	r2,1148(sp)
10001d74:	010001c4 	movi	r4,7
10001d78:	2082be16 	blt	r4,r2,10002874 <___vfprintf_internal_r+0x125c>
10001d7c:	42000204 	addi	r8,r8,8
10001d80:	d9013017 	ldw	r4,1216(sp)
10001d84:	00802004 	movi	r2,128
10001d88:	20822026 	beq	r4,r2,1000260c <___vfprintf_internal_r+0xff4>
10001d8c:	d9413217 	ldw	r5,1224(sp)
10001d90:	2c67c83a 	sub	r19,r5,r17
10001d94:	04c0260e 	bge	zero,r19,10001e30 <___vfprintf_internal_r+0x818>
10001d98:	05400404 	movi	r21,16
10001d9c:	d8811f17 	ldw	r2,1148(sp)
10001da0:	acc4720e 	bge	r21,r19,10002f6c <___vfprintf_internal_r+0x1954>
10001da4:	01440074 	movhi	r5,4097
10001da8:	2941af84 	addi	r5,r5,1726
10001dac:	d9412c15 	stw	r5,1200(sp)
10001db0:	048001c4 	movi	r18,7
10001db4:	00000306 	br	10001dc4 <___vfprintf_internal_r+0x7ac>
10001db8:	9cfffc04 	addi	r19,r19,-16
10001dbc:	42000204 	addi	r8,r8,8
10001dc0:	acc0110e 	bge	r21,r19,10001e08 <___vfprintf_internal_r+0x7f0>
10001dc4:	18c00404 	addi	r3,r3,16
10001dc8:	10800044 	addi	r2,r2,1
10001dcc:	45000015 	stw	r20,0(r8)
10001dd0:	45400115 	stw	r21,4(r8)
10001dd4:	d8c12015 	stw	r3,1152(sp)
10001dd8:	d8811f15 	stw	r2,1148(sp)
10001ddc:	90bff60e 	bge	r18,r2,10001db8 <__alt_data_end+0xf8001db8>
10001de0:	b809883a 	mov	r4,r23
10001de4:	b00b883a 	mov	r5,r22
10001de8:	d9811e04 	addi	r6,sp,1144
10001dec:	00089200 	call	10008920 <__sprint_r>
10001df0:	103f211e 	bne	r2,zero,10001a78 <__alt_data_end+0xf8001a78>
10001df4:	9cfffc04 	addi	r19,r19,-16
10001df8:	d8c12017 	ldw	r3,1152(sp)
10001dfc:	d8811f17 	ldw	r2,1148(sp)
10001e00:	da000404 	addi	r8,sp,16
10001e04:	acffef16 	blt	r21,r19,10001dc4 <__alt_data_end+0xf8001dc4>
10001e08:	d9012c17 	ldw	r4,1200(sp)
10001e0c:	1cc7883a 	add	r3,r3,r19
10001e10:	10800044 	addi	r2,r2,1
10001e14:	41000015 	stw	r4,0(r8)
10001e18:	44c00115 	stw	r19,4(r8)
10001e1c:	d8c12015 	stw	r3,1152(sp)
10001e20:	d8811f15 	stw	r2,1148(sp)
10001e24:	010001c4 	movi	r4,7
10001e28:	20828216 	blt	r4,r2,10002834 <___vfprintf_internal_r+0x121c>
10001e2c:	42000204 	addi	r8,r8,8
10001e30:	e080400c 	andi	r2,fp,256
10001e34:	1001ac1e 	bne	r2,zero,100024e8 <___vfprintf_internal_r+0xed0>
10001e38:	d8811f17 	ldw	r2,1148(sp)
10001e3c:	d9413117 	ldw	r5,1220(sp)
10001e40:	1c47883a 	add	r3,r3,r17
10001e44:	10800044 	addi	r2,r2,1
10001e48:	41400015 	stw	r5,0(r8)
10001e4c:	44400115 	stw	r17,4(r8)
10001e50:	d8c12015 	stw	r3,1152(sp)
10001e54:	d8811f15 	stw	r2,1148(sp)
10001e58:	010001c4 	movi	r4,7
10001e5c:	20825d16 	blt	r4,r2,100027d4 <___vfprintf_internal_r+0x11bc>
10001e60:	42000204 	addi	r8,r8,8
10001e64:	e080010c 	andi	r2,fp,4
10001e68:	10003126 	beq	r2,zero,10001f30 <___vfprintf_internal_r+0x918>
10001e6c:	d8812e17 	ldw	r2,1208(sp)
10001e70:	d9012b17 	ldw	r4,1196(sp)
10001e74:	1121c83a 	sub	r16,r2,r4
10001e78:	04002d0e 	bge	zero,r16,10001f30 <___vfprintf_internal_r+0x918>
10001e7c:	04400404 	movi	r17,16
10001e80:	d8811f17 	ldw	r2,1148(sp)
10001e84:	8c05340e 	bge	r17,r16,10003358 <___vfprintf_internal_r+0x1d40>
10001e88:	01040074 	movhi	r4,4097
10001e8c:	2101b384 	addi	r4,r4,1742
10001e90:	d9013615 	stw	r4,1240(sp)
10001e94:	048001c4 	movi	r18,7
10001e98:	00000306 	br	10001ea8 <___vfprintf_internal_r+0x890>
10001e9c:	843ffc04 	addi	r16,r16,-16
10001ea0:	42000204 	addi	r8,r8,8
10001ea4:	8c00130e 	bge	r17,r16,10001ef4 <___vfprintf_internal_r+0x8dc>
10001ea8:	01440074 	movhi	r5,4097
10001eac:	18c00404 	addi	r3,r3,16
10001eb0:	10800044 	addi	r2,r2,1
10001eb4:	2941b384 	addi	r5,r5,1742
10001eb8:	41400015 	stw	r5,0(r8)
10001ebc:	44400115 	stw	r17,4(r8)
10001ec0:	d8c12015 	stw	r3,1152(sp)
10001ec4:	d8811f15 	stw	r2,1148(sp)
10001ec8:	90bff40e 	bge	r18,r2,10001e9c <__alt_data_end+0xf8001e9c>
10001ecc:	b809883a 	mov	r4,r23
10001ed0:	b00b883a 	mov	r5,r22
10001ed4:	d9811e04 	addi	r6,sp,1144
10001ed8:	00089200 	call	10008920 <__sprint_r>
10001edc:	103ee61e 	bne	r2,zero,10001a78 <__alt_data_end+0xf8001a78>
10001ee0:	843ffc04 	addi	r16,r16,-16
10001ee4:	d8c12017 	ldw	r3,1152(sp)
10001ee8:	d8811f17 	ldw	r2,1148(sp)
10001eec:	da000404 	addi	r8,sp,16
10001ef0:	8c3fed16 	blt	r17,r16,10001ea8 <__alt_data_end+0xf8001ea8>
10001ef4:	d9013617 	ldw	r4,1240(sp)
10001ef8:	1c07883a 	add	r3,r3,r16
10001efc:	10800044 	addi	r2,r2,1
10001f00:	41000015 	stw	r4,0(r8)
10001f04:	44000115 	stw	r16,4(r8)
10001f08:	d8c12015 	stw	r3,1152(sp)
10001f0c:	d8811f15 	stw	r2,1148(sp)
10001f10:	010001c4 	movi	r4,7
10001f14:	2080060e 	bge	r4,r2,10001f30 <___vfprintf_internal_r+0x918>
10001f18:	b809883a 	mov	r4,r23
10001f1c:	b00b883a 	mov	r5,r22
10001f20:	d9811e04 	addi	r6,sp,1144
10001f24:	00089200 	call	10008920 <__sprint_r>
10001f28:	103ed31e 	bne	r2,zero,10001a78 <__alt_data_end+0xf8001a78>
10001f2c:	d8c12017 	ldw	r3,1152(sp)
10001f30:	df012b17 	ldw	fp,1196(sp)
10001f34:	d9412e17 	ldw	r5,1208(sp)
10001f38:	e140010e 	bge	fp,r5,10001f40 <___vfprintf_internal_r+0x928>
10001f3c:	2839883a 	mov	fp,r5
10001f40:	d8812f17 	ldw	r2,1212(sp)
10001f44:	1705883a 	add	r2,r2,fp
10001f48:	d8812f15 	stw	r2,1212(sp)
10001f4c:	1802291e 	bne	r3,zero,100027f4 <___vfprintf_internal_r+0x11dc>
10001f50:	d8c12a17 	ldw	r3,1192(sp)
10001f54:	d8011f15 	stw	zero,1148(sp)
10001f58:	da000404 	addi	r8,sp,16
10001f5c:	18800007 	ldb	r2,0(r3)
10001f60:	103ded1e 	bne	r2,zero,10001718 <__alt_data_end+0xf8001718>
10001f64:	dc012a17 	ldw	r16,1192(sp)
10001f68:	003e0506 	br	10001780 <__alt_data_end+0xf8001780>
10001f6c:	d9012d17 	ldw	r4,1204(sp)
10001f70:	d9412d17 	ldw	r5,1204(sp)
10001f74:	da012a17 	ldw	r8,1192(sp)
10001f78:	21000017 	ldw	r4,0(r4)
10001f7c:	29400117 	ldw	r5,4(r5)
10001f80:	df012a15 	stw	fp,1192(sp)
10001f84:	9839883a 	mov	fp,r19
10001f88:	dcc12b03 	ldbu	r19,1196(sp)
10001f8c:	d9013715 	stw	r4,1244(sp)
10001f90:	d9413915 	stw	r5,1252(sp)
10001f94:	da013f15 	stw	r8,1276(sp)
10001f98:	da413e15 	stw	r9,1272(sp)
10001f9c:	dcc12785 	stb	r19,1182(sp)
10001fa0:	000857c0 	call	1000857c <__fpclassifyd>
10001fa4:	d8c12d17 	ldw	r3,1204(sp)
10001fa8:	04400044 	movi	r17,1
10001fac:	da013f17 	ldw	r8,1276(sp)
10001fb0:	1c800204 	addi	r18,r3,8
10001fb4:	da413e17 	ldw	r9,1272(sp)
10001fb8:	d9013717 	ldw	r4,1244(sp)
10001fbc:	d9413917 	ldw	r5,1252(sp)
10001fc0:	1443451e 	bne	r2,r17,10002cd8 <___vfprintf_internal_r+0x16c0>
10001fc4:	000d883a 	mov	r6,zero
10001fc8:	000f883a 	mov	r7,zero
10001fcc:	000c7fc0 	call	1000c7fc <__ledf2>
10001fd0:	da013f17 	ldw	r8,1276(sp)
10001fd4:	1004fe16 	blt	r2,zero,100033d0 <___vfprintf_internal_r+0x1db8>
10001fd8:	dcc12783 	ldbu	r19,1182(sp)
10001fdc:	008011c4 	movi	r2,71
10001fe0:	14045d0e 	bge	r2,r16,10003158 <___vfprintf_internal_r+0x1b40>
10001fe4:	01440074 	movhi	r5,4097
10001fe8:	2941a004 	addi	r5,r5,1664
10001fec:	d9413115 	stw	r5,1220(sp)
10001ff0:	00c000c4 	movi	r3,3
10001ff4:	00bfdfc4 	movi	r2,-129
10001ff8:	d8c12b15 	stw	r3,1196(sp)
10001ffc:	e0b8703a 	and	fp,fp,r2
10002000:	dc812d15 	stw	r18,1204(sp)
10002004:	1823883a 	mov	r17,r3
10002008:	d8013215 	stw	zero,1224(sp)
1000200c:	d8013415 	stw	zero,1232(sp)
10002010:	003f0106 	br	10001c18 <__alt_data_end+0xf8001c18>
10002014:	9cc00214 	ori	r19,r19,8
10002018:	e005883a 	mov	r2,fp
1000201c:	e4000007 	ldb	r16,0(fp)
10002020:	003de506 	br	100017b8 <__alt_data_end+0xf80017b8>
10002024:	da012a17 	ldw	r8,1192(sp)
10002028:	df012a15 	stw	fp,1192(sp)
1000202c:	9f000414 	ori	fp,r19,16
10002030:	e0c0080c 	andi	r3,fp,32
10002034:	d8812d17 	ldw	r2,1204(sp)
10002038:	18007626 	beq	r3,zero,10002214 <___vfprintf_internal_r+0xbfc>
1000203c:	d9412d17 	ldw	r5,1204(sp)
10002040:	14800017 	ldw	r18,0(r2)
10002044:	15400117 	ldw	r21,4(r2)
10002048:	29400204 	addi	r5,r5,8
1000204c:	d9412d15 	stw	r5,1204(sp)
10002050:	0005883a 	mov	r2,zero
10002054:	9546b03a 	or	r3,r18,r21
10002058:	d8012785 	stb	zero,1182(sp)
1000205c:	da413215 	stw	r9,1224(sp)
10002060:	0027883a 	mov	r19,zero
10002064:	003ecd06 	br	10001b9c <__alt_data_end+0xf8001b9c>
10002068:	da012a17 	ldw	r8,1192(sp)
1000206c:	df012a15 	stw	fp,1192(sp)
10002070:	9f000414 	ori	fp,r19,16
10002074:	e0c0080c 	andi	r3,fp,32
10002078:	d8812d17 	ldw	r2,1204(sp)
1000207c:	18002c26 	beq	r3,zero,10002130 <___vfprintf_internal_r+0xb18>
10002080:	d9012d17 	ldw	r4,1204(sp)
10002084:	14800017 	ldw	r18,0(r2)
10002088:	15400117 	ldw	r21,4(r2)
1000208c:	21000204 	addi	r4,r4,8
10002090:	d9012d15 	stw	r4,1204(sp)
10002094:	00800044 	movi	r2,1
10002098:	9546b03a 	or	r3,r18,r21
1000209c:	003fee06 	br	10002058 <__alt_data_end+0xf8002058>
100020a0:	da012a17 	ldw	r8,1192(sp)
100020a4:	df012a15 	stw	fp,1192(sp)
100020a8:	9839883a 	mov	fp,r19
100020ac:	dcc12b03 	ldbu	r19,1196(sp)
100020b0:	01440074 	movhi	r5,4097
100020b4:	2941a304 	addi	r5,r5,1676
100020b8:	dcc12785 	stb	r19,1182(sp)
100020bc:	d9413b15 	stw	r5,1260(sp)
100020c0:	e0c0080c 	andi	r3,fp,32
100020c4:	d8812d17 	ldw	r2,1204(sp)
100020c8:	18002e26 	beq	r3,zero,10002184 <___vfprintf_internal_r+0xb6c>
100020cc:	d9412d17 	ldw	r5,1204(sp)
100020d0:	14800017 	ldw	r18,0(r2)
100020d4:	15400117 	ldw	r21,4(r2)
100020d8:	29400204 	addi	r5,r5,8
100020dc:	d9412d15 	stw	r5,1204(sp)
100020e0:	e080004c 	andi	r2,fp,1
100020e4:	10025c26 	beq	r2,zero,10002a58 <___vfprintf_internal_r+0x1440>
100020e8:	9546b03a 	or	r3,r18,r21
100020ec:	18038f26 	beq	r3,zero,10002f2c <___vfprintf_internal_r+0x1914>
100020f0:	00800c04 	movi	r2,48
100020f4:	d8812705 	stb	r2,1180(sp)
100020f8:	dc012745 	stb	r16,1181(sp)
100020fc:	e7000094 	ori	fp,fp,2
10002100:	00800084 	movi	r2,2
10002104:	003fd406 	br	10002058 <__alt_data_end+0xf8002058>
10002108:	9cc00814 	ori	r19,r19,32
1000210c:	e005883a 	mov	r2,fp
10002110:	e4000007 	ldb	r16,0(fp)
10002114:	003da806 	br	100017b8 <__alt_data_end+0xf80017b8>
10002118:	da012a17 	ldw	r8,1192(sp)
1000211c:	df012a15 	stw	fp,1192(sp)
10002120:	9839883a 	mov	fp,r19
10002124:	e0c0080c 	andi	r3,fp,32
10002128:	d8812d17 	ldw	r2,1204(sp)
1000212c:	183fd41e 	bne	r3,zero,10002080 <__alt_data_end+0xf8002080>
10002130:	e0c0040c 	andi	r3,fp,16
10002134:	18035f26 	beq	r3,zero,10002eb4 <___vfprintf_internal_r+0x189c>
10002138:	d9412d17 	ldw	r5,1204(sp)
1000213c:	14800017 	ldw	r18,0(r2)
10002140:	002b883a 	mov	r21,zero
10002144:	29400104 	addi	r5,r5,4
10002148:	d9412d15 	stw	r5,1204(sp)
1000214c:	00800044 	movi	r2,1
10002150:	9007883a 	mov	r3,r18
10002154:	003fc006 	br	10002058 <__alt_data_end+0xf8002058>
10002158:	da012a17 	ldw	r8,1192(sp)
1000215c:	df012a15 	stw	fp,1192(sp)
10002160:	9839883a 	mov	fp,r19
10002164:	dcc12b03 	ldbu	r19,1196(sp)
10002168:	01040074 	movhi	r4,4097
1000216c:	2101a804 	addi	r4,r4,1696
10002170:	d9013b15 	stw	r4,1260(sp)
10002174:	dcc12785 	stb	r19,1182(sp)
10002178:	e0c0080c 	andi	r3,fp,32
1000217c:	d8812d17 	ldw	r2,1204(sp)
10002180:	183fd21e 	bne	r3,zero,100020cc <__alt_data_end+0xf80020cc>
10002184:	e0c0040c 	andi	r3,fp,16
10002188:	18035426 	beq	r3,zero,10002edc <___vfprintf_internal_r+0x18c4>
1000218c:	d8c12d17 	ldw	r3,1204(sp)
10002190:	14800017 	ldw	r18,0(r2)
10002194:	002b883a 	mov	r21,zero
10002198:	18c00104 	addi	r3,r3,4
1000219c:	d8c12d15 	stw	r3,1204(sp)
100021a0:	003fcf06 	br	100020e0 <__alt_data_end+0xf80020e0>
100021a4:	e4000007 	ldb	r16,0(fp)
100021a8:	00801b04 	movi	r2,108
100021ac:	8083f726 	beq	r16,r2,1000318c <___vfprintf_internal_r+0x1b74>
100021b0:	9cc00414 	ori	r19,r19,16
100021b4:	e005883a 	mov	r2,fp
100021b8:	003d7f06 	br	100017b8 <__alt_data_end+0xf80017b8>
100021bc:	da012a17 	ldw	r8,1192(sp)
100021c0:	df012a15 	stw	fp,1192(sp)
100021c4:	9839883a 	mov	fp,r19
100021c8:	dcc12b03 	ldbu	r19,1196(sp)
100021cc:	e080080c 	andi	r2,fp,32
100021d0:	dcc12785 	stb	r19,1182(sp)
100021d4:	10032226 	beq	r2,zero,10002e60 <___vfprintf_internal_r+0x1848>
100021d8:	d9412d17 	ldw	r5,1204(sp)
100021dc:	d9012f17 	ldw	r4,1212(sp)
100021e0:	28800017 	ldw	r2,0(r5)
100021e4:	2007d7fa 	srai	r3,r4,31
100021e8:	29400104 	addi	r5,r5,4
100021ec:	d9412d15 	stw	r5,1204(sp)
100021f0:	11000015 	stw	r4,0(r2)
100021f4:	10c00115 	stw	r3,4(r2)
100021f8:	003d4406 	br	1000170c <__alt_data_end+0xf800170c>
100021fc:	da012a17 	ldw	r8,1192(sp)
10002200:	df012a15 	stw	fp,1192(sp)
10002204:	9839883a 	mov	fp,r19
10002208:	e0c0080c 	andi	r3,fp,32
1000220c:	d8812d17 	ldw	r2,1204(sp)
10002210:	183f8a1e 	bne	r3,zero,1000203c <__alt_data_end+0xf800203c>
10002214:	e0c0040c 	andi	r3,fp,16
10002218:	18031c26 	beq	r3,zero,10002e8c <___vfprintf_internal_r+0x1874>
1000221c:	14800017 	ldw	r18,0(r2)
10002220:	d8812d17 	ldw	r2,1204(sp)
10002224:	002b883a 	mov	r21,zero
10002228:	9007883a 	mov	r3,r18
1000222c:	10800104 	addi	r2,r2,4
10002230:	d8812d15 	stw	r2,1204(sp)
10002234:	0005883a 	mov	r2,zero
10002238:	003f8706 	br	10002058 <__alt_data_end+0xf8002058>
1000223c:	d9412d17 	ldw	r5,1204(sp)
10002240:	00800c04 	movi	r2,48
10002244:	d8812705 	stb	r2,1180(sp)
10002248:	2c800017 	ldw	r18,0(r5)
1000224c:	00801e04 	movi	r2,120
10002250:	d8812745 	stb	r2,1181(sp)
10002254:	00840074 	movhi	r2,4097
10002258:	1081a804 	addi	r2,r2,1696
1000225c:	29400104 	addi	r5,r5,4
10002260:	da012a17 	ldw	r8,1192(sp)
10002264:	d8813b15 	stw	r2,1260(sp)
10002268:	df012a15 	stw	fp,1192(sp)
1000226c:	002b883a 	mov	r21,zero
10002270:	9f000094 	ori	fp,r19,2
10002274:	d9412d15 	stw	r5,1204(sp)
10002278:	00800084 	movi	r2,2
1000227c:	04001e04 	movi	r16,120
10002280:	9007883a 	mov	r3,r18
10002284:	003f7406 	br	10002058 <__alt_data_end+0xf8002058>
10002288:	da012a17 	ldw	r8,1192(sp)
1000228c:	df012a15 	stw	fp,1192(sp)
10002290:	9839883a 	mov	fp,r19
10002294:	dcc12b03 	ldbu	r19,1196(sp)
10002298:	e080080c 	andi	r2,fp,32
1000229c:	d8c12d17 	ldw	r3,1204(sp)
100022a0:	dcc12785 	stb	r19,1182(sp)
100022a4:	103e321e 	bne	r2,zero,10001b70 <__alt_data_end+0xf8001b70>
100022a8:	e080040c 	andi	r2,fp,16
100022ac:	10031326 	beq	r2,zero,10002efc <___vfprintf_internal_r+0x18e4>
100022b0:	1c800017 	ldw	r18,0(r3)
100022b4:	d9412d17 	ldw	r5,1204(sp)
100022b8:	902bd7fa 	srai	r21,r18,31
100022bc:	29400104 	addi	r5,r5,4
100022c0:	d9412d15 	stw	r5,1204(sp)
100022c4:	a805883a 	mov	r2,r21
100022c8:	003e2f06 	br	10001b88 <__alt_data_end+0xf8001b88>
100022cc:	9cc01014 	ori	r19,r19,64
100022d0:	e005883a 	mov	r2,fp
100022d4:	e4000007 	ldb	r16,0(fp)
100022d8:	003d3706 	br	100017b8 <__alt_data_end+0xf80017b8>
100022dc:	d8c12d17 	ldw	r3,1204(sp)
100022e0:	d9012d17 	ldw	r4,1204(sp)
100022e4:	da012a17 	ldw	r8,1192(sp)
100022e8:	18800017 	ldw	r2,0(r3)
100022ec:	21000104 	addi	r4,r4,4
100022f0:	00c00044 	movi	r3,1
100022f4:	df012a15 	stw	fp,1192(sp)
100022f8:	d8c12b15 	stw	r3,1196(sp)
100022fc:	9839883a 	mov	fp,r19
10002300:	d8012785 	stb	zero,1182(sp)
10002304:	d8810405 	stb	r2,1040(sp)
10002308:	d9012d15 	stw	r4,1204(sp)
1000230c:	1823883a 	mov	r17,r3
10002310:	d8c10404 	addi	r3,sp,1040
10002314:	d8013215 	stw	zero,1224(sp)
10002318:	d8013415 	stw	zero,1232(sp)
1000231c:	d8c13115 	stw	r3,1220(sp)
10002320:	0005883a 	mov	r2,zero
10002324:	003e4306 	br	10001c34 <__alt_data_end+0xf8001c34>
10002328:	d8812b07 	ldb	r2,1196(sp)
1000232c:	1002fc1e 	bne	r2,zero,10002f20 <___vfprintf_internal_r+0x1908>
10002330:	00c00804 	movi	r3,32
10002334:	d8c12b05 	stb	r3,1196(sp)
10002338:	e005883a 	mov	r2,fp
1000233c:	e4000007 	ldb	r16,0(fp)
10002340:	003d1d06 	br	100017b8 <__alt_data_end+0xf80017b8>
10002344:	9cc00054 	ori	r19,r19,1
10002348:	e005883a 	mov	r2,fp
1000234c:	e4000007 	ldb	r16,0(fp)
10002350:	003d1906 	br	100017b8 <__alt_data_end+0xf80017b8>
10002354:	d9012d17 	ldw	r4,1204(sp)
10002358:	d9412d17 	ldw	r5,1204(sp)
1000235c:	21000017 	ldw	r4,0(r4)
10002360:	28c00104 	addi	r3,r5,4
10002364:	d9012e15 	stw	r4,1208(sp)
10002368:	20038c16 	blt	r4,zero,1000319c <___vfprintf_internal_r+0x1b84>
1000236c:	d8c12d15 	stw	r3,1204(sp)
10002370:	e005883a 	mov	r2,fp
10002374:	e4000007 	ldb	r16,0(fp)
10002378:	003d0f06 	br	100017b8 <__alt_data_end+0xf80017b8>
1000237c:	00c00ac4 	movi	r3,43
10002380:	d8c12b05 	stb	r3,1196(sp)
10002384:	e005883a 	mov	r2,fp
10002388:	e4000007 	ldb	r16,0(fp)
1000238c:	003d0a06 	br	100017b8 <__alt_data_end+0xf80017b8>
10002390:	d8c12d17 	ldw	r3,1204(sp)
10002394:	d9012d17 	ldw	r4,1204(sp)
10002398:	da012a17 	ldw	r8,1192(sp)
1000239c:	18c00017 	ldw	r3,0(r3)
100023a0:	df012a15 	stw	fp,1192(sp)
100023a4:	d8012785 	stb	zero,1182(sp)
100023a8:	d8c13115 	stw	r3,1220(sp)
100023ac:	9839883a 	mov	fp,r19
100023b0:	24800104 	addi	r18,r4,4
100023b4:	1803f726 	beq	r3,zero,10003394 <___vfprintf_internal_r+0x1d7c>
100023b8:	d9013117 	ldw	r4,1220(sp)
100023bc:	48038916 	blt	r9,zero,100031e4 <___vfprintf_internal_r+0x1bcc>
100023c0:	480d883a 	mov	r6,r9
100023c4:	000b883a 	mov	r5,zero
100023c8:	da013f15 	stw	r8,1276(sp)
100023cc:	da413e15 	stw	r9,1272(sp)
100023d0:	0006c2c0 	call	10006c2c <memchr>
100023d4:	da013f17 	ldw	r8,1276(sp)
100023d8:	da413e17 	ldw	r9,1272(sp)
100023dc:	10045926 	beq	r2,zero,10003544 <___vfprintf_internal_r+0x1f2c>
100023e0:	d8c13117 	ldw	r3,1220(sp)
100023e4:	10e3c83a 	sub	r17,r2,r3
100023e8:	4c433516 	blt	r9,r17,100030c0 <___vfprintf_internal_r+0x1aa8>
100023ec:	8805883a 	mov	r2,r17
100023f0:	88038116 	blt	r17,zero,100031f8 <___vfprintf_internal_r+0x1be0>
100023f4:	dcc12783 	ldbu	r19,1182(sp)
100023f8:	d8812b15 	stw	r2,1196(sp)
100023fc:	dc812d15 	stw	r18,1204(sp)
10002400:	d8013215 	stw	zero,1224(sp)
10002404:	d8013415 	stw	zero,1232(sp)
10002408:	003e0306 	br	10001c18 <__alt_data_end+0xf8001c18>
1000240c:	da012a17 	ldw	r8,1192(sp)
10002410:	df012a15 	stw	fp,1192(sp)
10002414:	9839883a 	mov	fp,r19
10002418:	dcc12b03 	ldbu	r19,1196(sp)
1000241c:	dcc12785 	stb	r19,1182(sp)
10002420:	803d8f26 	beq	r16,zero,10001a60 <__alt_data_end+0xf8001a60>
10002424:	00c00044 	movi	r3,1
10002428:	d8c12b15 	stw	r3,1196(sp)
1000242c:	dc010405 	stb	r16,1040(sp)
10002430:	d8012785 	stb	zero,1182(sp)
10002434:	003fb506 	br	1000230c <__alt_data_end+0xf800230c>
10002438:	d8c12017 	ldw	r3,1152(sp)
1000243c:	003e3506 	br	10001d14 <__alt_data_end+0xf8001d14>
10002440:	10803fcc 	andi	r2,r2,255
10002444:	00c00044 	movi	r3,1
10002448:	10fddc1e 	bne	r2,r3,10001bbc <__alt_data_end+0xf8001bbc>
1000244c:	a800021e 	bne	r21,zero,10002458 <___vfprintf_internal_r+0xe40>
10002450:	00800244 	movi	r2,9
10002454:	14801e2e 	bgeu	r2,r18,100024d0 <___vfprintf_internal_r+0xeb8>
10002458:	dc012b15 	stw	r16,1196(sp)
1000245c:	dc410e04 	addi	r17,sp,1080
10002460:	9021883a 	mov	r16,r18
10002464:	da012c15 	stw	r8,1200(sp)
10002468:	a825883a 	mov	r18,r21
1000246c:	482b883a 	mov	r21,r9
10002470:	8009883a 	mov	r4,r16
10002474:	900b883a 	mov	r5,r18
10002478:	01800284 	movi	r6,10
1000247c:	000f883a 	mov	r7,zero
10002480:	000ad0c0 	call	1000ad0c <__umoddi3>
10002484:	10800c04 	addi	r2,r2,48
10002488:	8c7fffc4 	addi	r17,r17,-1
1000248c:	8009883a 	mov	r4,r16
10002490:	900b883a 	mov	r5,r18
10002494:	01800284 	movi	r6,10
10002498:	000f883a 	mov	r7,zero
1000249c:	88800005 	stb	r2,0(r17)
100024a0:	000a6cc0 	call	1000a6cc <__udivdi3>
100024a4:	1021883a 	mov	r16,r2
100024a8:	10c4b03a 	or	r2,r2,r3
100024ac:	1825883a 	mov	r18,r3
100024b0:	103fef1e 	bne	r2,zero,10002470 <__alt_data_end+0xf8002470>
100024b4:	d9012817 	ldw	r4,1184(sp)
100024b8:	dc413115 	stw	r17,1220(sp)
100024bc:	dc012b17 	ldw	r16,1196(sp)
100024c0:	da012c17 	ldw	r8,1200(sp)
100024c4:	a813883a 	mov	r9,r21
100024c8:	2463c83a 	sub	r17,r4,r17
100024cc:	003dcd06 	br	10001c04 <__alt_data_end+0xf8001c04>
100024d0:	94800c04 	addi	r18,r18,48
100024d4:	d8c10dc4 	addi	r3,sp,1079
100024d8:	dc810dc5 	stb	r18,1079(sp)
100024dc:	dc413c17 	ldw	r17,1264(sp)
100024e0:	d8c13115 	stw	r3,1220(sp)
100024e4:	003dc706 	br	10001c04 <__alt_data_end+0xf8001c04>
100024e8:	00801944 	movi	r2,101
100024ec:	1400720e 	bge	r2,r16,100026b8 <___vfprintf_internal_r+0x10a0>
100024f0:	d9013717 	ldw	r4,1244(sp)
100024f4:	d9413917 	ldw	r5,1252(sp)
100024f8:	000d883a 	mov	r6,zero
100024fc:	000f883a 	mov	r7,zero
10002500:	d8c13d15 	stw	r3,1268(sp)
10002504:	da013f15 	stw	r8,1276(sp)
10002508:	000c6980 	call	1000c698 <__eqdf2>
1000250c:	d8c13d17 	ldw	r3,1268(sp)
10002510:	da013f17 	ldw	r8,1276(sp)
10002514:	1000f41e 	bne	r2,zero,100028e8 <___vfprintf_internal_r+0x12d0>
10002518:	d8811f17 	ldw	r2,1148(sp)
1000251c:	01040074 	movhi	r4,4097
10002520:	2101af04 	addi	r4,r4,1724
10002524:	18c00044 	addi	r3,r3,1
10002528:	10800044 	addi	r2,r2,1
1000252c:	41000015 	stw	r4,0(r8)
10002530:	01000044 	movi	r4,1
10002534:	41000115 	stw	r4,4(r8)
10002538:	d8c12015 	stw	r3,1152(sp)
1000253c:	d8811f15 	stw	r2,1148(sp)
10002540:	010001c4 	movi	r4,7
10002544:	20828d16 	blt	r4,r2,10002f7c <___vfprintf_internal_r+0x1964>
10002548:	42000204 	addi	r8,r8,8
1000254c:	d8812617 	ldw	r2,1176(sp)
10002550:	d9413317 	ldw	r5,1228(sp)
10002554:	11400216 	blt	r2,r5,10002560 <___vfprintf_internal_r+0xf48>
10002558:	e080004c 	andi	r2,fp,1
1000255c:	103e4126 	beq	r2,zero,10001e64 <__alt_data_end+0xf8001e64>
10002560:	d8813817 	ldw	r2,1248(sp)
10002564:	d9013517 	ldw	r4,1236(sp)
10002568:	d9413817 	ldw	r5,1248(sp)
1000256c:	1887883a 	add	r3,r3,r2
10002570:	d8811f17 	ldw	r2,1148(sp)
10002574:	41000015 	stw	r4,0(r8)
10002578:	41400115 	stw	r5,4(r8)
1000257c:	10800044 	addi	r2,r2,1
10002580:	d8c12015 	stw	r3,1152(sp)
10002584:	d8811f15 	stw	r2,1148(sp)
10002588:	010001c4 	movi	r4,7
1000258c:	20830916 	blt	r4,r2,100031b4 <___vfprintf_internal_r+0x1b9c>
10002590:	42000204 	addi	r8,r8,8
10002594:	d8813317 	ldw	r2,1228(sp)
10002598:	143fffc4 	addi	r16,r2,-1
1000259c:	043e310e 	bge	zero,r16,10001e64 <__alt_data_end+0xf8001e64>
100025a0:	04400404 	movi	r17,16
100025a4:	d8811f17 	ldw	r2,1148(sp)
100025a8:	8c007e0e 	bge	r17,r16,100027a4 <___vfprintf_internal_r+0x118c>
100025ac:	01440074 	movhi	r5,4097
100025b0:	2941af84 	addi	r5,r5,1726
100025b4:	d9412c15 	stw	r5,1200(sp)
100025b8:	04c001c4 	movi	r19,7
100025bc:	00000306 	br	100025cc <___vfprintf_internal_r+0xfb4>
100025c0:	42000204 	addi	r8,r8,8
100025c4:	843ffc04 	addi	r16,r16,-16
100025c8:	8c00790e 	bge	r17,r16,100027b0 <___vfprintf_internal_r+0x1198>
100025cc:	18c00404 	addi	r3,r3,16
100025d0:	10800044 	addi	r2,r2,1
100025d4:	45000015 	stw	r20,0(r8)
100025d8:	44400115 	stw	r17,4(r8)
100025dc:	d8c12015 	stw	r3,1152(sp)
100025e0:	d8811f15 	stw	r2,1148(sp)
100025e4:	98bff60e 	bge	r19,r2,100025c0 <__alt_data_end+0xf80025c0>
100025e8:	b809883a 	mov	r4,r23
100025ec:	b00b883a 	mov	r5,r22
100025f0:	d9811e04 	addi	r6,sp,1144
100025f4:	00089200 	call	10008920 <__sprint_r>
100025f8:	103d1f1e 	bne	r2,zero,10001a78 <__alt_data_end+0xf8001a78>
100025fc:	d8c12017 	ldw	r3,1152(sp)
10002600:	d8811f17 	ldw	r2,1148(sp)
10002604:	da000404 	addi	r8,sp,16
10002608:	003fee06 	br	100025c4 <__alt_data_end+0xf80025c4>
1000260c:	d9412e17 	ldw	r5,1208(sp)
10002610:	d8812b17 	ldw	r2,1196(sp)
10002614:	28a7c83a 	sub	r19,r5,r2
10002618:	04fddc0e 	bge	zero,r19,10001d8c <__alt_data_end+0xf8001d8c>
1000261c:	05400404 	movi	r21,16
10002620:	d8811f17 	ldw	r2,1148(sp)
10002624:	acc3870e 	bge	r21,r19,10003444 <___vfprintf_internal_r+0x1e2c>
10002628:	01440074 	movhi	r5,4097
1000262c:	2941af84 	addi	r5,r5,1726
10002630:	d9412c15 	stw	r5,1200(sp)
10002634:	048001c4 	movi	r18,7
10002638:	00000306 	br	10002648 <___vfprintf_internal_r+0x1030>
1000263c:	9cfffc04 	addi	r19,r19,-16
10002640:	42000204 	addi	r8,r8,8
10002644:	acc0110e 	bge	r21,r19,1000268c <___vfprintf_internal_r+0x1074>
10002648:	18c00404 	addi	r3,r3,16
1000264c:	10800044 	addi	r2,r2,1
10002650:	45000015 	stw	r20,0(r8)
10002654:	45400115 	stw	r21,4(r8)
10002658:	d8c12015 	stw	r3,1152(sp)
1000265c:	d8811f15 	stw	r2,1148(sp)
10002660:	90bff60e 	bge	r18,r2,1000263c <__alt_data_end+0xf800263c>
10002664:	b809883a 	mov	r4,r23
10002668:	b00b883a 	mov	r5,r22
1000266c:	d9811e04 	addi	r6,sp,1144
10002670:	00089200 	call	10008920 <__sprint_r>
10002674:	103d001e 	bne	r2,zero,10001a78 <__alt_data_end+0xf8001a78>
10002678:	9cfffc04 	addi	r19,r19,-16
1000267c:	d8c12017 	ldw	r3,1152(sp)
10002680:	d8811f17 	ldw	r2,1148(sp)
10002684:	da000404 	addi	r8,sp,16
10002688:	acffef16 	blt	r21,r19,10002648 <__alt_data_end+0xf8002648>
1000268c:	d9012c17 	ldw	r4,1200(sp)
10002690:	1cc7883a 	add	r3,r3,r19
10002694:	10800044 	addi	r2,r2,1
10002698:	41000015 	stw	r4,0(r8)
1000269c:	44c00115 	stw	r19,4(r8)
100026a0:	d8c12015 	stw	r3,1152(sp)
100026a4:	d8811f15 	stw	r2,1148(sp)
100026a8:	010001c4 	movi	r4,7
100026ac:	20817816 	blt	r4,r2,10002c90 <___vfprintf_internal_r+0x1678>
100026b0:	42000204 	addi	r8,r8,8
100026b4:	003db506 	br	10001d8c <__alt_data_end+0xf8001d8c>
100026b8:	d9413317 	ldw	r5,1228(sp)
100026bc:	00800044 	movi	r2,1
100026c0:	18c00044 	addi	r3,r3,1
100026c4:	11413e0e 	bge	r2,r5,10002bc0 <___vfprintf_internal_r+0x15a8>
100026c8:	dc011f17 	ldw	r16,1148(sp)
100026cc:	d8813117 	ldw	r2,1220(sp)
100026d0:	d8c12015 	stw	r3,1152(sp)
100026d4:	84000044 	addi	r16,r16,1
100026d8:	40800015 	stw	r2,0(r8)
100026dc:	00800044 	movi	r2,1
100026e0:	40800115 	stw	r2,4(r8)
100026e4:	dc011f15 	stw	r16,1148(sp)
100026e8:	008001c4 	movi	r2,7
100026ec:	14015616 	blt	r2,r16,10002c48 <___vfprintf_internal_r+0x1630>
100026f0:	42000204 	addi	r8,r8,8
100026f4:	d9013817 	ldw	r4,1248(sp)
100026f8:	d9413517 	ldw	r5,1236(sp)
100026fc:	84000044 	addi	r16,r16,1
10002700:	1907883a 	add	r3,r3,r4
10002704:	41400015 	stw	r5,0(r8)
10002708:	41000115 	stw	r4,4(r8)
1000270c:	d8c12015 	stw	r3,1152(sp)
10002710:	dc011f15 	stw	r16,1148(sp)
10002714:	008001c4 	movi	r2,7
10002718:	14015416 	blt	r2,r16,10002c6c <___vfprintf_internal_r+0x1654>
1000271c:	44400204 	addi	r17,r8,8
10002720:	d9013717 	ldw	r4,1244(sp)
10002724:	d9413917 	ldw	r5,1252(sp)
10002728:	000d883a 	mov	r6,zero
1000272c:	000f883a 	mov	r7,zero
10002730:	d8c13d15 	stw	r3,1268(sp)
10002734:	000c6980 	call	1000c698 <__eqdf2>
10002738:	d8c13d17 	ldw	r3,1268(sp)
1000273c:	1000a726 	beq	r2,zero,100029dc <___vfprintf_internal_r+0x13c4>
10002740:	d9013317 	ldw	r4,1228(sp)
10002744:	d9413117 	ldw	r5,1220(sp)
10002748:	84000044 	addi	r16,r16,1
1000274c:	20bfffc4 	addi	r2,r4,-1
10002750:	1887883a 	add	r3,r3,r2
10002754:	29000044 	addi	r4,r5,1
10002758:	88800115 	stw	r2,4(r17)
1000275c:	89000015 	stw	r4,0(r17)
10002760:	d8c12015 	stw	r3,1152(sp)
10002764:	dc011f15 	stw	r16,1148(sp)
10002768:	008001c4 	movi	r2,7
1000276c:	14012d16 	blt	r2,r16,10002c24 <___vfprintf_internal_r+0x160c>
10002770:	8c400204 	addi	r17,r17,8
10002774:	d9413a17 	ldw	r5,1256(sp)
10002778:	dcc122c4 	addi	r19,sp,1163
1000277c:	84000044 	addi	r16,r16,1
10002780:	28c7883a 	add	r3,r5,r3
10002784:	8cc00015 	stw	r19,0(r17)
10002788:	89400115 	stw	r5,4(r17)
1000278c:	d8c12015 	stw	r3,1152(sp)
10002790:	dc011f15 	stw	r16,1148(sp)
10002794:	008001c4 	movi	r2,7
10002798:	14000e16 	blt	r2,r16,100027d4 <___vfprintf_internal_r+0x11bc>
1000279c:	8a000204 	addi	r8,r17,8
100027a0:	003db006 	br	10001e64 <__alt_data_end+0xf8001e64>
100027a4:	01040074 	movhi	r4,4097
100027a8:	2101af84 	addi	r4,r4,1726
100027ac:	d9012c15 	stw	r4,1200(sp)
100027b0:	d9012c17 	ldw	r4,1200(sp)
100027b4:	1c07883a 	add	r3,r3,r16
100027b8:	44000115 	stw	r16,4(r8)
100027bc:	41000015 	stw	r4,0(r8)
100027c0:	10800044 	addi	r2,r2,1
100027c4:	d8c12015 	stw	r3,1152(sp)
100027c8:	d8811f15 	stw	r2,1148(sp)
100027cc:	010001c4 	movi	r4,7
100027d0:	20bda30e 	bge	r4,r2,10001e60 <__alt_data_end+0xf8001e60>
100027d4:	b809883a 	mov	r4,r23
100027d8:	b00b883a 	mov	r5,r22
100027dc:	d9811e04 	addi	r6,sp,1144
100027e0:	00089200 	call	10008920 <__sprint_r>
100027e4:	103ca41e 	bne	r2,zero,10001a78 <__alt_data_end+0xf8001a78>
100027e8:	d8c12017 	ldw	r3,1152(sp)
100027ec:	da000404 	addi	r8,sp,16
100027f0:	003d9c06 	br	10001e64 <__alt_data_end+0xf8001e64>
100027f4:	b809883a 	mov	r4,r23
100027f8:	b00b883a 	mov	r5,r22
100027fc:	d9811e04 	addi	r6,sp,1144
10002800:	00089200 	call	10008920 <__sprint_r>
10002804:	103dd226 	beq	r2,zero,10001f50 <__alt_data_end+0xf8001f50>
10002808:	003c9b06 	br	10001a78 <__alt_data_end+0xf8001a78>
1000280c:	10803fcc 	andi	r2,r2,255
10002810:	1000311e 	bne	r2,zero,100028d8 <___vfprintf_internal_r+0x12c0>
10002814:	e080004c 	andi	r2,fp,1
10002818:	10002f26 	beq	r2,zero,100028d8 <___vfprintf_internal_r+0x12c0>
1000281c:	00800c04 	movi	r2,48
10002820:	d8c10dc4 	addi	r3,sp,1079
10002824:	d8810dc5 	stb	r2,1079(sp)
10002828:	dc413c17 	ldw	r17,1264(sp)
1000282c:	d8c13115 	stw	r3,1220(sp)
10002830:	003cf406 	br	10001c04 <__alt_data_end+0xf8001c04>
10002834:	b809883a 	mov	r4,r23
10002838:	b00b883a 	mov	r5,r22
1000283c:	d9811e04 	addi	r6,sp,1144
10002840:	00089200 	call	10008920 <__sprint_r>
10002844:	103c8c1e 	bne	r2,zero,10001a78 <__alt_data_end+0xf8001a78>
10002848:	d8c12017 	ldw	r3,1152(sp)
1000284c:	da000404 	addi	r8,sp,16
10002850:	003d7706 	br	10001e30 <__alt_data_end+0xf8001e30>
10002854:	b809883a 	mov	r4,r23
10002858:	b00b883a 	mov	r5,r22
1000285c:	d9811e04 	addi	r6,sp,1144
10002860:	00089200 	call	10008920 <__sprint_r>
10002864:	103c841e 	bne	r2,zero,10001a78 <__alt_data_end+0xf8001a78>
10002868:	d8c12017 	ldw	r3,1152(sp)
1000286c:	da000404 	addi	r8,sp,16
10002870:	003d3506 	br	10001d48 <__alt_data_end+0xf8001d48>
10002874:	b809883a 	mov	r4,r23
10002878:	b00b883a 	mov	r5,r22
1000287c:	d9811e04 	addi	r6,sp,1144
10002880:	00089200 	call	10008920 <__sprint_r>
10002884:	103c7c1e 	bne	r2,zero,10001a78 <__alt_data_end+0xf8001a78>
10002888:	d8c12017 	ldw	r3,1152(sp)
1000288c:	da000404 	addi	r8,sp,16
10002890:	003d3b06 	br	10001d80 <__alt_data_end+0xf8001d80>
10002894:	d9413b17 	ldw	r5,1260(sp)
10002898:	d8c10e04 	addi	r3,sp,1080
1000289c:	908003cc 	andi	r2,r18,15
100028a0:	a808973a 	slli	r4,r21,28
100028a4:	2885883a 	add	r2,r5,r2
100028a8:	9024d13a 	srli	r18,r18,4
100028ac:	10800003 	ldbu	r2,0(r2)
100028b0:	a82ad13a 	srli	r21,r21,4
100028b4:	18ffffc4 	addi	r3,r3,-1
100028b8:	24a4b03a 	or	r18,r4,r18
100028bc:	18800005 	stb	r2,0(r3)
100028c0:	9544b03a 	or	r2,r18,r21
100028c4:	103ff51e 	bne	r2,zero,1000289c <__alt_data_end+0xf800289c>
100028c8:	d9412817 	ldw	r5,1184(sp)
100028cc:	d8c13115 	stw	r3,1220(sp)
100028d0:	28e3c83a 	sub	r17,r5,r3
100028d4:	003ccb06 	br	10001c04 <__alt_data_end+0xf8001c04>
100028d8:	d8c10e04 	addi	r3,sp,1080
100028dc:	0023883a 	mov	r17,zero
100028e0:	d8c13115 	stw	r3,1220(sp)
100028e4:	003cc706 	br	10001c04 <__alt_data_end+0xf8001c04>
100028e8:	dc012617 	ldw	r16,1176(sp)
100028ec:	0401ab0e 	bge	zero,r16,10002f9c <___vfprintf_internal_r+0x1984>
100028f0:	d8813317 	ldw	r2,1228(sp)
100028f4:	d9413117 	ldw	r5,1220(sp)
100028f8:	d9013417 	ldw	r4,1232(sp)
100028fc:	1023883a 	mov	r17,r2
10002900:	28a1883a 	add	r16,r5,r2
10002904:	2080010e 	bge	r4,r2,1000290c <___vfprintf_internal_r+0x12f4>
10002908:	2023883a 	mov	r17,r4
1000290c:	04400b0e 	bge	zero,r17,1000293c <___vfprintf_internal_r+0x1324>
10002910:	d8811f17 	ldw	r2,1148(sp)
10002914:	d9413117 	ldw	r5,1220(sp)
10002918:	1c47883a 	add	r3,r3,r17
1000291c:	10800044 	addi	r2,r2,1
10002920:	41400015 	stw	r5,0(r8)
10002924:	44400115 	stw	r17,4(r8)
10002928:	d8c12015 	stw	r3,1152(sp)
1000292c:	d8811f15 	stw	r2,1148(sp)
10002930:	010001c4 	movi	r4,7
10002934:	20826716 	blt	r4,r2,100032d4 <___vfprintf_internal_r+0x1cbc>
10002938:	42000204 	addi	r8,r8,8
1000293c:	88026316 	blt	r17,zero,100032cc <___vfprintf_internal_r+0x1cb4>
10002940:	d8813417 	ldw	r2,1232(sp)
10002944:	1463c83a 	sub	r17,r2,r17
10002948:	0440590e 	bge	zero,r17,10002ab0 <___vfprintf_internal_r+0x1498>
1000294c:	04c00404 	movi	r19,16
10002950:	d8811f17 	ldw	r2,1148(sp)
10002954:	9c41770e 	bge	r19,r17,10002f34 <___vfprintf_internal_r+0x191c>
10002958:	01440074 	movhi	r5,4097
1000295c:	2941af84 	addi	r5,r5,1726
10002960:	d9412c15 	stw	r5,1200(sp)
10002964:	054001c4 	movi	r21,7
10002968:	00000306 	br	10002978 <___vfprintf_internal_r+0x1360>
1000296c:	42000204 	addi	r8,r8,8
10002970:	8c7ffc04 	addi	r17,r17,-16
10002974:	9c41720e 	bge	r19,r17,10002f40 <___vfprintf_internal_r+0x1928>
10002978:	18c00404 	addi	r3,r3,16
1000297c:	10800044 	addi	r2,r2,1
10002980:	45000015 	stw	r20,0(r8)
10002984:	44c00115 	stw	r19,4(r8)
10002988:	d8c12015 	stw	r3,1152(sp)
1000298c:	d8811f15 	stw	r2,1148(sp)
10002990:	a8bff60e 	bge	r21,r2,1000296c <__alt_data_end+0xf800296c>
10002994:	b809883a 	mov	r4,r23
10002998:	b00b883a 	mov	r5,r22
1000299c:	d9811e04 	addi	r6,sp,1144
100029a0:	00089200 	call	10008920 <__sprint_r>
100029a4:	103c341e 	bne	r2,zero,10001a78 <__alt_data_end+0xf8001a78>
100029a8:	d8c12017 	ldw	r3,1152(sp)
100029ac:	d8811f17 	ldw	r2,1148(sp)
100029b0:	da000404 	addi	r8,sp,16
100029b4:	003fee06 	br	10002970 <__alt_data_end+0xf8002970>
100029b8:	b809883a 	mov	r4,r23
100029bc:	b00b883a 	mov	r5,r22
100029c0:	d9811e04 	addi	r6,sp,1144
100029c4:	00089200 	call	10008920 <__sprint_r>
100029c8:	103c2b1e 	bne	r2,zero,10001a78 <__alt_data_end+0xf8001a78>
100029cc:	d8c12017 	ldw	r3,1152(sp)
100029d0:	d8812787 	ldb	r2,1182(sp)
100029d4:	da000404 	addi	r8,sp,16
100029d8:	003cce06 	br	10001d14 <__alt_data_end+0xf8001d14>
100029dc:	d8813317 	ldw	r2,1228(sp)
100029e0:	14ffffc4 	addi	r19,r2,-1
100029e4:	04ff630e 	bge	zero,r19,10002774 <__alt_data_end+0xf8002774>
100029e8:	05400404 	movi	r21,16
100029ec:	acc0810e 	bge	r21,r19,10002bf4 <___vfprintf_internal_r+0x15dc>
100029f0:	01440074 	movhi	r5,4097
100029f4:	2941af84 	addi	r5,r5,1726
100029f8:	d9412c15 	stw	r5,1200(sp)
100029fc:	01c001c4 	movi	r7,7
10002a00:	00000306 	br	10002a10 <___vfprintf_internal_r+0x13f8>
10002a04:	8c400204 	addi	r17,r17,8
10002a08:	9cfffc04 	addi	r19,r19,-16
10002a0c:	acc07c0e 	bge	r21,r19,10002c00 <___vfprintf_internal_r+0x15e8>
10002a10:	18c00404 	addi	r3,r3,16
10002a14:	84000044 	addi	r16,r16,1
10002a18:	8d000015 	stw	r20,0(r17)
10002a1c:	8d400115 	stw	r21,4(r17)
10002a20:	d8c12015 	stw	r3,1152(sp)
10002a24:	dc011f15 	stw	r16,1148(sp)
10002a28:	3c3ff60e 	bge	r7,r16,10002a04 <__alt_data_end+0xf8002a04>
10002a2c:	b809883a 	mov	r4,r23
10002a30:	b00b883a 	mov	r5,r22
10002a34:	d9811e04 	addi	r6,sp,1144
10002a38:	d9c13d15 	stw	r7,1268(sp)
10002a3c:	00089200 	call	10008920 <__sprint_r>
10002a40:	d9c13d17 	ldw	r7,1268(sp)
10002a44:	103c0c1e 	bne	r2,zero,10001a78 <__alt_data_end+0xf8001a78>
10002a48:	d8c12017 	ldw	r3,1152(sp)
10002a4c:	dc011f17 	ldw	r16,1148(sp)
10002a50:	dc400404 	addi	r17,sp,16
10002a54:	003fec06 	br	10002a08 <__alt_data_end+0xf8002a08>
10002a58:	00800084 	movi	r2,2
10002a5c:	9546b03a 	or	r3,r18,r21
10002a60:	003d7d06 	br	10002058 <__alt_data_end+0xf8002058>
10002a64:	10803fcc 	andi	r2,r2,255
10002a68:	1080201c 	xori	r2,r2,128
10002a6c:	10bfe004 	addi	r2,r2,-128
10002a70:	01000c04 	movi	r4,48
10002a74:	1101d726 	beq	r2,r4,100031d4 <___vfprintf_internal_r+0x1bbc>
10002a78:	d9413117 	ldw	r5,1220(sp)
10002a7c:	d8812817 	ldw	r2,1184(sp)
10002a80:	193fffc5 	stb	r4,-1(r3)
10002a84:	297fffc4 	addi	r5,r5,-1
10002a88:	d9413115 	stw	r5,1220(sp)
10002a8c:	1163c83a 	sub	r17,r2,r5
10002a90:	003c5c06 	br	10001c04 <__alt_data_end+0xf8001c04>
10002a94:	b809883a 	mov	r4,r23
10002a98:	b00b883a 	mov	r5,r22
10002a9c:	d9811e04 	addi	r6,sp,1144
10002aa0:	00089200 	call	10008920 <__sprint_r>
10002aa4:	103bf41e 	bne	r2,zero,10001a78 <__alt_data_end+0xf8001a78>
10002aa8:	d8c12017 	ldw	r3,1152(sp)
10002aac:	da000404 	addi	r8,sp,16
10002ab0:	d9413117 	ldw	r5,1220(sp)
10002ab4:	d9013417 	ldw	r4,1232(sp)
10002ab8:	d8812617 	ldw	r2,1176(sp)
10002abc:	2923883a 	add	r17,r5,r4
10002ac0:	d9413317 	ldw	r5,1228(sp)
10002ac4:	11400216 	blt	r2,r5,10002ad0 <___vfprintf_internal_r+0x14b8>
10002ac8:	e100004c 	andi	r4,fp,1
10002acc:	20000d26 	beq	r4,zero,10002b04 <___vfprintf_internal_r+0x14ec>
10002ad0:	d9013817 	ldw	r4,1248(sp)
10002ad4:	d9413517 	ldw	r5,1236(sp)
10002ad8:	1907883a 	add	r3,r3,r4
10002adc:	d9011f17 	ldw	r4,1148(sp)
10002ae0:	41400015 	stw	r5,0(r8)
10002ae4:	d9413817 	ldw	r5,1248(sp)
10002ae8:	21000044 	addi	r4,r4,1
10002aec:	d8c12015 	stw	r3,1152(sp)
10002af0:	41400115 	stw	r5,4(r8)
10002af4:	d9011f15 	stw	r4,1148(sp)
10002af8:	014001c4 	movi	r5,7
10002afc:	2901fd16 	blt	r5,r4,100032f4 <___vfprintf_internal_r+0x1cdc>
10002b00:	42000204 	addi	r8,r8,8
10002b04:	d9013317 	ldw	r4,1228(sp)
10002b08:	2085c83a 	sub	r2,r4,r2
10002b0c:	8449c83a 	sub	r4,r16,r17
10002b10:	1021883a 	mov	r16,r2
10002b14:	2080010e 	bge	r4,r2,10002b1c <___vfprintf_internal_r+0x1504>
10002b18:	2021883a 	mov	r16,r4
10002b1c:	04000a0e 	bge	zero,r16,10002b48 <___vfprintf_internal_r+0x1530>
10002b20:	d9011f17 	ldw	r4,1148(sp)
10002b24:	1c07883a 	add	r3,r3,r16
10002b28:	44400015 	stw	r17,0(r8)
10002b2c:	21000044 	addi	r4,r4,1
10002b30:	44000115 	stw	r16,4(r8)
10002b34:	d8c12015 	stw	r3,1152(sp)
10002b38:	d9011f15 	stw	r4,1148(sp)
10002b3c:	014001c4 	movi	r5,7
10002b40:	29020916 	blt	r5,r4,10003368 <___vfprintf_internal_r+0x1d50>
10002b44:	42000204 	addi	r8,r8,8
10002b48:	80020116 	blt	r16,zero,10003350 <___vfprintf_internal_r+0x1d38>
10002b4c:	1421c83a 	sub	r16,r2,r16
10002b50:	043cc40e 	bge	zero,r16,10001e64 <__alt_data_end+0xf8001e64>
10002b54:	04400404 	movi	r17,16
10002b58:	d8811f17 	ldw	r2,1148(sp)
10002b5c:	8c3f110e 	bge	r17,r16,100027a4 <__alt_data_end+0xf80027a4>
10002b60:	01440074 	movhi	r5,4097
10002b64:	2941af84 	addi	r5,r5,1726
10002b68:	d9412c15 	stw	r5,1200(sp)
10002b6c:	04c001c4 	movi	r19,7
10002b70:	00000306 	br	10002b80 <___vfprintf_internal_r+0x1568>
10002b74:	42000204 	addi	r8,r8,8
10002b78:	843ffc04 	addi	r16,r16,-16
10002b7c:	8c3f0c0e 	bge	r17,r16,100027b0 <__alt_data_end+0xf80027b0>
10002b80:	18c00404 	addi	r3,r3,16
10002b84:	10800044 	addi	r2,r2,1
10002b88:	45000015 	stw	r20,0(r8)
10002b8c:	44400115 	stw	r17,4(r8)
10002b90:	d8c12015 	stw	r3,1152(sp)
10002b94:	d8811f15 	stw	r2,1148(sp)
10002b98:	98bff60e 	bge	r19,r2,10002b74 <__alt_data_end+0xf8002b74>
10002b9c:	b809883a 	mov	r4,r23
10002ba0:	b00b883a 	mov	r5,r22
10002ba4:	d9811e04 	addi	r6,sp,1144
10002ba8:	00089200 	call	10008920 <__sprint_r>
10002bac:	103bb21e 	bne	r2,zero,10001a78 <__alt_data_end+0xf8001a78>
10002bb0:	d8c12017 	ldw	r3,1152(sp)
10002bb4:	d8811f17 	ldw	r2,1148(sp)
10002bb8:	da000404 	addi	r8,sp,16
10002bbc:	003fee06 	br	10002b78 <__alt_data_end+0xf8002b78>
10002bc0:	e088703a 	and	r4,fp,r2
10002bc4:	203ec01e 	bne	r4,zero,100026c8 <__alt_data_end+0xf80026c8>
10002bc8:	dc011f17 	ldw	r16,1148(sp)
10002bcc:	d9013117 	ldw	r4,1220(sp)
10002bd0:	40800115 	stw	r2,4(r8)
10002bd4:	84000044 	addi	r16,r16,1
10002bd8:	41000015 	stw	r4,0(r8)
10002bdc:	d8c12015 	stw	r3,1152(sp)
10002be0:	dc011f15 	stw	r16,1148(sp)
10002be4:	008001c4 	movi	r2,7
10002be8:	14000e16 	blt	r2,r16,10002c24 <___vfprintf_internal_r+0x160c>
10002bec:	44400204 	addi	r17,r8,8
10002bf0:	003ee006 	br	10002774 <__alt_data_end+0xf8002774>
10002bf4:	01040074 	movhi	r4,4097
10002bf8:	2101af84 	addi	r4,r4,1726
10002bfc:	d9012c15 	stw	r4,1200(sp)
10002c00:	d8812c17 	ldw	r2,1200(sp)
10002c04:	1cc7883a 	add	r3,r3,r19
10002c08:	84000044 	addi	r16,r16,1
10002c0c:	88800015 	stw	r2,0(r17)
10002c10:	8cc00115 	stw	r19,4(r17)
10002c14:	d8c12015 	stw	r3,1152(sp)
10002c18:	dc011f15 	stw	r16,1148(sp)
10002c1c:	008001c4 	movi	r2,7
10002c20:	143ed30e 	bge	r2,r16,10002770 <__alt_data_end+0xf8002770>
10002c24:	b809883a 	mov	r4,r23
10002c28:	b00b883a 	mov	r5,r22
10002c2c:	d9811e04 	addi	r6,sp,1144
10002c30:	00089200 	call	10008920 <__sprint_r>
10002c34:	103b901e 	bne	r2,zero,10001a78 <__alt_data_end+0xf8001a78>
10002c38:	d8c12017 	ldw	r3,1152(sp)
10002c3c:	dc011f17 	ldw	r16,1148(sp)
10002c40:	dc400404 	addi	r17,sp,16
10002c44:	003ecb06 	br	10002774 <__alt_data_end+0xf8002774>
10002c48:	b809883a 	mov	r4,r23
10002c4c:	b00b883a 	mov	r5,r22
10002c50:	d9811e04 	addi	r6,sp,1144
10002c54:	00089200 	call	10008920 <__sprint_r>
10002c58:	103b871e 	bne	r2,zero,10001a78 <__alt_data_end+0xf8001a78>
10002c5c:	d8c12017 	ldw	r3,1152(sp)
10002c60:	dc011f17 	ldw	r16,1148(sp)
10002c64:	da000404 	addi	r8,sp,16
10002c68:	003ea206 	br	100026f4 <__alt_data_end+0xf80026f4>
10002c6c:	b809883a 	mov	r4,r23
10002c70:	b00b883a 	mov	r5,r22
10002c74:	d9811e04 	addi	r6,sp,1144
10002c78:	00089200 	call	10008920 <__sprint_r>
10002c7c:	103b7e1e 	bne	r2,zero,10001a78 <__alt_data_end+0xf8001a78>
10002c80:	d8c12017 	ldw	r3,1152(sp)
10002c84:	dc011f17 	ldw	r16,1148(sp)
10002c88:	dc400404 	addi	r17,sp,16
10002c8c:	003ea406 	br	10002720 <__alt_data_end+0xf8002720>
10002c90:	b809883a 	mov	r4,r23
10002c94:	b00b883a 	mov	r5,r22
10002c98:	d9811e04 	addi	r6,sp,1144
10002c9c:	00089200 	call	10008920 <__sprint_r>
10002ca0:	103b751e 	bne	r2,zero,10001a78 <__alt_data_end+0xf8001a78>
10002ca4:	d8c12017 	ldw	r3,1152(sp)
10002ca8:	da000404 	addi	r8,sp,16
10002cac:	003c3706 	br	10001d8c <__alt_data_end+0xf8001d8c>
10002cb0:	04a5c83a 	sub	r18,zero,r18
10002cb4:	9004c03a 	cmpne	r2,r18,zero
10002cb8:	056bc83a 	sub	r21,zero,r21
10002cbc:	a8abc83a 	sub	r21,r21,r2
10002cc0:	04c00b44 	movi	r19,45
10002cc4:	dcc12785 	stb	r19,1182(sp)
10002cc8:	da413215 	stw	r9,1224(sp)
10002ccc:	00800044 	movi	r2,1
10002cd0:	9546b03a 	or	r3,r18,r21
10002cd4:	003bb106 	br	10001b9c <__alt_data_end+0xf8001b9c>
10002cd8:	da013f15 	stw	r8,1276(sp)
10002cdc:	da413e15 	stw	r9,1272(sp)
10002ce0:	000857c0 	call	1000857c <__fpclassifyd>
10002ce4:	da013f17 	ldw	r8,1276(sp)
10002ce8:	da413e17 	ldw	r9,1272(sp)
10002cec:	1000e526 	beq	r2,zero,10003084 <___vfprintf_internal_r+0x1a6c>
10002cf0:	04fff7c4 	movi	r19,-33
10002cf4:	00bfffc4 	movi	r2,-1
10002cf8:	84e6703a 	and	r19,r16,r19
10002cfc:	48822926 	beq	r9,r2,100035a4 <___vfprintf_internal_r+0x1f8c>
10002d00:	008011c4 	movi	r2,71
10002d04:	98821626 	beq	r19,r2,10003560 <___vfprintf_internal_r+0x1f48>
10002d08:	d9013917 	ldw	r4,1252(sp)
10002d0c:	e0c04014 	ori	r3,fp,256
10002d10:	d8c12d15 	stw	r3,1204(sp)
10002d14:	20021f16 	blt	r4,zero,10003594 <___vfprintf_internal_r+0x1f7c>
10002d18:	dc413917 	ldw	r17,1252(sp)
10002d1c:	d8012b05 	stb	zero,1196(sp)
10002d20:	00801984 	movi	r2,102
10002d24:	80814d26 	beq	r16,r2,1000325c <___vfprintf_internal_r+0x1c44>
10002d28:	00801184 	movi	r2,70
10002d2c:	80814b26 	beq	r16,r2,1000325c <___vfprintf_internal_r+0x1c44>
10002d30:	00801144 	movi	r2,69
10002d34:	98821d26 	beq	r19,r2,100035ac <___vfprintf_internal_r+0x1f94>
10002d38:	482b883a 	mov	r21,r9
10002d3c:	d8812604 	addi	r2,sp,1176
10002d40:	d8800115 	stw	r2,4(sp)
10002d44:	d9413717 	ldw	r5,1244(sp)
10002d48:	d8812504 	addi	r2,sp,1172
10002d4c:	d8800215 	stw	r2,8(sp)
10002d50:	d8812104 	addi	r2,sp,1156
10002d54:	dd400015 	stw	r21,0(sp)
10002d58:	d8800315 	stw	r2,12(sp)
10002d5c:	b809883a 	mov	r4,r23
10002d60:	880d883a 	mov	r6,r17
10002d64:	01c00084 	movi	r7,2
10002d68:	da013f15 	stw	r8,1276(sp)
10002d6c:	da413e15 	stw	r9,1272(sp)
10002d70:	0003a900 	call	10003a90 <_dtoa_r>
10002d74:	d8813115 	stw	r2,1220(sp)
10002d78:	008019c4 	movi	r2,103
10002d7c:	da013f17 	ldw	r8,1276(sp)
10002d80:	da413e17 	ldw	r9,1272(sp)
10002d84:	80800226 	beq	r16,r2,10002d90 <___vfprintf_internal_r+0x1778>
10002d88:	008011c4 	movi	r2,71
10002d8c:	8081451e 	bne	r16,r2,100032a4 <___vfprintf_internal_r+0x1c8c>
10002d90:	e080004c 	andi	r2,fp,1
10002d94:	10021e26 	beq	r2,zero,10003610 <___vfprintf_internal_r+0x1ff8>
10002d98:	d8c13117 	ldw	r3,1220(sp)
10002d9c:	1d55883a 	add	r10,r3,r21
10002da0:	d9013717 	ldw	r4,1244(sp)
10002da4:	880b883a 	mov	r5,r17
10002da8:	000d883a 	mov	r6,zero
10002dac:	000f883a 	mov	r7,zero
10002db0:	da013f15 	stw	r8,1276(sp)
10002db4:	da413e15 	stw	r9,1272(sp)
10002db8:	da813d15 	stw	r10,1268(sp)
10002dbc:	000c6980 	call	1000c698 <__eqdf2>
10002dc0:	da013f17 	ldw	r8,1276(sp)
10002dc4:	da413e17 	ldw	r9,1272(sp)
10002dc8:	da813d17 	ldw	r10,1268(sp)
10002dcc:	1001a126 	beq	r2,zero,10003454 <___vfprintf_internal_r+0x1e3c>
10002dd0:	d8812117 	ldw	r2,1156(sp)
10002dd4:	1280062e 	bgeu	r2,r10,10002df0 <___vfprintf_internal_r+0x17d8>
10002dd8:	01000c04 	movi	r4,48
10002ddc:	10c00044 	addi	r3,r2,1
10002de0:	d8c12115 	stw	r3,1156(sp)
10002de4:	11000005 	stb	r4,0(r2)
10002de8:	d8812117 	ldw	r2,1156(sp)
10002dec:	12bffb36 	bltu	r2,r10,10002ddc <__alt_data_end+0xf8002ddc>
10002df0:	d8c13117 	ldw	r3,1220(sp)
10002df4:	10c5c83a 	sub	r2,r2,r3
10002df8:	d8813315 	stw	r2,1228(sp)
10002dfc:	008011c4 	movi	r2,71
10002e00:	98818926 	beq	r19,r2,10003428 <___vfprintf_internal_r+0x1e10>
10002e04:	00801944 	movi	r2,101
10002e08:	14023c0e 	bge	r2,r16,100036fc <___vfprintf_internal_r+0x20e4>
10002e0c:	d8c12617 	ldw	r3,1176(sp)
10002e10:	00801984 	movi	r2,102
10002e14:	d8c13415 	stw	r3,1232(sp)
10002e18:	8081ef26 	beq	r16,r2,100035d8 <___vfprintf_internal_r+0x1fc0>
10002e1c:	d8c13417 	ldw	r3,1232(sp)
10002e20:	d9013317 	ldw	r4,1228(sp)
10002e24:	1901e316 	blt	r3,r4,100035b4 <___vfprintf_internal_r+0x1f9c>
10002e28:	e080004c 	andi	r2,fp,1
10002e2c:	1001f426 	beq	r2,zero,10003600 <___vfprintf_internal_r+0x1fe8>
10002e30:	d8c13417 	ldw	r3,1232(sp)
10002e34:	1c400044 	addi	r17,r3,1
10002e38:	8839883a 	mov	fp,r17
10002e3c:	8801e416 	blt	r17,zero,100035d0 <___vfprintf_internal_r+0x1fb8>
10002e40:	dd412b07 	ldb	r21,1196(sp)
10002e44:	a801701e 	bne	r21,zero,10003408 <___vfprintf_internal_r+0x1df0>
10002e48:	df012b15 	stw	fp,1196(sp)
10002e4c:	dcc12783 	ldbu	r19,1182(sp)
10002e50:	df012d17 	ldw	fp,1204(sp)
10002e54:	d8013215 	stw	zero,1224(sp)
10002e58:	dc812d15 	stw	r18,1204(sp)
10002e5c:	003b6e06 	br	10001c18 <__alt_data_end+0xf8001c18>
10002e60:	e080040c 	andi	r2,fp,16
10002e64:	1000b51e 	bne	r2,zero,1000313c <___vfprintf_internal_r+0x1b24>
10002e68:	e080100c 	andi	r2,fp,64
10002e6c:	10015b26 	beq	r2,zero,100033dc <___vfprintf_internal_r+0x1dc4>
10002e70:	d9012d17 	ldw	r4,1204(sp)
10002e74:	d9412f17 	ldw	r5,1212(sp)
10002e78:	20800017 	ldw	r2,0(r4)
10002e7c:	21000104 	addi	r4,r4,4
10002e80:	d9012d15 	stw	r4,1204(sp)
10002e84:	1140000d 	sth	r5,0(r2)
10002e88:	003a2006 	br	1000170c <__alt_data_end+0xf800170c>
10002e8c:	e0c0100c 	andi	r3,fp,64
10002e90:	1800a226 	beq	r3,zero,1000311c <___vfprintf_internal_r+0x1b04>
10002e94:	d8c12d17 	ldw	r3,1204(sp)
10002e98:	1480000b 	ldhu	r18,0(r2)
10002e9c:	002b883a 	mov	r21,zero
10002ea0:	18c00104 	addi	r3,r3,4
10002ea4:	d8c12d15 	stw	r3,1204(sp)
10002ea8:	0005883a 	mov	r2,zero
10002eac:	9007883a 	mov	r3,r18
10002eb0:	003c6906 	br	10002058 <__alt_data_end+0xf8002058>
10002eb4:	e0c0100c 	andi	r3,fp,64
10002eb8:	18009026 	beq	r3,zero,100030fc <___vfprintf_internal_r+0x1ae4>
10002ebc:	1480000b 	ldhu	r18,0(r2)
10002ec0:	d8812d17 	ldw	r2,1204(sp)
10002ec4:	002b883a 	mov	r21,zero
10002ec8:	9007883a 	mov	r3,r18
10002ecc:	10800104 	addi	r2,r2,4
10002ed0:	d8812d15 	stw	r2,1204(sp)
10002ed4:	00800044 	movi	r2,1
10002ed8:	003c5f06 	br	10002058 <__alt_data_end+0xf8002058>
10002edc:	e0c0100c 	andi	r3,fp,64
10002ee0:	18008026 	beq	r3,zero,100030e4 <___vfprintf_internal_r+0x1acc>
10002ee4:	d9012d17 	ldw	r4,1204(sp)
10002ee8:	1480000b 	ldhu	r18,0(r2)
10002eec:	002b883a 	mov	r21,zero
10002ef0:	21000104 	addi	r4,r4,4
10002ef4:	d9012d15 	stw	r4,1204(sp)
10002ef8:	003c7906 	br	100020e0 <__alt_data_end+0xf80020e0>
10002efc:	e080100c 	andi	r2,fp,64
10002f00:	10007126 	beq	r2,zero,100030c8 <___vfprintf_internal_r+0x1ab0>
10002f04:	1c80000f 	ldh	r18,0(r3)
10002f08:	d8812d17 	ldw	r2,1204(sp)
10002f0c:	902bd7fa 	srai	r21,r18,31
10002f10:	10800104 	addi	r2,r2,4
10002f14:	d8812d15 	stw	r2,1204(sp)
10002f18:	a805883a 	mov	r2,r21
10002f1c:	003b1a06 	br	10001b88 <__alt_data_end+0xf8001b88>
10002f20:	e4000007 	ldb	r16,0(fp)
10002f24:	e005883a 	mov	r2,fp
10002f28:	003a2306 	br	100017b8 <__alt_data_end+0xf80017b8>
10002f2c:	00800084 	movi	r2,2
10002f30:	003c4906 	br	10002058 <__alt_data_end+0xf8002058>
10002f34:	01040074 	movhi	r4,4097
10002f38:	2101af84 	addi	r4,r4,1726
10002f3c:	d9012c15 	stw	r4,1200(sp)
10002f40:	d9012c17 	ldw	r4,1200(sp)
10002f44:	1c47883a 	add	r3,r3,r17
10002f48:	10800044 	addi	r2,r2,1
10002f4c:	41000015 	stw	r4,0(r8)
10002f50:	44400115 	stw	r17,4(r8)
10002f54:	d8c12015 	stw	r3,1152(sp)
10002f58:	d8811f15 	stw	r2,1148(sp)
10002f5c:	010001c4 	movi	r4,7
10002f60:	20becc16 	blt	r4,r2,10002a94 <__alt_data_end+0xf8002a94>
10002f64:	42000204 	addi	r8,r8,8
10002f68:	003ed106 	br	10002ab0 <__alt_data_end+0xf8002ab0>
10002f6c:	01040074 	movhi	r4,4097
10002f70:	2101af84 	addi	r4,r4,1726
10002f74:	d9012c15 	stw	r4,1200(sp)
10002f78:	003ba306 	br	10001e08 <__alt_data_end+0xf8001e08>
10002f7c:	b809883a 	mov	r4,r23
10002f80:	b00b883a 	mov	r5,r22
10002f84:	d9811e04 	addi	r6,sp,1144
10002f88:	00089200 	call	10008920 <__sprint_r>
10002f8c:	103aba1e 	bne	r2,zero,10001a78 <__alt_data_end+0xf8001a78>
10002f90:	d8c12017 	ldw	r3,1152(sp)
10002f94:	da000404 	addi	r8,sp,16
10002f98:	003d6c06 	br	1000254c <__alt_data_end+0xf800254c>
10002f9c:	d8811f17 	ldw	r2,1148(sp)
10002fa0:	01440074 	movhi	r5,4097
10002fa4:	01000044 	movi	r4,1
10002fa8:	18c00044 	addi	r3,r3,1
10002fac:	10800044 	addi	r2,r2,1
10002fb0:	2941af04 	addi	r5,r5,1724
10002fb4:	41000115 	stw	r4,4(r8)
10002fb8:	41400015 	stw	r5,0(r8)
10002fbc:	d8c12015 	stw	r3,1152(sp)
10002fc0:	d8811f15 	stw	r2,1148(sp)
10002fc4:	010001c4 	movi	r4,7
10002fc8:	20806716 	blt	r4,r2,10003168 <___vfprintf_internal_r+0x1b50>
10002fcc:	42000204 	addi	r8,r8,8
10002fd0:	8000041e 	bne	r16,zero,10002fe4 <___vfprintf_internal_r+0x19cc>
10002fd4:	d8813317 	ldw	r2,1228(sp)
10002fd8:	1000021e 	bne	r2,zero,10002fe4 <___vfprintf_internal_r+0x19cc>
10002fdc:	e080004c 	andi	r2,fp,1
10002fe0:	103ba026 	beq	r2,zero,10001e64 <__alt_data_end+0xf8001e64>
10002fe4:	d9013817 	ldw	r4,1248(sp)
10002fe8:	d8811f17 	ldw	r2,1148(sp)
10002fec:	d9413517 	ldw	r5,1236(sp)
10002ff0:	1907883a 	add	r3,r3,r4
10002ff4:	10800044 	addi	r2,r2,1
10002ff8:	41000115 	stw	r4,4(r8)
10002ffc:	41400015 	stw	r5,0(r8)
10003000:	d8c12015 	stw	r3,1152(sp)
10003004:	d8811f15 	stw	r2,1148(sp)
10003008:	010001c4 	movi	r4,7
1000300c:	20815716 	blt	r4,r2,1000356c <___vfprintf_internal_r+0x1f54>
10003010:	42000204 	addi	r8,r8,8
10003014:	0421c83a 	sub	r16,zero,r16
10003018:	0400810e 	bge	zero,r16,10003220 <___vfprintf_internal_r+0x1c08>
1000301c:	04400404 	movi	r17,16
10003020:	8c00bd0e 	bge	r17,r16,10003318 <___vfprintf_internal_r+0x1d00>
10003024:	01440074 	movhi	r5,4097
10003028:	2941af84 	addi	r5,r5,1726
1000302c:	d9412c15 	stw	r5,1200(sp)
10003030:	04c001c4 	movi	r19,7
10003034:	00000306 	br	10003044 <___vfprintf_internal_r+0x1a2c>
10003038:	42000204 	addi	r8,r8,8
1000303c:	843ffc04 	addi	r16,r16,-16
10003040:	8c00b80e 	bge	r17,r16,10003324 <___vfprintf_internal_r+0x1d0c>
10003044:	18c00404 	addi	r3,r3,16
10003048:	10800044 	addi	r2,r2,1
1000304c:	45000015 	stw	r20,0(r8)
10003050:	44400115 	stw	r17,4(r8)
10003054:	d8c12015 	stw	r3,1152(sp)
10003058:	d8811f15 	stw	r2,1148(sp)
1000305c:	98bff60e 	bge	r19,r2,10003038 <__alt_data_end+0xf8003038>
10003060:	b809883a 	mov	r4,r23
10003064:	b00b883a 	mov	r5,r22
10003068:	d9811e04 	addi	r6,sp,1144
1000306c:	00089200 	call	10008920 <__sprint_r>
10003070:	103a811e 	bne	r2,zero,10001a78 <__alt_data_end+0xf8001a78>
10003074:	d8c12017 	ldw	r3,1152(sp)
10003078:	d8811f17 	ldw	r2,1148(sp)
1000307c:	da000404 	addi	r8,sp,16
10003080:	003fee06 	br	1000303c <__alt_data_end+0xf800303c>
10003084:	008011c4 	movi	r2,71
10003088:	1400db16 	blt	r2,r16,100033f8 <___vfprintf_internal_r+0x1de0>
1000308c:	01040074 	movhi	r4,4097
10003090:	2101a104 	addi	r4,r4,1668
10003094:	d9013115 	stw	r4,1220(sp)
10003098:	00c000c4 	movi	r3,3
1000309c:	00bfdfc4 	movi	r2,-129
100030a0:	d8c12b15 	stw	r3,1196(sp)
100030a4:	e0b8703a 	and	fp,fp,r2
100030a8:	dcc12783 	ldbu	r19,1182(sp)
100030ac:	dc812d15 	stw	r18,1204(sp)
100030b0:	1823883a 	mov	r17,r3
100030b4:	d8013215 	stw	zero,1224(sp)
100030b8:	d8013415 	stw	zero,1232(sp)
100030bc:	003ad606 	br	10001c18 <__alt_data_end+0xf8001c18>
100030c0:	4823883a 	mov	r17,r9
100030c4:	003cc906 	br	100023ec <__alt_data_end+0xf80023ec>
100030c8:	1c800017 	ldw	r18,0(r3)
100030cc:	d8c12d17 	ldw	r3,1204(sp)
100030d0:	902bd7fa 	srai	r21,r18,31
100030d4:	18c00104 	addi	r3,r3,4
100030d8:	d8c12d15 	stw	r3,1204(sp)
100030dc:	a805883a 	mov	r2,r21
100030e0:	003aa906 	br	10001b88 <__alt_data_end+0xf8001b88>
100030e4:	d9412d17 	ldw	r5,1204(sp)
100030e8:	14800017 	ldw	r18,0(r2)
100030ec:	002b883a 	mov	r21,zero
100030f0:	29400104 	addi	r5,r5,4
100030f4:	d9412d15 	stw	r5,1204(sp)
100030f8:	003bf906 	br	100020e0 <__alt_data_end+0xf80020e0>
100030fc:	d8c12d17 	ldw	r3,1204(sp)
10003100:	14800017 	ldw	r18,0(r2)
10003104:	002b883a 	mov	r21,zero
10003108:	18c00104 	addi	r3,r3,4
1000310c:	d8c12d15 	stw	r3,1204(sp)
10003110:	00800044 	movi	r2,1
10003114:	9007883a 	mov	r3,r18
10003118:	003bcf06 	br	10002058 <__alt_data_end+0xf8002058>
1000311c:	d9012d17 	ldw	r4,1204(sp)
10003120:	14800017 	ldw	r18,0(r2)
10003124:	002b883a 	mov	r21,zero
10003128:	21000104 	addi	r4,r4,4
1000312c:	d9012d15 	stw	r4,1204(sp)
10003130:	0005883a 	mov	r2,zero
10003134:	9007883a 	mov	r3,r18
10003138:	003bc706 	br	10002058 <__alt_data_end+0xf8002058>
1000313c:	d9412d17 	ldw	r5,1204(sp)
10003140:	d8c12f17 	ldw	r3,1212(sp)
10003144:	28800017 	ldw	r2,0(r5)
10003148:	29400104 	addi	r5,r5,4
1000314c:	d9412d15 	stw	r5,1204(sp)
10003150:	10c00015 	stw	r3,0(r2)
10003154:	00396d06 	br	1000170c <__alt_data_end+0xf800170c>
10003158:	01040074 	movhi	r4,4097
1000315c:	21019f04 	addi	r4,r4,1660
10003160:	d9013115 	stw	r4,1220(sp)
10003164:	003ba206 	br	10001ff0 <__alt_data_end+0xf8001ff0>
10003168:	b809883a 	mov	r4,r23
1000316c:	b00b883a 	mov	r5,r22
10003170:	d9811e04 	addi	r6,sp,1144
10003174:	00089200 	call	10008920 <__sprint_r>
10003178:	103a3f1e 	bne	r2,zero,10001a78 <__alt_data_end+0xf8001a78>
1000317c:	dc012617 	ldw	r16,1176(sp)
10003180:	d8c12017 	ldw	r3,1152(sp)
10003184:	da000404 	addi	r8,sp,16
10003188:	003f9106 	br	10002fd0 <__alt_data_end+0xf8002fd0>
1000318c:	e0800044 	addi	r2,fp,1
10003190:	9cc00814 	ori	r19,r19,32
10003194:	e4000047 	ldb	r16,1(fp)
10003198:	00398706 	br	100017b8 <__alt_data_end+0xf80017b8>
1000319c:	d8812e17 	ldw	r2,1208(sp)
100031a0:	d8c12d15 	stw	r3,1204(sp)
100031a4:	0085c83a 	sub	r2,zero,r2
100031a8:	d8812e15 	stw	r2,1208(sp)
100031ac:	e005883a 	mov	r2,fp
100031b0:	003a3a06 	br	10001a9c <__alt_data_end+0xf8001a9c>
100031b4:	b809883a 	mov	r4,r23
100031b8:	b00b883a 	mov	r5,r22
100031bc:	d9811e04 	addi	r6,sp,1144
100031c0:	00089200 	call	10008920 <__sprint_r>
100031c4:	103a2c1e 	bne	r2,zero,10001a78 <__alt_data_end+0xf8001a78>
100031c8:	d8c12017 	ldw	r3,1152(sp)
100031cc:	da000404 	addi	r8,sp,16
100031d0:	003cf006 	br	10002594 <__alt_data_end+0xf8002594>
100031d4:	d8c12817 	ldw	r3,1184(sp)
100031d8:	d9013117 	ldw	r4,1220(sp)
100031dc:	1923c83a 	sub	r17,r3,r4
100031e0:	003a8806 	br	10001c04 <__alt_data_end+0xf8001c04>
100031e4:	da013f15 	stw	r8,1276(sp)
100031e8:	00015800 	call	10001580 <strlen>
100031ec:	1023883a 	mov	r17,r2
100031f0:	da013f17 	ldw	r8,1276(sp)
100031f4:	883c7f0e 	bge	r17,zero,100023f4 <__alt_data_end+0xf80023f4>
100031f8:	0005883a 	mov	r2,zero
100031fc:	003c7d06 	br	100023f4 <__alt_data_end+0xf80023f4>
10003200:	b809883a 	mov	r4,r23
10003204:	b00b883a 	mov	r5,r22
10003208:	d9811e04 	addi	r6,sp,1144
1000320c:	00089200 	call	10008920 <__sprint_r>
10003210:	103a191e 	bne	r2,zero,10001a78 <__alt_data_end+0xf8001a78>
10003214:	d8c12017 	ldw	r3,1152(sp)
10003218:	d8811f17 	ldw	r2,1148(sp)
1000321c:	da000404 	addi	r8,sp,16
10003220:	d9413317 	ldw	r5,1228(sp)
10003224:	d9013117 	ldw	r4,1220(sp)
10003228:	10800044 	addi	r2,r2,1
1000322c:	28c7883a 	add	r3,r5,r3
10003230:	41000015 	stw	r4,0(r8)
10003234:	41400115 	stw	r5,4(r8)
10003238:	d8c12015 	stw	r3,1152(sp)
1000323c:	d8811f15 	stw	r2,1148(sp)
10003240:	010001c4 	movi	r4,7
10003244:	20bb060e 	bge	r4,r2,10001e60 <__alt_data_end+0xf8001e60>
10003248:	003d6206 	br	100027d4 <__alt_data_end+0xf80027d4>
1000324c:	01040074 	movhi	r4,4097
10003250:	2101b384 	addi	r4,r4,1742
10003254:	d9013615 	stw	r4,1240(sp)
10003258:	003aa306 	br	10001ce8 <__alt_data_end+0xf8001ce8>
1000325c:	d8812604 	addi	r2,sp,1176
10003260:	d8800115 	stw	r2,4(sp)
10003264:	d9413717 	ldw	r5,1244(sp)
10003268:	d8812504 	addi	r2,sp,1172
1000326c:	d8800215 	stw	r2,8(sp)
10003270:	d8812104 	addi	r2,sp,1156
10003274:	da400015 	stw	r9,0(sp)
10003278:	d8800315 	stw	r2,12(sp)
1000327c:	b809883a 	mov	r4,r23
10003280:	880d883a 	mov	r6,r17
10003284:	01c000c4 	movi	r7,3
10003288:	da013f15 	stw	r8,1276(sp)
1000328c:	da413e15 	stw	r9,1272(sp)
10003290:	0003a900 	call	10003a90 <_dtoa_r>
10003294:	da413e17 	ldw	r9,1272(sp)
10003298:	da013f17 	ldw	r8,1276(sp)
1000329c:	d8813115 	stw	r2,1220(sp)
100032a0:	482b883a 	mov	r21,r9
100032a4:	d8c13117 	ldw	r3,1220(sp)
100032a8:	00801184 	movi	r2,70
100032ac:	1d55883a 	add	r10,r3,r21
100032b0:	98bebb1e 	bne	r19,r2,10002da0 <__alt_data_end+0xf8002da0>
100032b4:	19000007 	ldb	r4,0(r3)
100032b8:	00800c04 	movi	r2,48
100032bc:	2080dd26 	beq	r4,r2,10003634 <___vfprintf_internal_r+0x201c>
100032c0:	d8c12617 	ldw	r3,1176(sp)
100032c4:	50d5883a 	add	r10,r10,r3
100032c8:	003eb506 	br	10002da0 <__alt_data_end+0xf8002da0>
100032cc:	0023883a 	mov	r17,zero
100032d0:	003d9b06 	br	10002940 <__alt_data_end+0xf8002940>
100032d4:	b809883a 	mov	r4,r23
100032d8:	b00b883a 	mov	r5,r22
100032dc:	d9811e04 	addi	r6,sp,1144
100032e0:	00089200 	call	10008920 <__sprint_r>
100032e4:	1039e41e 	bne	r2,zero,10001a78 <__alt_data_end+0xf8001a78>
100032e8:	d8c12017 	ldw	r3,1152(sp)
100032ec:	da000404 	addi	r8,sp,16
100032f0:	003d9206 	br	1000293c <__alt_data_end+0xf800293c>
100032f4:	b809883a 	mov	r4,r23
100032f8:	b00b883a 	mov	r5,r22
100032fc:	d9811e04 	addi	r6,sp,1144
10003300:	00089200 	call	10008920 <__sprint_r>
10003304:	1039dc1e 	bne	r2,zero,10001a78 <__alt_data_end+0xf8001a78>
10003308:	d8812617 	ldw	r2,1176(sp)
1000330c:	d8c12017 	ldw	r3,1152(sp)
10003310:	da000404 	addi	r8,sp,16
10003314:	003dfb06 	br	10002b04 <__alt_data_end+0xf8002b04>
10003318:	01040074 	movhi	r4,4097
1000331c:	2101af84 	addi	r4,r4,1726
10003320:	d9012c15 	stw	r4,1200(sp)
10003324:	d9012c17 	ldw	r4,1200(sp)
10003328:	1c07883a 	add	r3,r3,r16
1000332c:	10800044 	addi	r2,r2,1
10003330:	41000015 	stw	r4,0(r8)
10003334:	44000115 	stw	r16,4(r8)
10003338:	d8c12015 	stw	r3,1152(sp)
1000333c:	d8811f15 	stw	r2,1148(sp)
10003340:	010001c4 	movi	r4,7
10003344:	20bfae16 	blt	r4,r2,10003200 <__alt_data_end+0xf8003200>
10003348:	42000204 	addi	r8,r8,8
1000334c:	003fb406 	br	10003220 <__alt_data_end+0xf8003220>
10003350:	0021883a 	mov	r16,zero
10003354:	003dfd06 	br	10002b4c <__alt_data_end+0xf8002b4c>
10003358:	01440074 	movhi	r5,4097
1000335c:	2941b384 	addi	r5,r5,1742
10003360:	d9413615 	stw	r5,1240(sp)
10003364:	003ae306 	br	10001ef4 <__alt_data_end+0xf8001ef4>
10003368:	b809883a 	mov	r4,r23
1000336c:	b00b883a 	mov	r5,r22
10003370:	d9811e04 	addi	r6,sp,1144
10003374:	00089200 	call	10008920 <__sprint_r>
10003378:	1039bf1e 	bne	r2,zero,10001a78 <__alt_data_end+0xf8001a78>
1000337c:	d8812617 	ldw	r2,1176(sp)
10003380:	d9413317 	ldw	r5,1228(sp)
10003384:	d8c12017 	ldw	r3,1152(sp)
10003388:	da000404 	addi	r8,sp,16
1000338c:	2885c83a 	sub	r2,r5,r2
10003390:	003ded06 	br	10002b48 <__alt_data_end+0xf8002b48>
10003394:	00800184 	movi	r2,6
10003398:	1240012e 	bgeu	r2,r9,100033a0 <___vfprintf_internal_r+0x1d88>
1000339c:	1013883a 	mov	r9,r2
100033a0:	4823883a 	mov	r17,r9
100033a4:	4805883a 	mov	r2,r9
100033a8:	4800b216 	blt	r9,zero,10003674 <___vfprintf_internal_r+0x205c>
100033ac:	01440074 	movhi	r5,4097
100033b0:	2941ad04 	addi	r5,r5,1716
100033b4:	d8812b15 	stw	r2,1196(sp)
100033b8:	dc812d15 	stw	r18,1204(sp)
100033bc:	d8013215 	stw	zero,1224(sp)
100033c0:	d8013415 	stw	zero,1232(sp)
100033c4:	d9413115 	stw	r5,1220(sp)
100033c8:	0005883a 	mov	r2,zero
100033cc:	003a1906 	br	10001c34 <__alt_data_end+0xf8001c34>
100033d0:	04c00b44 	movi	r19,45
100033d4:	dcc12785 	stb	r19,1182(sp)
100033d8:	003b0006 	br	10001fdc <__alt_data_end+0xf8001fdc>
100033dc:	d8c12d17 	ldw	r3,1204(sp)
100033e0:	d9012f17 	ldw	r4,1212(sp)
100033e4:	18800017 	ldw	r2,0(r3)
100033e8:	18c00104 	addi	r3,r3,4
100033ec:	d8c12d15 	stw	r3,1204(sp)
100033f0:	11000015 	stw	r4,0(r2)
100033f4:	0038c506 	br	1000170c <__alt_data_end+0xf800170c>
100033f8:	01440074 	movhi	r5,4097
100033fc:	2941a204 	addi	r5,r5,1672
10003400:	d9413115 	stw	r5,1220(sp)
10003404:	003f2406 	br	10003098 <__alt_data_end+0xf8003098>
10003408:	00800b44 	movi	r2,45
1000340c:	d8812785 	stb	r2,1182(sp)
10003410:	df012b15 	stw	fp,1196(sp)
10003414:	d8013215 	stw	zero,1224(sp)
10003418:	df012d17 	ldw	fp,1204(sp)
1000341c:	00800b44 	movi	r2,45
10003420:	dc812d15 	stw	r18,1204(sp)
10003424:	003a0006 	br	10001c28 <__alt_data_end+0xf8001c28>
10003428:	d8c12617 	ldw	r3,1176(sp)
1000342c:	00bfff44 	movi	r2,-3
10003430:	18800a16 	blt	r3,r2,1000345c <___vfprintf_internal_r+0x1e44>
10003434:	48c00916 	blt	r9,r3,1000345c <___vfprintf_internal_r+0x1e44>
10003438:	d8c13415 	stw	r3,1232(sp)
1000343c:	040019c4 	movi	r16,103
10003440:	003e7606 	br	10002e1c <__alt_data_end+0xf8002e1c>
10003444:	01040074 	movhi	r4,4097
10003448:	2101af84 	addi	r4,r4,1726
1000344c:	d9012c15 	stw	r4,1200(sp)
10003450:	003c8e06 	br	1000268c <__alt_data_end+0xf800268c>
10003454:	5005883a 	mov	r2,r10
10003458:	003e6506 	br	10002df0 <__alt_data_end+0xf8002df0>
1000345c:	843fff84 	addi	r16,r16,-2
10003460:	1d7fffc4 	addi	r21,r3,-1
10003464:	dd412615 	stw	r21,1176(sp)
10003468:	dc0122c5 	stb	r16,1163(sp)
1000346c:	a8009216 	blt	r21,zero,100036b8 <___vfprintf_internal_r+0x20a0>
10003470:	00800ac4 	movi	r2,43
10003474:	d8812305 	stb	r2,1164(sp)
10003478:	00800244 	movi	r2,9
1000347c:	1540660e 	bge	r2,r21,10003618 <___vfprintf_internal_r+0x2000>
10003480:	dcc122c4 	addi	r19,sp,1163
10003484:	dc012c15 	stw	r16,1200(sp)
10003488:	4023883a 	mov	r17,r8
1000348c:	9821883a 	mov	r16,r19
10003490:	a809883a 	mov	r4,r21
10003494:	01400284 	movi	r5,10
10003498:	000b3e80 	call	1000b3e8 <__modsi3>
1000349c:	10800c04 	addi	r2,r2,48
100034a0:	843fffc4 	addi	r16,r16,-1
100034a4:	a809883a 	mov	r4,r21
100034a8:	01400284 	movi	r5,10
100034ac:	80800005 	stb	r2,0(r16)
100034b0:	000b3940 	call	1000b394 <__divsi3>
100034b4:	01000244 	movi	r4,9
100034b8:	102b883a 	mov	r21,r2
100034bc:	20bff416 	blt	r4,r2,10003490 <__alt_data_end+0xf8003490>
100034c0:	8811883a 	mov	r8,r17
100034c4:	10800c04 	addi	r2,r2,48
100034c8:	8023883a 	mov	r17,r16
100034cc:	897fffc4 	addi	r5,r17,-1
100034d0:	88bfffc5 	stb	r2,-1(r17)
100034d4:	dc012c17 	ldw	r16,1200(sp)
100034d8:	2cc08a2e 	bgeu	r5,r19,10003704 <___vfprintf_internal_r+0x20ec>
100034dc:	d9812384 	addi	r6,sp,1166
100034e0:	344dc83a 	sub	r6,r6,r17
100034e4:	d9012344 	addi	r4,sp,1165
100034e8:	998d883a 	add	r6,r19,r6
100034ec:	00000106 	br	100034f4 <___vfprintf_internal_r+0x1edc>
100034f0:	28800003 	ldbu	r2,0(r5)
100034f4:	20800005 	stb	r2,0(r4)
100034f8:	21000044 	addi	r4,r4,1
100034fc:	29400044 	addi	r5,r5,1
10003500:	21bffb1e 	bne	r4,r6,100034f0 <__alt_data_end+0xf80034f0>
10003504:	d8812304 	addi	r2,sp,1164
10003508:	1445c83a 	sub	r2,r2,r17
1000350c:	d9412344 	addi	r5,sp,1165
10003510:	2885883a 	add	r2,r5,r2
10003514:	14e7c83a 	sub	r19,r2,r19
10003518:	d8813317 	ldw	r2,1228(sp)
1000351c:	d8c13317 	ldw	r3,1228(sp)
10003520:	dcc13a15 	stw	r19,1256(sp)
10003524:	14e3883a 	add	r17,r2,r19
10003528:	00800044 	movi	r2,1
1000352c:	10c0550e 	bge	r2,r3,10003684 <___vfprintf_internal_r+0x206c>
10003530:	8c400044 	addi	r17,r17,1
10003534:	8839883a 	mov	fp,r17
10003538:	88005016 	blt	r17,zero,1000367c <___vfprintf_internal_r+0x2064>
1000353c:	d8013415 	stw	zero,1232(sp)
10003540:	003e3f06 	br	10002e40 <__alt_data_end+0xf8002e40>
10003544:	da412b15 	stw	r9,1196(sp)
10003548:	dcc12783 	ldbu	r19,1182(sp)
1000354c:	4823883a 	mov	r17,r9
10003550:	dc812d15 	stw	r18,1204(sp)
10003554:	d8013215 	stw	zero,1224(sp)
10003558:	d8013415 	stw	zero,1232(sp)
1000355c:	0039ae06 	br	10001c18 <__alt_data_end+0xf8001c18>
10003560:	483de91e 	bne	r9,zero,10002d08 <__alt_data_end+0xf8002d08>
10003564:	8813883a 	mov	r9,r17
10003568:	003de706 	br	10002d08 <__alt_data_end+0xf8002d08>
1000356c:	b809883a 	mov	r4,r23
10003570:	b00b883a 	mov	r5,r22
10003574:	d9811e04 	addi	r6,sp,1144
10003578:	00089200 	call	10008920 <__sprint_r>
1000357c:	10393e1e 	bne	r2,zero,10001a78 <__alt_data_end+0xf8001a78>
10003580:	dc012617 	ldw	r16,1176(sp)
10003584:	d8c12017 	ldw	r3,1152(sp)
10003588:	d8811f17 	ldw	r2,1148(sp)
1000358c:	da000404 	addi	r8,sp,16
10003590:	003ea006 	br	10003014 <__alt_data_end+0xf8003014>
10003594:	00c00b44 	movi	r3,45
10003598:	2460003c 	xorhi	r17,r4,32768
1000359c:	d8c12b05 	stb	r3,1196(sp)
100035a0:	003ddf06 	br	10002d20 <__alt_data_end+0xf8002d20>
100035a4:	02400184 	movi	r9,6
100035a8:	003dd706 	br	10002d08 <__alt_data_end+0xf8002d08>
100035ac:	4d400044 	addi	r21,r9,1
100035b0:	003de206 	br	10002d3c <__alt_data_end+0xf8002d3c>
100035b4:	d8c13417 	ldw	r3,1232(sp)
100035b8:	00c0490e 	bge	zero,r3,100036e0 <___vfprintf_internal_r+0x20c8>
100035bc:	04400044 	movi	r17,1
100035c0:	d9013317 	ldw	r4,1228(sp)
100035c4:	8923883a 	add	r17,r17,r4
100035c8:	8839883a 	mov	fp,r17
100035cc:	883e1c0e 	bge	r17,zero,10002e40 <__alt_data_end+0xf8002e40>
100035d0:	0039883a 	mov	fp,zero
100035d4:	003e1a06 	br	10002e40 <__alt_data_end+0xf8002e40>
100035d8:	00c03b0e 	bge	zero,r3,100036c8 <___vfprintf_internal_r+0x20b0>
100035dc:	4800021e 	bne	r9,zero,100035e8 <___vfprintf_internal_r+0x1fd0>
100035e0:	e080004c 	andi	r2,fp,1
100035e4:	10000626 	beq	r2,zero,10003600 <___vfprintf_internal_r+0x1fe8>
100035e8:	d8c13417 	ldw	r3,1232(sp)
100035ec:	4a400044 	addi	r9,r9,1
100035f0:	1a63883a 	add	r17,r3,r9
100035f4:	8839883a 	mov	fp,r17
100035f8:	883e110e 	bge	r17,zero,10002e40 <__alt_data_end+0xf8002e40>
100035fc:	003ff406 	br	100035d0 <__alt_data_end+0xf80035d0>
10003600:	1839883a 	mov	fp,r3
10003604:	18004116 	blt	r3,zero,1000370c <___vfprintf_internal_r+0x20f4>
10003608:	dc413417 	ldw	r17,1232(sp)
1000360c:	003e0c06 	br	10002e40 <__alt_data_end+0xf8002e40>
10003610:	d8812117 	ldw	r2,1156(sp)
10003614:	003df606 	br	10002df0 <__alt_data_end+0xf8002df0>
10003618:	00800c04 	movi	r2,48
1000361c:	a8c00c04 	addi	r3,r21,48
10003620:	d8812345 	stb	r2,1165(sp)
10003624:	d8c12385 	stb	r3,1166(sp)
10003628:	d88123c4 	addi	r2,sp,1167
1000362c:	dcc122c4 	addi	r19,sp,1163
10003630:	003fb806 	br	10003514 <__alt_data_end+0xf8003514>
10003634:	d9013717 	ldw	r4,1244(sp)
10003638:	880b883a 	mov	r5,r17
1000363c:	000d883a 	mov	r6,zero
10003640:	000f883a 	mov	r7,zero
10003644:	da013f15 	stw	r8,1276(sp)
10003648:	da413e15 	stw	r9,1272(sp)
1000364c:	da813d15 	stw	r10,1268(sp)
10003650:	000c6980 	call	1000c698 <__eqdf2>
10003654:	da013f17 	ldw	r8,1276(sp)
10003658:	da413e17 	ldw	r9,1272(sp)
1000365c:	da813d17 	ldw	r10,1268(sp)
10003660:	103f1726 	beq	r2,zero,100032c0 <__alt_data_end+0xf80032c0>
10003664:	00800044 	movi	r2,1
10003668:	1547c83a 	sub	r3,r2,r21
1000366c:	d8c12615 	stw	r3,1176(sp)
10003670:	003f1406 	br	100032c4 <__alt_data_end+0xf80032c4>
10003674:	0005883a 	mov	r2,zero
10003678:	003f4c06 	br	100033ac <__alt_data_end+0xf80033ac>
1000367c:	0039883a 	mov	fp,zero
10003680:	003fae06 	br	1000353c <__alt_data_end+0xf800353c>
10003684:	e084703a 	and	r2,fp,r2
10003688:	103faa26 	beq	r2,zero,10003534 <__alt_data_end+0xf8003534>
1000368c:	003fa806 	br	10003530 <__alt_data_end+0xf8003530>
10003690:	d9412d17 	ldw	r5,1204(sp)
10003694:	2a400017 	ldw	r9,0(r5)
10003698:	28c00104 	addi	r3,r5,4
1000369c:	d8c12d15 	stw	r3,1204(sp)
100036a0:	483ebc0e 	bge	r9,zero,10003194 <__alt_data_end+0xf8003194>
100036a4:	027fffc4 	movi	r9,-1
100036a8:	e4000047 	ldb	r16,1(fp)
100036ac:	00384206 	br	100017b8 <__alt_data_end+0xf80017b8>
100036b0:	043fffc4 	movi	r16,-1
100036b4:	0038ce06 	br	100019f0 <__alt_data_end+0xf80019f0>
100036b8:	00800b44 	movi	r2,45
100036bc:	056bc83a 	sub	r21,zero,r21
100036c0:	d8812305 	stb	r2,1164(sp)
100036c4:	003f6c06 	br	10003478 <__alt_data_end+0xf8003478>
100036c8:	4800081e 	bne	r9,zero,100036ec <___vfprintf_internal_r+0x20d4>
100036cc:	e080004c 	andi	r2,fp,1
100036d0:	1000061e 	bne	r2,zero,100036ec <___vfprintf_internal_r+0x20d4>
100036d4:	07000044 	movi	fp,1
100036d8:	e023883a 	mov	r17,fp
100036dc:	003dd806 	br	10002e40 <__alt_data_end+0xf8002e40>
100036e0:	04400084 	movi	r17,2
100036e4:	88e3c83a 	sub	r17,r17,r3
100036e8:	003fb506 	br	100035c0 <__alt_data_end+0xf80035c0>
100036ec:	4c400084 	addi	r17,r9,2
100036f0:	8839883a 	mov	fp,r17
100036f4:	883dd20e 	bge	r17,zero,10002e40 <__alt_data_end+0xf8002e40>
100036f8:	003fb506 	br	100035d0 <__alt_data_end+0xf80035d0>
100036fc:	d8c12617 	ldw	r3,1176(sp)
10003700:	003f5706 	br	10003460 <__alt_data_end+0xf8003460>
10003704:	d8812344 	addi	r2,sp,1165
10003708:	003f8206 	br	10003514 <__alt_data_end+0xf8003514>
1000370c:	0039883a 	mov	fp,zero
10003710:	003fbd06 	br	10003608 <__alt_data_end+0xf8003608>

10003714 <__vfprintf_internal>:
10003714:	2007883a 	mov	r3,r4
10003718:	01040074 	movhi	r4,4097
1000371c:	210a9904 	addi	r4,r4,10852
10003720:	21000017 	ldw	r4,0(r4)
10003724:	2805883a 	mov	r2,r5
10003728:	300f883a 	mov	r7,r6
1000372c:	180b883a 	mov	r5,r3
10003730:	100d883a 	mov	r6,r2
10003734:	00016181 	jmpi	10001618 <___vfprintf_internal_r>

10003738 <__swsetup_r>:
10003738:	00840074 	movhi	r2,4097
1000373c:	defffd04 	addi	sp,sp,-12
10003740:	108a9904 	addi	r2,r2,10852
10003744:	dc400115 	stw	r17,4(sp)
10003748:	2023883a 	mov	r17,r4
1000374c:	11000017 	ldw	r4,0(r2)
10003750:	dc000015 	stw	r16,0(sp)
10003754:	dfc00215 	stw	ra,8(sp)
10003758:	2821883a 	mov	r16,r5
1000375c:	20000226 	beq	r4,zero,10003768 <__swsetup_r+0x30>
10003760:	20c00e17 	ldw	r3,56(r4)
10003764:	18002e26 	beq	r3,zero,10003820 <__swsetup_r+0xe8>
10003768:	8080030b 	ldhu	r2,12(r16)
1000376c:	10c0020c 	andi	r3,r2,8
10003770:	100d883a 	mov	r6,r2
10003774:	18000f26 	beq	r3,zero,100037b4 <__swsetup_r+0x7c>
10003778:	80c00417 	ldw	r3,16(r16)
1000377c:	18001526 	beq	r3,zero,100037d4 <__swsetup_r+0x9c>
10003780:	1100004c 	andi	r4,r2,1
10003784:	20001c1e 	bne	r4,zero,100037f8 <__swsetup_r+0xc0>
10003788:	1080008c 	andi	r2,r2,2
1000378c:	1000261e 	bne	r2,zero,10003828 <__swsetup_r+0xf0>
10003790:	80800517 	ldw	r2,20(r16)
10003794:	80800215 	stw	r2,8(r16)
10003798:	18001c26 	beq	r3,zero,1000380c <__swsetup_r+0xd4>
1000379c:	0005883a 	mov	r2,zero
100037a0:	dfc00217 	ldw	ra,8(sp)
100037a4:	dc400117 	ldw	r17,4(sp)
100037a8:	dc000017 	ldw	r16,0(sp)
100037ac:	dec00304 	addi	sp,sp,12
100037b0:	f800283a 	ret
100037b4:	3080040c 	andi	r2,r6,16
100037b8:	10001726 	beq	r2,zero,10003818 <__swsetup_r+0xe0>
100037bc:	3080010c 	andi	r2,r6,4
100037c0:	10001b1e 	bne	r2,zero,10003830 <__swsetup_r+0xf8>
100037c4:	80c00417 	ldw	r3,16(r16)
100037c8:	30800214 	ori	r2,r6,8
100037cc:	8080030d 	sth	r2,12(r16)
100037d0:	183feb1e 	bne	r3,zero,10003780 <__alt_data_end+0xf8003780>
100037d4:	1140a00c 	andi	r5,r2,640
100037d8:	01008004 	movi	r4,512
100037dc:	293fe826 	beq	r5,r4,10003780 <__alt_data_end+0xf8003780>
100037e0:	8809883a 	mov	r4,r17
100037e4:	800b883a 	mov	r5,r16
100037e8:	00062cc0 	call	100062cc <__smakebuf_r>
100037ec:	8080030b 	ldhu	r2,12(r16)
100037f0:	80c00417 	ldw	r3,16(r16)
100037f4:	003fe206 	br	10003780 <__alt_data_end+0xf8003780>
100037f8:	80800517 	ldw	r2,20(r16)
100037fc:	80000215 	stw	zero,8(r16)
10003800:	0085c83a 	sub	r2,zero,r2
10003804:	80800615 	stw	r2,24(r16)
10003808:	183fe41e 	bne	r3,zero,1000379c <__alt_data_end+0xf800379c>
1000380c:	8080030b 	ldhu	r2,12(r16)
10003810:	1080200c 	andi	r2,r2,128
10003814:	103fe226 	beq	r2,zero,100037a0 <__alt_data_end+0xf80037a0>
10003818:	00bfffc4 	movi	r2,-1
1000381c:	003fe006 	br	100037a0 <__alt_data_end+0xf80037a0>
10003820:	00057740 	call	10005774 <__sinit>
10003824:	003fd006 	br	10003768 <__alt_data_end+0xf8003768>
10003828:	0005883a 	mov	r2,zero
1000382c:	003fd906 	br	10003794 <__alt_data_end+0xf8003794>
10003830:	81400c17 	ldw	r5,48(r16)
10003834:	28000626 	beq	r5,zero,10003850 <__swsetup_r+0x118>
10003838:	80801004 	addi	r2,r16,64
1000383c:	28800326 	beq	r5,r2,1000384c <__swsetup_r+0x114>
10003840:	8809883a 	mov	r4,r17
10003844:	00058e80 	call	100058e8 <_free_r>
10003848:	8180030b 	ldhu	r6,12(r16)
1000384c:	80000c15 	stw	zero,48(r16)
10003850:	80c00417 	ldw	r3,16(r16)
10003854:	00bff6c4 	movi	r2,-37
10003858:	118c703a 	and	r6,r2,r6
1000385c:	80000115 	stw	zero,4(r16)
10003860:	80c00015 	stw	r3,0(r16)
10003864:	003fd806 	br	100037c8 <__alt_data_end+0xf80037c8>

10003868 <quorem>:
10003868:	defff204 	addi	sp,sp,-56
1000386c:	ddc00b15 	stw	r23,44(sp)
10003870:	20800417 	ldw	r2,16(r4)
10003874:	2dc00417 	ldw	r23,16(r5)
10003878:	dfc00d15 	stw	ra,52(sp)
1000387c:	df000c15 	stw	fp,48(sp)
10003880:	dd800a15 	stw	r22,40(sp)
10003884:	dd400915 	stw	r21,36(sp)
10003888:	dd000815 	stw	r20,32(sp)
1000388c:	dcc00715 	stw	r19,28(sp)
10003890:	dc800615 	stw	r18,24(sp)
10003894:	dc400515 	stw	r17,20(sp)
10003898:	dc000415 	stw	r16,16(sp)
1000389c:	15c07a16 	blt	r2,r23,10003a88 <quorem+0x220>
100038a0:	bdffffc4 	addi	r23,r23,-1
100038a4:	bde9883a 	add	r20,r23,r23
100038a8:	28c00504 	addi	r3,r5,20
100038ac:	a529883a 	add	r20,r20,r20
100038b0:	1d39883a 	add	fp,r3,r20
100038b4:	24c00504 	addi	r19,r4,20
100038b8:	d9400215 	stw	r5,8(sp)
100038bc:	9d29883a 	add	r20,r19,r20
100038c0:	e1400017 	ldw	r5,0(fp)
100038c4:	d9000015 	stw	r4,0(sp)
100038c8:	a1000017 	ldw	r4,0(r20)
100038cc:	29400044 	addi	r5,r5,1
100038d0:	d8c00115 	stw	r3,4(sp)
100038d4:	dd000315 	stw	r20,12(sp)
100038d8:	000b4440 	call	1000b444 <__udivsi3>
100038dc:	1025883a 	mov	r18,r2
100038e0:	10003026 	beq	r2,zero,100039a4 <quorem+0x13c>
100038e4:	dc400117 	ldw	r17,4(sp)
100038e8:	9829883a 	mov	r20,r19
100038ec:	002d883a 	mov	r22,zero
100038f0:	0021883a 	mov	r16,zero
100038f4:	8d400017 	ldw	r21,0(r17)
100038f8:	900b883a 	mov	r5,r18
100038fc:	8c400104 	addi	r17,r17,4
10003900:	a93fffcc 	andi	r4,r21,65535
10003904:	000b4540 	call	1000b454 <__mulsi3>
10003908:	a808d43a 	srli	r4,r21,16
1000390c:	900b883a 	mov	r5,r18
10003910:	b0ad883a 	add	r22,r22,r2
10003914:	000b4540 	call	1000b454 <__mulsi3>
10003918:	a1000017 	ldw	r4,0(r20)
1000391c:	b00cd43a 	srli	r6,r22,16
10003920:	b0ffffcc 	andi	r3,r22,65535
10003924:	217fffcc 	andi	r5,r4,65535
10003928:	2c21883a 	add	r16,r5,r16
1000392c:	80c7c83a 	sub	r3,r16,r3
10003930:	2008d43a 	srli	r4,r4,16
10003934:	3085883a 	add	r2,r6,r2
10003938:	1821d43a 	srai	r16,r3,16
1000393c:	117fffcc 	andi	r5,r2,65535
10003940:	2149c83a 	sub	r4,r4,r5
10003944:	2421883a 	add	r16,r4,r16
10003948:	8008943a 	slli	r4,r16,16
1000394c:	18ffffcc 	andi	r3,r3,65535
10003950:	102cd43a 	srli	r22,r2,16
10003954:	20c8b03a 	or	r4,r4,r3
10003958:	a1000015 	stw	r4,0(r20)
1000395c:	8021d43a 	srai	r16,r16,16
10003960:	a5000104 	addi	r20,r20,4
10003964:	e47fe32e 	bgeu	fp,r17,100038f4 <__alt_data_end+0xf80038f4>
10003968:	d8c00317 	ldw	r3,12(sp)
1000396c:	18800017 	ldw	r2,0(r3)
10003970:	10000c1e 	bne	r2,zero,100039a4 <quorem+0x13c>
10003974:	18bfff04 	addi	r2,r3,-4
10003978:	9880082e 	bgeu	r19,r2,1000399c <quorem+0x134>
1000397c:	18ffff17 	ldw	r3,-4(r3)
10003980:	18000326 	beq	r3,zero,10003990 <quorem+0x128>
10003984:	00000506 	br	1000399c <quorem+0x134>
10003988:	10c00017 	ldw	r3,0(r2)
1000398c:	1800031e 	bne	r3,zero,1000399c <quorem+0x134>
10003990:	10bfff04 	addi	r2,r2,-4
10003994:	bdffffc4 	addi	r23,r23,-1
10003998:	98bffb36 	bltu	r19,r2,10003988 <__alt_data_end+0xf8003988>
1000399c:	d8c00017 	ldw	r3,0(sp)
100039a0:	1dc00415 	stw	r23,16(r3)
100039a4:	d9000017 	ldw	r4,0(sp)
100039a8:	d9400217 	ldw	r5,8(sp)
100039ac:	00079100 	call	10007910 <__mcmp>
100039b0:	10002816 	blt	r2,zero,10003a54 <quorem+0x1ec>
100039b4:	dc400117 	ldw	r17,4(sp)
100039b8:	94800044 	addi	r18,r18,1
100039bc:	980d883a 	mov	r6,r19
100039c0:	0007883a 	mov	r3,zero
100039c4:	31000017 	ldw	r4,0(r6)
100039c8:	89400017 	ldw	r5,0(r17)
100039cc:	31800104 	addi	r6,r6,4
100039d0:	20bfffcc 	andi	r2,r4,65535
100039d4:	10c7883a 	add	r3,r2,r3
100039d8:	28bfffcc 	andi	r2,r5,65535
100039dc:	1885c83a 	sub	r2,r3,r2
100039e0:	280ad43a 	srli	r5,r5,16
100039e4:	2008d43a 	srli	r4,r4,16
100039e8:	1007d43a 	srai	r3,r2,16
100039ec:	10bfffcc 	andi	r2,r2,65535
100039f0:	2149c83a 	sub	r4,r4,r5
100039f4:	20c9883a 	add	r4,r4,r3
100039f8:	200a943a 	slli	r5,r4,16
100039fc:	8c400104 	addi	r17,r17,4
10003a00:	2007d43a 	srai	r3,r4,16
10003a04:	2884b03a 	or	r2,r5,r2
10003a08:	30bfff15 	stw	r2,-4(r6)
10003a0c:	e47fed2e 	bgeu	fp,r17,100039c4 <__alt_data_end+0xf80039c4>
10003a10:	bdc5883a 	add	r2,r23,r23
10003a14:	1085883a 	add	r2,r2,r2
10003a18:	9887883a 	add	r3,r19,r2
10003a1c:	18800017 	ldw	r2,0(r3)
10003a20:	10000c1e 	bne	r2,zero,10003a54 <quorem+0x1ec>
10003a24:	18bfff04 	addi	r2,r3,-4
10003a28:	9880082e 	bgeu	r19,r2,10003a4c <quorem+0x1e4>
10003a2c:	18ffff17 	ldw	r3,-4(r3)
10003a30:	18000326 	beq	r3,zero,10003a40 <quorem+0x1d8>
10003a34:	00000506 	br	10003a4c <quorem+0x1e4>
10003a38:	10c00017 	ldw	r3,0(r2)
10003a3c:	1800031e 	bne	r3,zero,10003a4c <quorem+0x1e4>
10003a40:	10bfff04 	addi	r2,r2,-4
10003a44:	bdffffc4 	addi	r23,r23,-1
10003a48:	98bffb36 	bltu	r19,r2,10003a38 <__alt_data_end+0xf8003a38>
10003a4c:	d8c00017 	ldw	r3,0(sp)
10003a50:	1dc00415 	stw	r23,16(r3)
10003a54:	9005883a 	mov	r2,r18
10003a58:	dfc00d17 	ldw	ra,52(sp)
10003a5c:	df000c17 	ldw	fp,48(sp)
10003a60:	ddc00b17 	ldw	r23,44(sp)
10003a64:	dd800a17 	ldw	r22,40(sp)
10003a68:	dd400917 	ldw	r21,36(sp)
10003a6c:	dd000817 	ldw	r20,32(sp)
10003a70:	dcc00717 	ldw	r19,28(sp)
10003a74:	dc800617 	ldw	r18,24(sp)
10003a78:	dc400517 	ldw	r17,20(sp)
10003a7c:	dc000417 	ldw	r16,16(sp)
10003a80:	dec00e04 	addi	sp,sp,56
10003a84:	f800283a 	ret
10003a88:	0005883a 	mov	r2,zero
10003a8c:	003ff206 	br	10003a58 <__alt_data_end+0xf8003a58>

10003a90 <_dtoa_r>:
10003a90:	20801017 	ldw	r2,64(r4)
10003a94:	deffde04 	addi	sp,sp,-136
10003a98:	dd401d15 	stw	r21,116(sp)
10003a9c:	dcc01b15 	stw	r19,108(sp)
10003aa0:	dc801a15 	stw	r18,104(sp)
10003aa4:	dc401915 	stw	r17,100(sp)
10003aa8:	dc001815 	stw	r16,96(sp)
10003aac:	dfc02115 	stw	ra,132(sp)
10003ab0:	df002015 	stw	fp,128(sp)
10003ab4:	ddc01f15 	stw	r23,124(sp)
10003ab8:	dd801e15 	stw	r22,120(sp)
10003abc:	dd001c15 	stw	r20,112(sp)
10003ac0:	d9c00315 	stw	r7,12(sp)
10003ac4:	2021883a 	mov	r16,r4
10003ac8:	302b883a 	mov	r21,r6
10003acc:	2825883a 	mov	r18,r5
10003ad0:	dc402417 	ldw	r17,144(sp)
10003ad4:	3027883a 	mov	r19,r6
10003ad8:	10000826 	beq	r2,zero,10003afc <_dtoa_r+0x6c>
10003adc:	21801117 	ldw	r6,68(r4)
10003ae0:	00c00044 	movi	r3,1
10003ae4:	100b883a 	mov	r5,r2
10003ae8:	1986983a 	sll	r3,r3,r6
10003aec:	11800115 	stw	r6,4(r2)
10003af0:	10c00215 	stw	r3,8(r2)
10003af4:	000703c0 	call	1000703c <_Bfree>
10003af8:	80001015 	stw	zero,64(r16)
10003afc:	a8002d16 	blt	r21,zero,10003bb4 <_dtoa_r+0x124>
10003b00:	88000015 	stw	zero,0(r17)
10003b04:	a8dffc2c 	andhi	r3,r21,32752
10003b08:	009ffc34 	movhi	r2,32752
10003b0c:	18801b26 	beq	r3,r2,10003b7c <_dtoa_r+0xec>
10003b10:	9009883a 	mov	r4,r18
10003b14:	980b883a 	mov	r5,r19
10003b18:	000d883a 	mov	r6,zero
10003b1c:	000f883a 	mov	r7,zero
10003b20:	000c6980 	call	1000c698 <__eqdf2>
10003b24:	10002a1e 	bne	r2,zero,10003bd0 <_dtoa_r+0x140>
10003b28:	d8c02317 	ldw	r3,140(sp)
10003b2c:	d9002517 	ldw	r4,148(sp)
10003b30:	00800044 	movi	r2,1
10003b34:	18800015 	stw	r2,0(r3)
10003b38:	2001a226 	beq	r4,zero,100041c4 <_dtoa_r+0x734>
10003b3c:	00840074 	movhi	r2,4097
10003b40:	1081af44 	addi	r2,r2,1725
10003b44:	20800015 	stw	r2,0(r4)
10003b48:	10bfffc4 	addi	r2,r2,-1
10003b4c:	dfc02117 	ldw	ra,132(sp)
10003b50:	df002017 	ldw	fp,128(sp)
10003b54:	ddc01f17 	ldw	r23,124(sp)
10003b58:	dd801e17 	ldw	r22,120(sp)
10003b5c:	dd401d17 	ldw	r21,116(sp)
10003b60:	dd001c17 	ldw	r20,112(sp)
10003b64:	dcc01b17 	ldw	r19,108(sp)
10003b68:	dc801a17 	ldw	r18,104(sp)
10003b6c:	dc401917 	ldw	r17,100(sp)
10003b70:	dc001817 	ldw	r16,96(sp)
10003b74:	dec02204 	addi	sp,sp,136
10003b78:	f800283a 	ret
10003b7c:	d8c02317 	ldw	r3,140(sp)
10003b80:	0089c3c4 	movi	r2,9999
10003b84:	18800015 	stw	r2,0(r3)
10003b88:	90017c26 	beq	r18,zero,1000417c <_dtoa_r+0x6ec>
10003b8c:	00840074 	movhi	r2,4097
10003b90:	1081bb04 	addi	r2,r2,1772
10003b94:	d9002517 	ldw	r4,148(sp)
10003b98:	203fec26 	beq	r4,zero,10003b4c <__alt_data_end+0xf8003b4c>
10003b9c:	10c000c7 	ldb	r3,3(r2)
10003ba0:	18017d1e 	bne	r3,zero,10004198 <_dtoa_r+0x708>
10003ba4:	10c000c4 	addi	r3,r2,3
10003ba8:	d9802517 	ldw	r6,148(sp)
10003bac:	30c00015 	stw	r3,0(r6)
10003bb0:	003fe606 	br	10003b4c <__alt_data_end+0xf8003b4c>
10003bb4:	04e00034 	movhi	r19,32768
10003bb8:	9cffffc4 	addi	r19,r19,-1
10003bbc:	00800044 	movi	r2,1
10003bc0:	ace6703a 	and	r19,r21,r19
10003bc4:	88800015 	stw	r2,0(r17)
10003bc8:	982b883a 	mov	r21,r19
10003bcc:	003fcd06 	br	10003b04 <__alt_data_end+0xf8003b04>
10003bd0:	d8800204 	addi	r2,sp,8
10003bd4:	a822d53a 	srli	r17,r21,20
10003bd8:	d8800015 	stw	r2,0(sp)
10003bdc:	8009883a 	mov	r4,r16
10003be0:	900b883a 	mov	r5,r18
10003be4:	980d883a 	mov	r6,r19
10003be8:	d9c00104 	addi	r7,sp,4
10003bec:	0007c840 	call	10007c84 <__d2b>
10003bf0:	1039883a 	mov	fp,r2
10003bf4:	88016a1e 	bne	r17,zero,100041a0 <_dtoa_r+0x710>
10003bf8:	dd000217 	ldw	r20,8(sp)
10003bfc:	dc400117 	ldw	r17,4(sp)
10003c00:	00befbc4 	movi	r2,-1041
10003c04:	a463883a 	add	r17,r20,r17
10003c08:	8882ea16 	blt	r17,r2,100047b4 <_dtoa_r+0xd24>
10003c0c:	00bf0384 	movi	r2,-1010
10003c10:	1445c83a 	sub	r2,r2,r17
10003c14:	89010484 	addi	r4,r17,1042
10003c18:	a8aa983a 	sll	r21,r21,r2
10003c1c:	9108d83a 	srl	r4,r18,r4
10003c20:	a908b03a 	or	r4,r21,r4
10003c24:	000db700 	call	1000db70 <__floatunsidf>
10003c28:	017f8434 	movhi	r5,65040
10003c2c:	01800044 	movi	r6,1
10003c30:	1009883a 	mov	r4,r2
10003c34:	194b883a 	add	r5,r3,r5
10003c38:	8c7fffc4 	addi	r17,r17,-1
10003c3c:	d9800f15 	stw	r6,60(sp)
10003c40:	000d883a 	mov	r6,zero
10003c44:	01cffe34 	movhi	r7,16376
10003c48:	000d1480 	call	1000d148 <__subdf3>
10003c4c:	0198dbf4 	movhi	r6,25455
10003c50:	01cff4f4 	movhi	r7,16339
10003c54:	1009883a 	mov	r4,r2
10003c58:	180b883a 	mov	r5,r3
10003c5c:	3190d844 	addi	r6,r6,17249
10003c60:	39e1e9c4 	addi	r7,r7,-30809
10003c64:	000c8dc0 	call	1000c8dc <__muldf3>
10003c68:	01a2d874 	movhi	r6,35681
10003c6c:	01cff1f4 	movhi	r7,16327
10003c70:	180b883a 	mov	r5,r3
10003c74:	31b22cc4 	addi	r6,r6,-14157
10003c78:	39e28a04 	addi	r7,r7,-30168
10003c7c:	1009883a 	mov	r4,r2
10003c80:	000b47c0 	call	1000b47c <__adddf3>
10003c84:	8809883a 	mov	r4,r17
10003c88:	102d883a 	mov	r22,r2
10003c8c:	182b883a 	mov	r21,r3
10003c90:	000daa00 	call	1000daa0 <__floatsidf>
10003c94:	019427f4 	movhi	r6,20639
10003c98:	01cff4f4 	movhi	r7,16339
10003c9c:	1009883a 	mov	r4,r2
10003ca0:	180b883a 	mov	r5,r3
10003ca4:	319e7ec4 	addi	r6,r6,31227
10003ca8:	39d104c4 	addi	r7,r7,17427
10003cac:	000c8dc0 	call	1000c8dc <__muldf3>
10003cb0:	b009883a 	mov	r4,r22
10003cb4:	a80b883a 	mov	r5,r21
10003cb8:	100d883a 	mov	r6,r2
10003cbc:	180f883a 	mov	r7,r3
10003cc0:	000b47c0 	call	1000b47c <__adddf3>
10003cc4:	1009883a 	mov	r4,r2
10003cc8:	180b883a 	mov	r5,r3
10003ccc:	102d883a 	mov	r22,r2
10003cd0:	182b883a 	mov	r21,r3
10003cd4:	000da180 	call	1000da18 <__fixdfsi>
10003cd8:	b009883a 	mov	r4,r22
10003cdc:	a80b883a 	mov	r5,r21
10003ce0:	000d883a 	mov	r6,zero
10003ce4:	000f883a 	mov	r7,zero
10003ce8:	d8800515 	stw	r2,20(sp)
10003cec:	000c7fc0 	call	1000c7fc <__ledf2>
10003cf0:	10023116 	blt	r2,zero,100045b8 <_dtoa_r+0xb28>
10003cf4:	d8c00517 	ldw	r3,20(sp)
10003cf8:	00800584 	movi	r2,22
10003cfc:	10c21f36 	bltu	r2,r3,1000457c <_dtoa_r+0xaec>
10003d00:	180490fa 	slli	r2,r3,3
10003d04:	00c40074 	movhi	r3,4097
10003d08:	18c1d704 	addi	r3,r3,1884
10003d0c:	1885883a 	add	r2,r3,r2
10003d10:	11000017 	ldw	r4,0(r2)
10003d14:	11400117 	ldw	r5,4(r2)
10003d18:	900d883a 	mov	r6,r18
10003d1c:	980f883a 	mov	r7,r19
10003d20:	000c71c0 	call	1000c71c <__gedf2>
10003d24:	0082a70e 	bge	zero,r2,100047c4 <_dtoa_r+0xd34>
10003d28:	d9000517 	ldw	r4,20(sp)
10003d2c:	d8000c15 	stw	zero,48(sp)
10003d30:	213fffc4 	addi	r4,r4,-1
10003d34:	d9000515 	stw	r4,20(sp)
10003d38:	a463c83a 	sub	r17,r20,r17
10003d3c:	8dbfffc4 	addi	r22,r17,-1
10003d40:	b0021916 	blt	r22,zero,100045a8 <_dtoa_r+0xb18>
10003d44:	d8000815 	stw	zero,32(sp)
10003d48:	d8800517 	ldw	r2,20(sp)
10003d4c:	10020e16 	blt	r2,zero,10004588 <_dtoa_r+0xaf8>
10003d50:	b0ad883a 	add	r22,r22,r2
10003d54:	d8800a15 	stw	r2,40(sp)
10003d58:	d8000915 	stw	zero,36(sp)
10003d5c:	d8c00317 	ldw	r3,12(sp)
10003d60:	00800244 	movi	r2,9
10003d64:	10c11a36 	bltu	r2,r3,100041d0 <_dtoa_r+0x740>
10003d68:	00800144 	movi	r2,5
10003d6c:	10c4fc0e 	bge	r2,r3,10005160 <_dtoa_r+0x16d0>
10003d70:	18ffff04 	addi	r3,r3,-4
10003d74:	d8c00315 	stw	r3,12(sp)
10003d78:	0029883a 	mov	r20,zero
10003d7c:	d9800317 	ldw	r6,12(sp)
10003d80:	008000c4 	movi	r2,3
10003d84:	3083bd26 	beq	r6,r2,10004c7c <_dtoa_r+0x11ec>
10003d88:	1183670e 	bge	r2,r6,10004b28 <_dtoa_r+0x1098>
10003d8c:	d8c00317 	ldw	r3,12(sp)
10003d90:	00800104 	movi	r2,4
10003d94:	1882e726 	beq	r3,r2,10004934 <_dtoa_r+0xea4>
10003d98:	00800144 	movi	r2,5
10003d9c:	1884f21e 	bne	r3,r2,10005168 <_dtoa_r+0x16d8>
10003da0:	00800044 	movi	r2,1
10003da4:	d8800b15 	stw	r2,44(sp)
10003da8:	d8c02217 	ldw	r3,136(sp)
10003dac:	d9000517 	ldw	r4,20(sp)
10003db0:	1907883a 	add	r3,r3,r4
10003db4:	19800044 	addi	r6,r3,1
10003db8:	d8c00d15 	stw	r3,52(sp)
10003dbc:	d9800615 	stw	r6,24(sp)
10003dc0:	0183c30e 	bge	zero,r6,10004cd0 <_dtoa_r+0x1240>
10003dc4:	d9800617 	ldw	r6,24(sp)
10003dc8:	3023883a 	mov	r17,r6
10003dcc:	80001115 	stw	zero,68(r16)
10003dd0:	008005c4 	movi	r2,23
10003dd4:	1184f62e 	bgeu	r2,r6,100051b0 <_dtoa_r+0x1720>
10003dd8:	00c00044 	movi	r3,1
10003ddc:	00800104 	movi	r2,4
10003de0:	1085883a 	add	r2,r2,r2
10003de4:	11000504 	addi	r4,r2,20
10003de8:	180b883a 	mov	r5,r3
10003dec:	18c00044 	addi	r3,r3,1
10003df0:	313ffb2e 	bgeu	r6,r4,10003de0 <__alt_data_end+0xf8003de0>
10003df4:	81401115 	stw	r5,68(r16)
10003df8:	8009883a 	mov	r4,r16
10003dfc:	0006f940 	call	10006f94 <_Balloc>
10003e00:	d8800715 	stw	r2,28(sp)
10003e04:	80801015 	stw	r2,64(r16)
10003e08:	00800384 	movi	r2,14
10003e0c:	1440fd36 	bltu	r2,r17,10004204 <_dtoa_r+0x774>
10003e10:	a000fc26 	beq	r20,zero,10004204 <_dtoa_r+0x774>
10003e14:	d8800517 	ldw	r2,20(sp)
10003e18:	0083b90e 	bge	zero,r2,10004d00 <_dtoa_r+0x1270>
10003e1c:	d8c00517 	ldw	r3,20(sp)
10003e20:	108003cc 	andi	r2,r2,15
10003e24:	100490fa 	slli	r2,r2,3
10003e28:	182fd13a 	srai	r23,r3,4
10003e2c:	00c40074 	movhi	r3,4097
10003e30:	18c1d704 	addi	r3,r3,1884
10003e34:	1885883a 	add	r2,r3,r2
10003e38:	b8c0040c 	andi	r3,r23,16
10003e3c:	12c00017 	ldw	r11,0(r2)
10003e40:	12800117 	ldw	r10,4(r2)
10003e44:	18039726 	beq	r3,zero,10004ca4 <_dtoa_r+0x1214>
10003e48:	00840074 	movhi	r2,4097
10003e4c:	1081cd04 	addi	r2,r2,1844
10003e50:	11800817 	ldw	r6,32(r2)
10003e54:	11c00917 	ldw	r7,36(r2)
10003e58:	9009883a 	mov	r4,r18
10003e5c:	980b883a 	mov	r5,r19
10003e60:	da801615 	stw	r10,88(sp)
10003e64:	dac01515 	stw	r11,84(sp)
10003e68:	000bd180 	call	1000bd18 <__divdf3>
10003e6c:	da801617 	ldw	r10,88(sp)
10003e70:	dac01517 	ldw	r11,84(sp)
10003e74:	bdc003cc 	andi	r23,r23,15
10003e78:	044000c4 	movi	r17,3
10003e7c:	d8800e15 	stw	r2,56(sp)
10003e80:	182b883a 	mov	r21,r3
10003e84:	b8001126 	beq	r23,zero,10003ecc <_dtoa_r+0x43c>
10003e88:	05040074 	movhi	r20,4097
10003e8c:	a501cd04 	addi	r20,r20,1844
10003e90:	5805883a 	mov	r2,r11
10003e94:	5007883a 	mov	r3,r10
10003e98:	b980004c 	andi	r6,r23,1
10003e9c:	1009883a 	mov	r4,r2
10003ea0:	b82fd07a 	srai	r23,r23,1
10003ea4:	180b883a 	mov	r5,r3
10003ea8:	30000426 	beq	r6,zero,10003ebc <_dtoa_r+0x42c>
10003eac:	a1800017 	ldw	r6,0(r20)
10003eb0:	a1c00117 	ldw	r7,4(r20)
10003eb4:	8c400044 	addi	r17,r17,1
10003eb8:	000c8dc0 	call	1000c8dc <__muldf3>
10003ebc:	a5000204 	addi	r20,r20,8
10003ec0:	b83ff51e 	bne	r23,zero,10003e98 <__alt_data_end+0xf8003e98>
10003ec4:	1017883a 	mov	r11,r2
10003ec8:	1815883a 	mov	r10,r3
10003ecc:	d9000e17 	ldw	r4,56(sp)
10003ed0:	a80b883a 	mov	r5,r21
10003ed4:	580d883a 	mov	r6,r11
10003ed8:	500f883a 	mov	r7,r10
10003edc:	000bd180 	call	1000bd18 <__divdf3>
10003ee0:	1029883a 	mov	r20,r2
10003ee4:	182b883a 	mov	r21,r3
10003ee8:	d9800c17 	ldw	r6,48(sp)
10003eec:	30000626 	beq	r6,zero,10003f08 <_dtoa_r+0x478>
10003ef0:	a009883a 	mov	r4,r20
10003ef4:	a80b883a 	mov	r5,r21
10003ef8:	000d883a 	mov	r6,zero
10003efc:	01cffc34 	movhi	r7,16368
10003f00:	000c7fc0 	call	1000c7fc <__ledf2>
10003f04:	10043216 	blt	r2,zero,10004fd0 <_dtoa_r+0x1540>
10003f08:	8809883a 	mov	r4,r17
10003f0c:	000daa00 	call	1000daa0 <__floatsidf>
10003f10:	1009883a 	mov	r4,r2
10003f14:	180b883a 	mov	r5,r3
10003f18:	a00d883a 	mov	r6,r20
10003f1c:	a80f883a 	mov	r7,r21
10003f20:	000c8dc0 	call	1000c8dc <__muldf3>
10003f24:	000d883a 	mov	r6,zero
10003f28:	1009883a 	mov	r4,r2
10003f2c:	180b883a 	mov	r5,r3
10003f30:	01d00734 	movhi	r7,16412
10003f34:	000b47c0 	call	1000b47c <__adddf3>
10003f38:	1023883a 	mov	r17,r2
10003f3c:	d9800617 	ldw	r6,24(sp)
10003f40:	00bf3034 	movhi	r2,64704
10003f44:	1885883a 	add	r2,r3,r2
10003f48:	d8800e15 	stw	r2,56(sp)
10003f4c:	30032e26 	beq	r6,zero,10004c08 <_dtoa_r+0x1178>
10003f50:	d8c00517 	ldw	r3,20(sp)
10003f54:	da800617 	ldw	r10,24(sp)
10003f58:	d8c01215 	stw	r3,72(sp)
10003f5c:	d9000b17 	ldw	r4,44(sp)
10003f60:	2003b026 	beq	r4,zero,10004e24 <_dtoa_r+0x1394>
10003f64:	50bfffc4 	addi	r2,r10,-1
10003f68:	100490fa 	slli	r2,r2,3
10003f6c:	00c40074 	movhi	r3,4097
10003f70:	18c1d704 	addi	r3,r3,1884
10003f74:	1885883a 	add	r2,r3,r2
10003f78:	11800017 	ldw	r6,0(r2)
10003f7c:	11c00117 	ldw	r7,4(r2)
10003f80:	d8800717 	ldw	r2,28(sp)
10003f84:	0009883a 	mov	r4,zero
10003f88:	014ff834 	movhi	r5,16352
10003f8c:	da801615 	stw	r10,88(sp)
10003f90:	15c00044 	addi	r23,r2,1
10003f94:	000bd180 	call	1000bd18 <__divdf3>
10003f98:	d9c00e17 	ldw	r7,56(sp)
10003f9c:	880d883a 	mov	r6,r17
10003fa0:	1009883a 	mov	r4,r2
10003fa4:	180b883a 	mov	r5,r3
10003fa8:	000d1480 	call	1000d148 <__subdf3>
10003fac:	a80b883a 	mov	r5,r21
10003fb0:	a009883a 	mov	r4,r20
10003fb4:	d8c01015 	stw	r3,64(sp)
10003fb8:	d8800e15 	stw	r2,56(sp)
10003fbc:	000da180 	call	1000da18 <__fixdfsi>
10003fc0:	1009883a 	mov	r4,r2
10003fc4:	d8801715 	stw	r2,92(sp)
10003fc8:	000daa00 	call	1000daa0 <__floatsidf>
10003fcc:	a009883a 	mov	r4,r20
10003fd0:	a80b883a 	mov	r5,r21
10003fd4:	100d883a 	mov	r6,r2
10003fd8:	180f883a 	mov	r7,r3
10003fdc:	000d1480 	call	1000d148 <__subdf3>
10003fe0:	da001717 	ldw	r8,92(sp)
10003fe4:	1829883a 	mov	r20,r3
10003fe8:	d8c00717 	ldw	r3,28(sp)
10003fec:	d9000e17 	ldw	r4,56(sp)
10003ff0:	d9401017 	ldw	r5,64(sp)
10003ff4:	42000c04 	addi	r8,r8,48
10003ff8:	1023883a 	mov	r17,r2
10003ffc:	1a000005 	stb	r8,0(r3)
10004000:	880d883a 	mov	r6,r17
10004004:	a00f883a 	mov	r7,r20
10004008:	402b883a 	mov	r21,r8
1000400c:	000c71c0 	call	1000c71c <__gedf2>
10004010:	00844516 	blt	zero,r2,10005128 <_dtoa_r+0x1698>
10004014:	0009883a 	mov	r4,zero
10004018:	014ffc34 	movhi	r5,16368
1000401c:	880d883a 	mov	r6,r17
10004020:	a00f883a 	mov	r7,r20
10004024:	000d1480 	call	1000d148 <__subdf3>
10004028:	d9000e17 	ldw	r4,56(sp)
1000402c:	d9401017 	ldw	r5,64(sp)
10004030:	100d883a 	mov	r6,r2
10004034:	180f883a 	mov	r7,r3
10004038:	000c71c0 	call	1000c71c <__gedf2>
1000403c:	da801617 	ldw	r10,88(sp)
10004040:	00843616 	blt	zero,r2,1000511c <_dtoa_r+0x168c>
10004044:	00800044 	movi	r2,1
10004048:	12806e0e 	bge	r2,r10,10004204 <_dtoa_r+0x774>
1000404c:	d9000717 	ldw	r4,28(sp)
10004050:	dd801315 	stw	r22,76(sp)
10004054:	dc001115 	stw	r16,68(sp)
10004058:	2295883a 	add	r10,r4,r10
1000405c:	dcc01415 	stw	r19,80(sp)
10004060:	502d883a 	mov	r22,r10
10004064:	dcc01017 	ldw	r19,64(sp)
10004068:	b821883a 	mov	r16,r23
1000406c:	dc801015 	stw	r18,64(sp)
10004070:	dc800e17 	ldw	r18,56(sp)
10004074:	00000906 	br	1000409c <_dtoa_r+0x60c>
10004078:	000d1480 	call	1000d148 <__subdf3>
1000407c:	1009883a 	mov	r4,r2
10004080:	180b883a 	mov	r5,r3
10004084:	900d883a 	mov	r6,r18
10004088:	980f883a 	mov	r7,r19
1000408c:	000c7fc0 	call	1000c7fc <__ledf2>
10004090:	10040e16 	blt	r2,zero,100050cc <_dtoa_r+0x163c>
10004094:	b821883a 	mov	r16,r23
10004098:	bd841026 	beq	r23,r22,100050dc <_dtoa_r+0x164c>
1000409c:	9009883a 	mov	r4,r18
100040a0:	980b883a 	mov	r5,r19
100040a4:	000d883a 	mov	r6,zero
100040a8:	01d00934 	movhi	r7,16420
100040ac:	000c8dc0 	call	1000c8dc <__muldf3>
100040b0:	000d883a 	mov	r6,zero
100040b4:	01d00934 	movhi	r7,16420
100040b8:	8809883a 	mov	r4,r17
100040bc:	a00b883a 	mov	r5,r20
100040c0:	1025883a 	mov	r18,r2
100040c4:	1827883a 	mov	r19,r3
100040c8:	000c8dc0 	call	1000c8dc <__muldf3>
100040cc:	180b883a 	mov	r5,r3
100040d0:	1009883a 	mov	r4,r2
100040d4:	1823883a 	mov	r17,r3
100040d8:	1029883a 	mov	r20,r2
100040dc:	000da180 	call	1000da18 <__fixdfsi>
100040e0:	1009883a 	mov	r4,r2
100040e4:	102b883a 	mov	r21,r2
100040e8:	000daa00 	call	1000daa0 <__floatsidf>
100040ec:	a009883a 	mov	r4,r20
100040f0:	880b883a 	mov	r5,r17
100040f4:	100d883a 	mov	r6,r2
100040f8:	180f883a 	mov	r7,r3
100040fc:	000d1480 	call	1000d148 <__subdf3>
10004100:	ad400c04 	addi	r21,r21,48
10004104:	1009883a 	mov	r4,r2
10004108:	180b883a 	mov	r5,r3
1000410c:	900d883a 	mov	r6,r18
10004110:	980f883a 	mov	r7,r19
10004114:	85400005 	stb	r21,0(r16)
10004118:	1023883a 	mov	r17,r2
1000411c:	1829883a 	mov	r20,r3
10004120:	000c7fc0 	call	1000c7fc <__ledf2>
10004124:	bdc00044 	addi	r23,r23,1
10004128:	0009883a 	mov	r4,zero
1000412c:	014ffc34 	movhi	r5,16368
10004130:	880d883a 	mov	r6,r17
10004134:	a00f883a 	mov	r7,r20
10004138:	103fcf0e 	bge	r2,zero,10004078 <__alt_data_end+0xf8004078>
1000413c:	d9801217 	ldw	r6,72(sp)
10004140:	dc001117 	ldw	r16,68(sp)
10004144:	d9800515 	stw	r6,20(sp)
10004148:	8009883a 	mov	r4,r16
1000414c:	e00b883a 	mov	r5,fp
10004150:	000703c0 	call	1000703c <_Bfree>
10004154:	d8c00517 	ldw	r3,20(sp)
10004158:	d9002317 	ldw	r4,140(sp)
1000415c:	d9802517 	ldw	r6,148(sp)
10004160:	b8000005 	stb	zero,0(r23)
10004164:	18800044 	addi	r2,r3,1
10004168:	20800015 	stw	r2,0(r4)
1000416c:	30027226 	beq	r6,zero,10004b38 <_dtoa_r+0x10a8>
10004170:	35c00015 	stw	r23,0(r6)
10004174:	d8800717 	ldw	r2,28(sp)
10004178:	003e7406 	br	10003b4c <__alt_data_end+0xf8003b4c>
1000417c:	00800434 	movhi	r2,16
10004180:	10bfffc4 	addi	r2,r2,-1
10004184:	a8aa703a 	and	r21,r21,r2
10004188:	a83e801e 	bne	r21,zero,10003b8c <__alt_data_end+0xf8003b8c>
1000418c:	00840074 	movhi	r2,4097
10004190:	1081b804 	addi	r2,r2,1760
10004194:	003e7f06 	br	10003b94 <__alt_data_end+0xf8003b94>
10004198:	10c00204 	addi	r3,r2,8
1000419c:	003e8206 	br	10003ba8 <__alt_data_end+0xf8003ba8>
100041a0:	01400434 	movhi	r5,16
100041a4:	297fffc4 	addi	r5,r5,-1
100041a8:	994a703a 	and	r5,r19,r5
100041ac:	9009883a 	mov	r4,r18
100041b0:	8c7f0044 	addi	r17,r17,-1023
100041b4:	294ffc34 	orhi	r5,r5,16368
100041b8:	dd000217 	ldw	r20,8(sp)
100041bc:	d8000f15 	stw	zero,60(sp)
100041c0:	003e9f06 	br	10003c40 <__alt_data_end+0xf8003c40>
100041c4:	00840074 	movhi	r2,4097
100041c8:	1081af04 	addi	r2,r2,1724
100041cc:	003e5f06 	br	10003b4c <__alt_data_end+0xf8003b4c>
100041d0:	80001115 	stw	zero,68(r16)
100041d4:	8009883a 	mov	r4,r16
100041d8:	000b883a 	mov	r5,zero
100041dc:	0006f940 	call	10006f94 <_Balloc>
100041e0:	01bfffc4 	movi	r6,-1
100041e4:	d8800715 	stw	r2,28(sp)
100041e8:	80801015 	stw	r2,64(r16)
100041ec:	00800044 	movi	r2,1
100041f0:	d9800615 	stw	r6,24(sp)
100041f4:	d8800b15 	stw	r2,44(sp)
100041f8:	d8002215 	stw	zero,136(sp)
100041fc:	d9800d15 	stw	r6,52(sp)
10004200:	d8000315 	stw	zero,12(sp)
10004204:	d8800117 	ldw	r2,4(sp)
10004208:	10008e16 	blt	r2,zero,10004444 <_dtoa_r+0x9b4>
1000420c:	d9000517 	ldw	r4,20(sp)
10004210:	00c00384 	movi	r3,14
10004214:	19008b16 	blt	r3,r4,10004444 <_dtoa_r+0x9b4>
10004218:	200490fa 	slli	r2,r4,3
1000421c:	00c40074 	movhi	r3,4097
10004220:	d9802217 	ldw	r6,136(sp)
10004224:	18c1d704 	addi	r3,r3,1884
10004228:	1885883a 	add	r2,r3,r2
1000422c:	14400017 	ldw	r17,0(r2)
10004230:	15000117 	ldw	r20,4(r2)
10004234:	3001c716 	blt	r6,zero,10004954 <_dtoa_r+0xec4>
10004238:	880d883a 	mov	r6,r17
1000423c:	a00f883a 	mov	r7,r20
10004240:	9009883a 	mov	r4,r18
10004244:	980b883a 	mov	r5,r19
10004248:	000bd180 	call	1000bd18 <__divdf3>
1000424c:	180b883a 	mov	r5,r3
10004250:	1009883a 	mov	r4,r2
10004254:	000da180 	call	1000da18 <__fixdfsi>
10004258:	1009883a 	mov	r4,r2
1000425c:	102d883a 	mov	r22,r2
10004260:	000daa00 	call	1000daa0 <__floatsidf>
10004264:	1009883a 	mov	r4,r2
10004268:	180b883a 	mov	r5,r3
1000426c:	880d883a 	mov	r6,r17
10004270:	a00f883a 	mov	r7,r20
10004274:	000c8dc0 	call	1000c8dc <__muldf3>
10004278:	9009883a 	mov	r4,r18
1000427c:	980b883a 	mov	r5,r19
10004280:	100d883a 	mov	r6,r2
10004284:	180f883a 	mov	r7,r3
10004288:	000d1480 	call	1000d148 <__subdf3>
1000428c:	d9000717 	ldw	r4,28(sp)
10004290:	d9800617 	ldw	r6,24(sp)
10004294:	180b883a 	mov	r5,r3
10004298:	b0c00c04 	addi	r3,r22,48
1000429c:	20c00005 	stb	r3,0(r4)
100042a0:	25c00044 	addi	r23,r4,1
100042a4:	01000044 	movi	r4,1
100042a8:	1011883a 	mov	r8,r2
100042ac:	2807883a 	mov	r3,r5
100042b0:	31003d26 	beq	r6,r4,100043a8 <_dtoa_r+0x918>
100042b4:	000d883a 	mov	r6,zero
100042b8:	01d00934 	movhi	r7,16420
100042bc:	1009883a 	mov	r4,r2
100042c0:	000c8dc0 	call	1000c8dc <__muldf3>
100042c4:	1009883a 	mov	r4,r2
100042c8:	180b883a 	mov	r5,r3
100042cc:	000d883a 	mov	r6,zero
100042d0:	000f883a 	mov	r7,zero
100042d4:	1027883a 	mov	r19,r2
100042d8:	182b883a 	mov	r21,r3
100042dc:	000c6980 	call	1000c698 <__eqdf2>
100042e0:	103f9926 	beq	r2,zero,10004148 <__alt_data_end+0xf8004148>
100042e4:	d8c00617 	ldw	r3,24(sp)
100042e8:	d9000717 	ldw	r4,28(sp)
100042ec:	b825883a 	mov	r18,r23
100042f0:	18bfffc4 	addi	r2,r3,-1
100042f4:	20ad883a 	add	r22,r4,r2
100042f8:	dc000315 	stw	r16,12(sp)
100042fc:	00000a06 	br	10004328 <_dtoa_r+0x898>
10004300:	000c8dc0 	call	1000c8dc <__muldf3>
10004304:	1009883a 	mov	r4,r2
10004308:	180b883a 	mov	r5,r3
1000430c:	000d883a 	mov	r6,zero
10004310:	000f883a 	mov	r7,zero
10004314:	1027883a 	mov	r19,r2
10004318:	182b883a 	mov	r21,r3
1000431c:	b825883a 	mov	r18,r23
10004320:	000c6980 	call	1000c698 <__eqdf2>
10004324:	10022626 	beq	r2,zero,10004bc0 <_dtoa_r+0x1130>
10004328:	880d883a 	mov	r6,r17
1000432c:	a00f883a 	mov	r7,r20
10004330:	9809883a 	mov	r4,r19
10004334:	a80b883a 	mov	r5,r21
10004338:	000bd180 	call	1000bd18 <__divdf3>
1000433c:	180b883a 	mov	r5,r3
10004340:	1009883a 	mov	r4,r2
10004344:	000da180 	call	1000da18 <__fixdfsi>
10004348:	1009883a 	mov	r4,r2
1000434c:	1021883a 	mov	r16,r2
10004350:	000daa00 	call	1000daa0 <__floatsidf>
10004354:	1009883a 	mov	r4,r2
10004358:	180b883a 	mov	r5,r3
1000435c:	880d883a 	mov	r6,r17
10004360:	a00f883a 	mov	r7,r20
10004364:	000c8dc0 	call	1000c8dc <__muldf3>
10004368:	9809883a 	mov	r4,r19
1000436c:	a80b883a 	mov	r5,r21
10004370:	100d883a 	mov	r6,r2
10004374:	180f883a 	mov	r7,r3
10004378:	000d1480 	call	1000d148 <__subdf3>
1000437c:	82000c04 	addi	r8,r16,48
10004380:	92000005 	stb	r8,0(r18)
10004384:	1009883a 	mov	r4,r2
10004388:	180b883a 	mov	r5,r3
1000438c:	000d883a 	mov	r6,zero
10004390:	01d00934 	movhi	r7,16420
10004394:	1011883a 	mov	r8,r2
10004398:	bdc00044 	addi	r23,r23,1
1000439c:	95bfd81e 	bne	r18,r22,10004300 <__alt_data_end+0xf8004300>
100043a0:	802d883a 	mov	r22,r16
100043a4:	dc000317 	ldw	r16,12(sp)
100043a8:	4009883a 	mov	r4,r8
100043ac:	180b883a 	mov	r5,r3
100043b0:	400d883a 	mov	r6,r8
100043b4:	180f883a 	mov	r7,r3
100043b8:	000b47c0 	call	1000b47c <__adddf3>
100043bc:	8809883a 	mov	r4,r17
100043c0:	a00b883a 	mov	r5,r20
100043c4:	100d883a 	mov	r6,r2
100043c8:	180f883a 	mov	r7,r3
100043cc:	1027883a 	mov	r19,r2
100043d0:	1825883a 	mov	r18,r3
100043d4:	000c7fc0 	call	1000c7fc <__ledf2>
100043d8:	10000816 	blt	r2,zero,100043fc <_dtoa_r+0x96c>
100043dc:	8809883a 	mov	r4,r17
100043e0:	a00b883a 	mov	r5,r20
100043e4:	980d883a 	mov	r6,r19
100043e8:	900f883a 	mov	r7,r18
100043ec:	000c6980 	call	1000c698 <__eqdf2>
100043f0:	103f551e 	bne	r2,zero,10004148 <__alt_data_end+0xf8004148>
100043f4:	b580004c 	andi	r22,r22,1
100043f8:	b03f5326 	beq	r22,zero,10004148 <__alt_data_end+0xf8004148>
100043fc:	bd7fffc3 	ldbu	r21,-1(r23)
10004400:	b8bfffc4 	addi	r2,r23,-1
10004404:	1007883a 	mov	r3,r2
10004408:	01400e44 	movi	r5,57
1000440c:	d9800717 	ldw	r6,28(sp)
10004410:	00000506 	br	10004428 <_dtoa_r+0x998>
10004414:	18ffffc4 	addi	r3,r3,-1
10004418:	30825e26 	beq	r6,r2,10004d94 <_dtoa_r+0x1304>
1000441c:	1d400003 	ldbu	r21,0(r3)
10004420:	102f883a 	mov	r23,r2
10004424:	10bfffc4 	addi	r2,r2,-1
10004428:	a9003fcc 	andi	r4,r21,255
1000442c:	2100201c 	xori	r4,r4,128
10004430:	213fe004 	addi	r4,r4,-128
10004434:	217ff726 	beq	r4,r5,10004414 <__alt_data_end+0xf8004414>
10004438:	aa000044 	addi	r8,r21,1
1000443c:	12000005 	stb	r8,0(r2)
10004440:	003f4106 	br	10004148 <__alt_data_end+0xf8004148>
10004444:	d8c00b17 	ldw	r3,44(sp)
10004448:	18006726 	beq	r3,zero,100045e8 <_dtoa_r+0xb58>
1000444c:	d9000317 	ldw	r4,12(sp)
10004450:	00c00044 	movi	r3,1
10004454:	19016a0e 	bge	r3,r4,10004a00 <_dtoa_r+0xf70>
10004458:	d8800617 	ldw	r2,24(sp)
1000445c:	d8c00917 	ldw	r3,36(sp)
10004460:	157fffc4 	addi	r21,r2,-1
10004464:	1d420716 	blt	r3,r21,10004c84 <_dtoa_r+0x11f4>
10004468:	1d6bc83a 	sub	r21,r3,r21
1000446c:	d8800617 	ldw	r2,24(sp)
10004470:	1002c716 	blt	r2,zero,10004f90 <_dtoa_r+0x1500>
10004474:	dd000817 	ldw	r20,32(sp)
10004478:	d8800617 	ldw	r2,24(sp)
1000447c:	d9800817 	ldw	r6,32(sp)
10004480:	8009883a 	mov	r4,r16
10004484:	01400044 	movi	r5,1
10004488:	308d883a 	add	r6,r6,r2
1000448c:	d9800815 	stw	r6,32(sp)
10004490:	b0ad883a 	add	r22,r22,r2
10004494:	00073bc0 	call	100073bc <__i2b>
10004498:	1023883a 	mov	r17,r2
1000449c:	a0000826 	beq	r20,zero,100044c0 <_dtoa_r+0xa30>
100044a0:	0580070e 	bge	zero,r22,100044c0 <_dtoa_r+0xa30>
100044a4:	b005883a 	mov	r2,r22
100044a8:	a5812016 	blt	r20,r22,1000492c <_dtoa_r+0xe9c>
100044ac:	d8c00817 	ldw	r3,32(sp)
100044b0:	a0a9c83a 	sub	r20,r20,r2
100044b4:	b0adc83a 	sub	r22,r22,r2
100044b8:	1887c83a 	sub	r3,r3,r2
100044bc:	d8c00815 	stw	r3,32(sp)
100044c0:	d9000917 	ldw	r4,36(sp)
100044c4:	0100140e 	bge	zero,r4,10004518 <_dtoa_r+0xa88>
100044c8:	d9800b17 	ldw	r6,44(sp)
100044cc:	3001e526 	beq	r6,zero,10004c64 <_dtoa_r+0x11d4>
100044d0:	05400e0e 	bge	zero,r21,1000450c <_dtoa_r+0xa7c>
100044d4:	880b883a 	mov	r5,r17
100044d8:	8009883a 	mov	r4,r16
100044dc:	a80d883a 	mov	r6,r21
100044e0:	00076880 	call	10007688 <__pow5mult>
100044e4:	e00d883a 	mov	r6,fp
100044e8:	8009883a 	mov	r4,r16
100044ec:	100b883a 	mov	r5,r2
100044f0:	1023883a 	mov	r17,r2
100044f4:	00073f80 	call	100073f8 <__multiply>
100044f8:	102f883a 	mov	r23,r2
100044fc:	e00b883a 	mov	r5,fp
10004500:	8009883a 	mov	r4,r16
10004504:	000703c0 	call	1000703c <_Bfree>
10004508:	b839883a 	mov	fp,r23
1000450c:	d8800917 	ldw	r2,36(sp)
10004510:	154dc83a 	sub	r6,r2,r21
10004514:	3001281e 	bne	r6,zero,100049b8 <_dtoa_r+0xf28>
10004518:	05c00044 	movi	r23,1
1000451c:	8009883a 	mov	r4,r16
10004520:	b80b883a 	mov	r5,r23
10004524:	00073bc0 	call	100073bc <__i2b>
10004528:	d8c00a17 	ldw	r3,40(sp)
1000452c:	102b883a 	mov	r21,r2
10004530:	00c0310e 	bge	zero,r3,100045f8 <_dtoa_r+0xb68>
10004534:	8009883a 	mov	r4,r16
10004538:	100b883a 	mov	r5,r2
1000453c:	180d883a 	mov	r6,r3
10004540:	00076880 	call	10007688 <__pow5mult>
10004544:	d9000317 	ldw	r4,12(sp)
10004548:	102b883a 	mov	r21,r2
1000454c:	b9011f0e 	bge	r23,r4,100049cc <_dtoa_r+0xf3c>
10004550:	0027883a 	mov	r19,zero
10004554:	a8800417 	ldw	r2,16(r21)
10004558:	10800104 	addi	r2,r2,4
1000455c:	1085883a 	add	r2,r2,r2
10004560:	1085883a 	add	r2,r2,r2
10004564:	a885883a 	add	r2,r21,r2
10004568:	11000017 	ldw	r4,0(r2)
1000456c:	00072a40 	call	100072a4 <__hi0bits>
10004570:	00c00804 	movi	r3,32
10004574:	1885c83a 	sub	r2,r3,r2
10004578:	00002506 	br	10004610 <_dtoa_r+0xb80>
1000457c:	01800044 	movi	r6,1
10004580:	d9800c15 	stw	r6,48(sp)
10004584:	003dec06 	br	10003d38 <__alt_data_end+0xf8003d38>
10004588:	d8c00817 	ldw	r3,32(sp)
1000458c:	d9000517 	ldw	r4,20(sp)
10004590:	d8000a15 	stw	zero,40(sp)
10004594:	1907c83a 	sub	r3,r3,r4
10004598:	010dc83a 	sub	r6,zero,r4
1000459c:	d8c00815 	stw	r3,32(sp)
100045a0:	d9800915 	stw	r6,36(sp)
100045a4:	003ded06 	br	10003d5c <__alt_data_end+0xf8003d5c>
100045a8:	05adc83a 	sub	r22,zero,r22
100045ac:	dd800815 	stw	r22,32(sp)
100045b0:	002d883a 	mov	r22,zero
100045b4:	003de406 	br	10003d48 <__alt_data_end+0xf8003d48>
100045b8:	d9000517 	ldw	r4,20(sp)
100045bc:	000daa00 	call	1000daa0 <__floatsidf>
100045c0:	1009883a 	mov	r4,r2
100045c4:	180b883a 	mov	r5,r3
100045c8:	b00d883a 	mov	r6,r22
100045cc:	a80f883a 	mov	r7,r21
100045d0:	000c6980 	call	1000c698 <__eqdf2>
100045d4:	103dc726 	beq	r2,zero,10003cf4 <__alt_data_end+0xf8003cf4>
100045d8:	d8800517 	ldw	r2,20(sp)
100045dc:	10bfffc4 	addi	r2,r2,-1
100045e0:	d8800515 	stw	r2,20(sp)
100045e4:	003dc306 	br	10003cf4 <__alt_data_end+0xf8003cf4>
100045e8:	dd400917 	ldw	r21,36(sp)
100045ec:	dd000817 	ldw	r20,32(sp)
100045f0:	0023883a 	mov	r17,zero
100045f4:	003fa906 	br	1000449c <__alt_data_end+0xf800449c>
100045f8:	d9800317 	ldw	r6,12(sp)
100045fc:	b981670e 	bge	r23,r6,10004b9c <_dtoa_r+0x110c>
10004600:	0027883a 	mov	r19,zero
10004604:	d8c00a17 	ldw	r3,40(sp)
10004608:	183fd21e 	bne	r3,zero,10004554 <__alt_data_end+0xf8004554>
1000460c:	00800044 	movi	r2,1
10004610:	1585883a 	add	r2,r2,r22
10004614:	108007cc 	andi	r2,r2,31
10004618:	10005f26 	beq	r2,zero,10004798 <_dtoa_r+0xd08>
1000461c:	00c00804 	movi	r3,32
10004620:	1887c83a 	sub	r3,r3,r2
10004624:	01000104 	movi	r4,4
10004628:	20c2dd0e 	bge	r4,r3,100051a0 <_dtoa_r+0x1710>
1000462c:	d9000817 	ldw	r4,32(sp)
10004630:	00c00704 	movi	r3,28
10004634:	1885c83a 	sub	r2,r3,r2
10004638:	2089883a 	add	r4,r4,r2
1000463c:	d9000815 	stw	r4,32(sp)
10004640:	a0a9883a 	add	r20,r20,r2
10004644:	b0ad883a 	add	r22,r22,r2
10004648:	d8800817 	ldw	r2,32(sp)
1000464c:	0080050e 	bge	zero,r2,10004664 <_dtoa_r+0xbd4>
10004650:	e00b883a 	mov	r5,fp
10004654:	8009883a 	mov	r4,r16
10004658:	100d883a 	mov	r6,r2
1000465c:	00077c80 	call	100077c8 <__lshift>
10004660:	1039883a 	mov	fp,r2
10004664:	0580050e 	bge	zero,r22,1000467c <_dtoa_r+0xbec>
10004668:	a80b883a 	mov	r5,r21
1000466c:	8009883a 	mov	r4,r16
10004670:	b00d883a 	mov	r6,r22
10004674:	00077c80 	call	100077c8 <__lshift>
10004678:	102b883a 	mov	r21,r2
1000467c:	d8c00c17 	ldw	r3,48(sp)
10004680:	1801161e 	bne	r3,zero,10004adc <_dtoa_r+0x104c>
10004684:	d8c00617 	ldw	r3,24(sp)
10004688:	00c12d0e 	bge	zero,r3,10004b40 <_dtoa_r+0x10b0>
1000468c:	d8c00b17 	ldw	r3,44(sp)
10004690:	1800571e 	bne	r3,zero,100047f0 <_dtoa_r+0xd60>
10004694:	dc800717 	ldw	r18,28(sp)
10004698:	dcc00617 	ldw	r19,24(sp)
1000469c:	9029883a 	mov	r20,r18
100046a0:	00000206 	br	100046ac <_dtoa_r+0xc1c>
100046a4:	00070640 	call	10007064 <__multadd>
100046a8:	1039883a 	mov	fp,r2
100046ac:	e009883a 	mov	r4,fp
100046b0:	a80b883a 	mov	r5,r21
100046b4:	00038680 	call	10003868 <quorem>
100046b8:	10800c04 	addi	r2,r2,48
100046bc:	90800005 	stb	r2,0(r18)
100046c0:	94800044 	addi	r18,r18,1
100046c4:	9507c83a 	sub	r3,r18,r20
100046c8:	8009883a 	mov	r4,r16
100046cc:	e00b883a 	mov	r5,fp
100046d0:	01800284 	movi	r6,10
100046d4:	000f883a 	mov	r7,zero
100046d8:	1cfff216 	blt	r3,r19,100046a4 <__alt_data_end+0xf80046a4>
100046dc:	1011883a 	mov	r8,r2
100046e0:	d8800617 	ldw	r2,24(sp)
100046e4:	00822e0e 	bge	zero,r2,10004fa0 <_dtoa_r+0x1510>
100046e8:	d9000717 	ldw	r4,28(sp)
100046ec:	0025883a 	mov	r18,zero
100046f0:	20af883a 	add	r23,r4,r2
100046f4:	e00b883a 	mov	r5,fp
100046f8:	01800044 	movi	r6,1
100046fc:	8009883a 	mov	r4,r16
10004700:	da001715 	stw	r8,92(sp)
10004704:	00077c80 	call	100077c8 <__lshift>
10004708:	1009883a 	mov	r4,r2
1000470c:	a80b883a 	mov	r5,r21
10004710:	1039883a 	mov	fp,r2
10004714:	00079100 	call	10007910 <__mcmp>
10004718:	da001717 	ldw	r8,92(sp)
1000471c:	00816e0e 	bge	zero,r2,10004cd8 <_dtoa_r+0x1248>
10004720:	b93fffc3 	ldbu	r4,-1(r23)
10004724:	b8bfffc4 	addi	r2,r23,-1
10004728:	1007883a 	mov	r3,r2
1000472c:	01800e44 	movi	r6,57
10004730:	d9c00717 	ldw	r7,28(sp)
10004734:	00000506 	br	1000474c <_dtoa_r+0xcbc>
10004738:	18ffffc4 	addi	r3,r3,-1
1000473c:	38811926 	beq	r7,r2,10004ba4 <_dtoa_r+0x1114>
10004740:	19000003 	ldbu	r4,0(r3)
10004744:	102f883a 	mov	r23,r2
10004748:	10bfffc4 	addi	r2,r2,-1
1000474c:	21403fcc 	andi	r5,r4,255
10004750:	2940201c 	xori	r5,r5,128
10004754:	297fe004 	addi	r5,r5,-128
10004758:	29bff726 	beq	r5,r6,10004738 <__alt_data_end+0xf8004738>
1000475c:	21000044 	addi	r4,r4,1
10004760:	11000005 	stb	r4,0(r2)
10004764:	8009883a 	mov	r4,r16
10004768:	a80b883a 	mov	r5,r21
1000476c:	000703c0 	call	1000703c <_Bfree>
10004770:	883e7526 	beq	r17,zero,10004148 <__alt_data_end+0xf8004148>
10004774:	90000426 	beq	r18,zero,10004788 <_dtoa_r+0xcf8>
10004778:	94400326 	beq	r18,r17,10004788 <_dtoa_r+0xcf8>
1000477c:	8009883a 	mov	r4,r16
10004780:	900b883a 	mov	r5,r18
10004784:	000703c0 	call	1000703c <_Bfree>
10004788:	8009883a 	mov	r4,r16
1000478c:	880b883a 	mov	r5,r17
10004790:	000703c0 	call	1000703c <_Bfree>
10004794:	003e6c06 	br	10004148 <__alt_data_end+0xf8004148>
10004798:	00800704 	movi	r2,28
1000479c:	d9800817 	ldw	r6,32(sp)
100047a0:	a0a9883a 	add	r20,r20,r2
100047a4:	b0ad883a 	add	r22,r22,r2
100047a8:	308d883a 	add	r6,r6,r2
100047ac:	d9800815 	stw	r6,32(sp)
100047b0:	003fa506 	br	10004648 <__alt_data_end+0xf8004648>
100047b4:	013efb84 	movi	r4,-1042
100047b8:	246bc83a 	sub	r21,r4,r17
100047bc:	9548983a 	sll	r4,r18,r21
100047c0:	003d1806 	br	10003c24 <__alt_data_end+0xf8003c24>
100047c4:	d8000c15 	stw	zero,48(sp)
100047c8:	003d5b06 	br	10003d38 <__alt_data_end+0xf8003d38>
100047cc:	880b883a 	mov	r5,r17
100047d0:	8009883a 	mov	r4,r16
100047d4:	01800284 	movi	r6,10
100047d8:	000f883a 	mov	r7,zero
100047dc:	00070640 	call	10007064 <__multadd>
100047e0:	1023883a 	mov	r17,r2
100047e4:	d8800d17 	ldw	r2,52(sp)
100047e8:	0082550e 	bge	zero,r2,10005140 <_dtoa_r+0x16b0>
100047ec:	d8800615 	stw	r2,24(sp)
100047f0:	0500050e 	bge	zero,r20,10004808 <_dtoa_r+0xd78>
100047f4:	880b883a 	mov	r5,r17
100047f8:	8009883a 	mov	r4,r16
100047fc:	a00d883a 	mov	r6,r20
10004800:	00077c80 	call	100077c8 <__lshift>
10004804:	1023883a 	mov	r17,r2
10004808:	98016a1e 	bne	r19,zero,10004db4 <_dtoa_r+0x1324>
1000480c:	8829883a 	mov	r20,r17
10004810:	d9000617 	ldw	r4,24(sp)
10004814:	dcc00717 	ldw	r19,28(sp)
10004818:	9480004c 	andi	r18,r18,1
1000481c:	20bfffc4 	addi	r2,r4,-1
10004820:	9885883a 	add	r2,r19,r2
10004824:	d8800415 	stw	r2,16(sp)
10004828:	dc800615 	stw	r18,24(sp)
1000482c:	e009883a 	mov	r4,fp
10004830:	a80b883a 	mov	r5,r21
10004834:	00038680 	call	10003868 <quorem>
10004838:	e009883a 	mov	r4,fp
1000483c:	880b883a 	mov	r5,r17
10004840:	102f883a 	mov	r23,r2
10004844:	00079100 	call	10007910 <__mcmp>
10004848:	8009883a 	mov	r4,r16
1000484c:	a80b883a 	mov	r5,r21
10004850:	a00d883a 	mov	r6,r20
10004854:	102d883a 	mov	r22,r2
10004858:	00079700 	call	10007970 <__mdiff>
1000485c:	1007883a 	mov	r3,r2
10004860:	10800317 	ldw	r2,12(r2)
10004864:	bc800c04 	addi	r18,r23,48
10004868:	1000971e 	bne	r2,zero,10004ac8 <_dtoa_r+0x1038>
1000486c:	180b883a 	mov	r5,r3
10004870:	e009883a 	mov	r4,fp
10004874:	d8c01515 	stw	r3,84(sp)
10004878:	00079100 	call	10007910 <__mcmp>
1000487c:	d8c01517 	ldw	r3,84(sp)
10004880:	8009883a 	mov	r4,r16
10004884:	d8801515 	stw	r2,84(sp)
10004888:	180b883a 	mov	r5,r3
1000488c:	000703c0 	call	1000703c <_Bfree>
10004890:	d8801517 	ldw	r2,84(sp)
10004894:	1000041e 	bne	r2,zero,100048a8 <_dtoa_r+0xe18>
10004898:	d9800317 	ldw	r6,12(sp)
1000489c:	3000021e 	bne	r6,zero,100048a8 <_dtoa_r+0xe18>
100048a0:	d8c00617 	ldw	r3,24(sp)
100048a4:	18007626 	beq	r3,zero,10004a80 <_dtoa_r+0xff0>
100048a8:	b0005b16 	blt	r22,zero,10004a18 <_dtoa_r+0xf88>
100048ac:	b000041e 	bne	r22,zero,100048c0 <_dtoa_r+0xe30>
100048b0:	d9000317 	ldw	r4,12(sp)
100048b4:	2000021e 	bne	r4,zero,100048c0 <_dtoa_r+0xe30>
100048b8:	d8c00617 	ldw	r3,24(sp)
100048bc:	18005626 	beq	r3,zero,10004a18 <_dtoa_r+0xf88>
100048c0:	00814d16 	blt	zero,r2,10004df8 <_dtoa_r+0x1368>
100048c4:	d8c00417 	ldw	r3,16(sp)
100048c8:	9d800044 	addi	r22,r19,1
100048cc:	9c800005 	stb	r18,0(r19)
100048d0:	b02f883a 	mov	r23,r22
100048d4:	98c14c26 	beq	r19,r3,10004e08 <_dtoa_r+0x1378>
100048d8:	e00b883a 	mov	r5,fp
100048dc:	8009883a 	mov	r4,r16
100048e0:	01800284 	movi	r6,10
100048e4:	000f883a 	mov	r7,zero
100048e8:	00070640 	call	10007064 <__multadd>
100048ec:	1039883a 	mov	fp,r2
100048f0:	8d006d26 	beq	r17,r20,10004aa8 <_dtoa_r+0x1018>
100048f4:	880b883a 	mov	r5,r17
100048f8:	01800284 	movi	r6,10
100048fc:	000f883a 	mov	r7,zero
10004900:	8009883a 	mov	r4,r16
10004904:	00070640 	call	10007064 <__multadd>
10004908:	a00b883a 	mov	r5,r20
1000490c:	8009883a 	mov	r4,r16
10004910:	01800284 	movi	r6,10
10004914:	000f883a 	mov	r7,zero
10004918:	1023883a 	mov	r17,r2
1000491c:	00070640 	call	10007064 <__multadd>
10004920:	1029883a 	mov	r20,r2
10004924:	b027883a 	mov	r19,r22
10004928:	003fc006 	br	1000482c <__alt_data_end+0xf800482c>
1000492c:	a005883a 	mov	r2,r20
10004930:	003ede06 	br	100044ac <__alt_data_end+0xf80044ac>
10004934:	01000044 	movi	r4,1
10004938:	d9000b15 	stw	r4,44(sp)
1000493c:	d9802217 	ldw	r6,136(sp)
10004940:	0180dc0e 	bge	zero,r6,10004cb4 <_dtoa_r+0x1224>
10004944:	3023883a 	mov	r17,r6
10004948:	d9800d15 	stw	r6,52(sp)
1000494c:	d9800615 	stw	r6,24(sp)
10004950:	003d1e06 	br	10003dcc <__alt_data_end+0xf8003dcc>
10004954:	d8800617 	ldw	r2,24(sp)
10004958:	00be3716 	blt	zero,r2,10004238 <__alt_data_end+0xf8004238>
1000495c:	1000be1e 	bne	r2,zero,10004c58 <_dtoa_r+0x11c8>
10004960:	8809883a 	mov	r4,r17
10004964:	a00b883a 	mov	r5,r20
10004968:	000d883a 	mov	r6,zero
1000496c:	01d00534 	movhi	r7,16404
10004970:	000c8dc0 	call	1000c8dc <__muldf3>
10004974:	1009883a 	mov	r4,r2
10004978:	180b883a 	mov	r5,r3
1000497c:	900d883a 	mov	r6,r18
10004980:	980f883a 	mov	r7,r19
10004984:	000c71c0 	call	1000c71c <__gedf2>
10004988:	002b883a 	mov	r21,zero
1000498c:	0023883a 	mov	r17,zero
10004990:	10007a16 	blt	r2,zero,10004b7c <_dtoa_r+0x10ec>
10004994:	d9002217 	ldw	r4,136(sp)
10004998:	ddc00717 	ldw	r23,28(sp)
1000499c:	0108303a 	nor	r4,zero,r4
100049a0:	d9000515 	stw	r4,20(sp)
100049a4:	8009883a 	mov	r4,r16
100049a8:	a80b883a 	mov	r5,r21
100049ac:	000703c0 	call	1000703c <_Bfree>
100049b0:	883f751e 	bne	r17,zero,10004788 <__alt_data_end+0xf8004788>
100049b4:	003de406 	br	10004148 <__alt_data_end+0xf8004148>
100049b8:	e00b883a 	mov	r5,fp
100049bc:	8009883a 	mov	r4,r16
100049c0:	00076880 	call	10007688 <__pow5mult>
100049c4:	1039883a 	mov	fp,r2
100049c8:	003ed306 	br	10004518 <__alt_data_end+0xf8004518>
100049cc:	903ee01e 	bne	r18,zero,10004550 <__alt_data_end+0xf8004550>
100049d0:	00800434 	movhi	r2,16
100049d4:	10bfffc4 	addi	r2,r2,-1
100049d8:	9884703a 	and	r2,r19,r2
100049dc:	103f081e 	bne	r2,zero,10004600 <__alt_data_end+0xf8004600>
100049e0:	9cdffc2c 	andhi	r19,r19,32752
100049e4:	983f0626 	beq	r19,zero,10004600 <__alt_data_end+0xf8004600>
100049e8:	d8800817 	ldw	r2,32(sp)
100049ec:	b5800044 	addi	r22,r22,1
100049f0:	04c00044 	movi	r19,1
100049f4:	10800044 	addi	r2,r2,1
100049f8:	d8800815 	stw	r2,32(sp)
100049fc:	003f0106 	br	10004604 <__alt_data_end+0xf8004604>
10004a00:	d9800f17 	ldw	r6,60(sp)
10004a04:	30016826 	beq	r6,zero,10004fa8 <_dtoa_r+0x1518>
10004a08:	10810cc4 	addi	r2,r2,1075
10004a0c:	dd400917 	ldw	r21,36(sp)
10004a10:	dd000817 	ldw	r20,32(sp)
10004a14:	003e9906 	br	1000447c <__alt_data_end+0xf800447c>
10004a18:	9011883a 	mov	r8,r18
10004a1c:	4007883a 	mov	r3,r8
10004a20:	e02d883a 	mov	r22,fp
10004a24:	0080100e 	bge	zero,r2,10004a68 <_dtoa_r+0xfd8>
10004a28:	01800044 	movi	r6,1
10004a2c:	8009883a 	mov	r4,r16
10004a30:	e00b883a 	mov	r5,fp
10004a34:	da001515 	stw	r8,84(sp)
10004a38:	da001715 	stw	r8,92(sp)
10004a3c:	00077c80 	call	100077c8 <__lshift>
10004a40:	1009883a 	mov	r4,r2
10004a44:	a80b883a 	mov	r5,r21
10004a48:	102d883a 	mov	r22,r2
10004a4c:	00079100 	call	10007910 <__mcmp>
10004a50:	d8c01517 	ldw	r3,84(sp)
10004a54:	da001717 	ldw	r8,92(sp)
10004a58:	0081a50e 	bge	zero,r2,100050f0 <_dtoa_r+0x1660>
10004a5c:	00800e44 	movi	r2,57
10004a60:	40817b26 	beq	r8,r2,10005050 <_dtoa_r+0x15c0>
10004a64:	40c00044 	addi	r3,r8,1
10004a68:	8825883a 	mov	r18,r17
10004a6c:	9dc00044 	addi	r23,r19,1
10004a70:	98c00005 	stb	r3,0(r19)
10004a74:	a023883a 	mov	r17,r20
10004a78:	b039883a 	mov	fp,r22
10004a7c:	003f3906 	br	10004764 <__alt_data_end+0xf8004764>
10004a80:	00800e44 	movi	r2,57
10004a84:	9011883a 	mov	r8,r18
10004a88:	90817226 	beq	r18,r2,10005054 <_dtoa_r+0x15c4>
10004a8c:	0580010e 	bge	zero,r22,10004a94 <_dtoa_r+0x1004>
10004a90:	ba000c44 	addi	r8,r23,49
10004a94:	8825883a 	mov	r18,r17
10004a98:	9dc00044 	addi	r23,r19,1
10004a9c:	9a000005 	stb	r8,0(r19)
10004aa0:	a023883a 	mov	r17,r20
10004aa4:	003f2f06 	br	10004764 <__alt_data_end+0xf8004764>
10004aa8:	880b883a 	mov	r5,r17
10004aac:	8009883a 	mov	r4,r16
10004ab0:	01800284 	movi	r6,10
10004ab4:	000f883a 	mov	r7,zero
10004ab8:	00070640 	call	10007064 <__multadd>
10004abc:	1023883a 	mov	r17,r2
10004ac0:	1029883a 	mov	r20,r2
10004ac4:	003f9706 	br	10004924 <__alt_data_end+0xf8004924>
10004ac8:	8009883a 	mov	r4,r16
10004acc:	180b883a 	mov	r5,r3
10004ad0:	000703c0 	call	1000703c <_Bfree>
10004ad4:	00800044 	movi	r2,1
10004ad8:	003f7306 	br	100048a8 <__alt_data_end+0xf80048a8>
10004adc:	e009883a 	mov	r4,fp
10004ae0:	a80b883a 	mov	r5,r21
10004ae4:	00079100 	call	10007910 <__mcmp>
10004ae8:	103ee60e 	bge	r2,zero,10004684 <__alt_data_end+0xf8004684>
10004aec:	8009883a 	mov	r4,r16
10004af0:	e00b883a 	mov	r5,fp
10004af4:	01800284 	movi	r6,10
10004af8:	000f883a 	mov	r7,zero
10004afc:	00070640 	call	10007064 <__multadd>
10004b00:	d9000517 	ldw	r4,20(sp)
10004b04:	d9800b17 	ldw	r6,44(sp)
10004b08:	1039883a 	mov	fp,r2
10004b0c:	213fffc4 	addi	r4,r4,-1
10004b10:	d9000515 	stw	r4,20(sp)
10004b14:	303f2d1e 	bne	r6,zero,100047cc <__alt_data_end+0xf80047cc>
10004b18:	d9000d17 	ldw	r4,52(sp)
10004b1c:	0101780e 	bge	zero,r4,10005100 <_dtoa_r+0x1670>
10004b20:	d9000615 	stw	r4,24(sp)
10004b24:	003edb06 	br	10004694 <__alt_data_end+0xf8004694>
10004b28:	00800084 	movi	r2,2
10004b2c:	30818e1e 	bne	r6,r2,10005168 <_dtoa_r+0x16d8>
10004b30:	d8000b15 	stw	zero,44(sp)
10004b34:	003f8106 	br	1000493c <__alt_data_end+0xf800493c>
10004b38:	d8800717 	ldw	r2,28(sp)
10004b3c:	003c0306 	br	10003b4c <__alt_data_end+0xf8003b4c>
10004b40:	d9000317 	ldw	r4,12(sp)
10004b44:	00800084 	movi	r2,2
10004b48:	113ed00e 	bge	r2,r4,1000468c <__alt_data_end+0xf800468c>
10004b4c:	d8c00617 	ldw	r3,24(sp)
10004b50:	183f901e 	bne	r3,zero,10004994 <__alt_data_end+0xf8004994>
10004b54:	a80b883a 	mov	r5,r21
10004b58:	8009883a 	mov	r4,r16
10004b5c:	01800144 	movi	r6,5
10004b60:	000f883a 	mov	r7,zero
10004b64:	00070640 	call	10007064 <__multadd>
10004b68:	e009883a 	mov	r4,fp
10004b6c:	100b883a 	mov	r5,r2
10004b70:	102b883a 	mov	r21,r2
10004b74:	00079100 	call	10007910 <__mcmp>
10004b78:	00bf860e 	bge	zero,r2,10004994 <__alt_data_end+0xf8004994>
10004b7c:	d9800717 	ldw	r6,28(sp)
10004b80:	00800c44 	movi	r2,49
10004b84:	30800005 	stb	r2,0(r6)
10004b88:	d8800517 	ldw	r2,20(sp)
10004b8c:	35c00044 	addi	r23,r6,1
10004b90:	10800044 	addi	r2,r2,1
10004b94:	d8800515 	stw	r2,20(sp)
10004b98:	003f8206 	br	100049a4 <__alt_data_end+0xf80049a4>
10004b9c:	903e981e 	bne	r18,zero,10004600 <__alt_data_end+0xf8004600>
10004ba0:	003f8b06 	br	100049d0 <__alt_data_end+0xf80049d0>
10004ba4:	d9800517 	ldw	r6,20(sp)
10004ba8:	d8c00717 	ldw	r3,28(sp)
10004bac:	00800c44 	movi	r2,49
10004bb0:	31800044 	addi	r6,r6,1
10004bb4:	d9800515 	stw	r6,20(sp)
10004bb8:	18800005 	stb	r2,0(r3)
10004bbc:	003ee906 	br	10004764 <__alt_data_end+0xf8004764>
10004bc0:	dc000317 	ldw	r16,12(sp)
10004bc4:	003d6006 	br	10004148 <__alt_data_end+0xf8004148>
10004bc8:	8809883a 	mov	r4,r17
10004bcc:	000daa00 	call	1000daa0 <__floatsidf>
10004bd0:	a009883a 	mov	r4,r20
10004bd4:	a80b883a 	mov	r5,r21
10004bd8:	100d883a 	mov	r6,r2
10004bdc:	180f883a 	mov	r7,r3
10004be0:	000c8dc0 	call	1000c8dc <__muldf3>
10004be4:	1009883a 	mov	r4,r2
10004be8:	180b883a 	mov	r5,r3
10004bec:	000d883a 	mov	r6,zero
10004bf0:	01d00734 	movhi	r7,16412
10004bf4:	000b47c0 	call	1000b47c <__adddf3>
10004bf8:	1023883a 	mov	r17,r2
10004bfc:	00bf3034 	movhi	r2,64704
10004c00:	1885883a 	add	r2,r3,r2
10004c04:	d8800e15 	stw	r2,56(sp)
10004c08:	a009883a 	mov	r4,r20
10004c0c:	a80b883a 	mov	r5,r21
10004c10:	000d883a 	mov	r6,zero
10004c14:	01d00534 	movhi	r7,16404
10004c18:	000d1480 	call	1000d148 <__subdf3>
10004c1c:	d9c00e17 	ldw	r7,56(sp)
10004c20:	1009883a 	mov	r4,r2
10004c24:	180b883a 	mov	r5,r3
10004c28:	880d883a 	mov	r6,r17
10004c2c:	102b883a 	mov	r21,r2
10004c30:	1829883a 	mov	r20,r3
10004c34:	000c71c0 	call	1000c71c <__gedf2>
10004c38:	00807716 	blt	zero,r2,10004e18 <_dtoa_r+0x1388>
10004c3c:	d8800e17 	ldw	r2,56(sp)
10004c40:	a809883a 	mov	r4,r21
10004c44:	a00b883a 	mov	r5,r20
10004c48:	11e0003c 	xorhi	r7,r2,32768
10004c4c:	880d883a 	mov	r6,r17
10004c50:	000c7fc0 	call	1000c7fc <__ledf2>
10004c54:	103d6b0e 	bge	r2,zero,10004204 <__alt_data_end+0xf8004204>
10004c58:	002b883a 	mov	r21,zero
10004c5c:	0023883a 	mov	r17,zero
10004c60:	003f4c06 	br	10004994 <__alt_data_end+0xf8004994>
10004c64:	d9800917 	ldw	r6,36(sp)
10004c68:	e00b883a 	mov	r5,fp
10004c6c:	8009883a 	mov	r4,r16
10004c70:	00076880 	call	10007688 <__pow5mult>
10004c74:	1039883a 	mov	fp,r2
10004c78:	003e2706 	br	10004518 <__alt_data_end+0xf8004518>
10004c7c:	d8000b15 	stw	zero,44(sp)
10004c80:	003c4906 	br	10003da8 <__alt_data_end+0xf8003da8>
10004c84:	d9000917 	ldw	r4,36(sp)
10004c88:	d9800a17 	ldw	r6,40(sp)
10004c8c:	dd400915 	stw	r21,36(sp)
10004c90:	a905c83a 	sub	r2,r21,r4
10004c94:	308d883a 	add	r6,r6,r2
10004c98:	d9800a15 	stw	r6,40(sp)
10004c9c:	002b883a 	mov	r21,zero
10004ca0:	003df206 	br	1000446c <__alt_data_end+0xf800446c>
10004ca4:	dc800e15 	stw	r18,56(sp)
10004ca8:	982b883a 	mov	r21,r19
10004cac:	04400084 	movi	r17,2
10004cb0:	003c7406 	br	10003e84 <__alt_data_end+0xf8003e84>
10004cb4:	04400044 	movi	r17,1
10004cb8:	dc400d15 	stw	r17,52(sp)
10004cbc:	dc400615 	stw	r17,24(sp)
10004cc0:	dc402215 	stw	r17,136(sp)
10004cc4:	80001115 	stw	zero,68(r16)
10004cc8:	000b883a 	mov	r5,zero
10004ccc:	003c4a06 	br	10003df8 <__alt_data_end+0xf8003df8>
10004cd0:	3023883a 	mov	r17,r6
10004cd4:	003ffb06 	br	10004cc4 <__alt_data_end+0xf8004cc4>
10004cd8:	1000021e 	bne	r2,zero,10004ce4 <_dtoa_r+0x1254>
10004cdc:	4200004c 	andi	r8,r8,1
10004ce0:	403e8f1e 	bne	r8,zero,10004720 <__alt_data_end+0xf8004720>
10004ce4:	01000c04 	movi	r4,48
10004ce8:	00000106 	br	10004cf0 <_dtoa_r+0x1260>
10004cec:	102f883a 	mov	r23,r2
10004cf0:	b8bfffc4 	addi	r2,r23,-1
10004cf4:	10c00007 	ldb	r3,0(r2)
10004cf8:	193ffc26 	beq	r3,r4,10004cec <__alt_data_end+0xf8004cec>
10004cfc:	003e9906 	br	10004764 <__alt_data_end+0xf8004764>
10004d00:	d9000517 	ldw	r4,20(sp)
10004d04:	012fc83a 	sub	r23,zero,r4
10004d08:	b800ad26 	beq	r23,zero,10004fc0 <_dtoa_r+0x1530>
10004d0c:	b88003cc 	andi	r2,r23,15
10004d10:	100490fa 	slli	r2,r2,3
10004d14:	00c40074 	movhi	r3,4097
10004d18:	18c1d704 	addi	r3,r3,1884
10004d1c:	1885883a 	add	r2,r3,r2
10004d20:	11800017 	ldw	r6,0(r2)
10004d24:	11c00117 	ldw	r7,4(r2)
10004d28:	b82fd13a 	srai	r23,r23,4
10004d2c:	9009883a 	mov	r4,r18
10004d30:	980b883a 	mov	r5,r19
10004d34:	000c8dc0 	call	1000c8dc <__muldf3>
10004d38:	1029883a 	mov	r20,r2
10004d3c:	182b883a 	mov	r21,r3
10004d40:	b800f426 	beq	r23,zero,10005114 <_dtoa_r+0x1684>
10004d44:	02040074 	movhi	r8,4097
10004d48:	4201cd04 	addi	r8,r8,1844
10004d4c:	8029883a 	mov	r20,r16
10004d50:	04400084 	movi	r17,2
10004d54:	4021883a 	mov	r16,r8
10004d58:	b980004c 	andi	r6,r23,1
10004d5c:	1009883a 	mov	r4,r2
10004d60:	b82fd07a 	srai	r23,r23,1
10004d64:	180b883a 	mov	r5,r3
10004d68:	30000426 	beq	r6,zero,10004d7c <_dtoa_r+0x12ec>
10004d6c:	81800017 	ldw	r6,0(r16)
10004d70:	81c00117 	ldw	r7,4(r16)
10004d74:	8c400044 	addi	r17,r17,1
10004d78:	000c8dc0 	call	1000c8dc <__muldf3>
10004d7c:	84000204 	addi	r16,r16,8
10004d80:	b83ff51e 	bne	r23,zero,10004d58 <__alt_data_end+0xf8004d58>
10004d84:	a021883a 	mov	r16,r20
10004d88:	182b883a 	mov	r21,r3
10004d8c:	1029883a 	mov	r20,r2
10004d90:	003c5506 	br	10003ee8 <__alt_data_end+0xf8003ee8>
10004d94:	d9800517 	ldw	r6,20(sp)
10004d98:	d9000717 	ldw	r4,28(sp)
10004d9c:	00c00c04 	movi	r3,48
10004da0:	31800044 	addi	r6,r6,1
10004da4:	d9800515 	stw	r6,20(sp)
10004da8:	20c00005 	stb	r3,0(r4)
10004dac:	02000c44 	movi	r8,49
10004db0:	003da206 	br	1000443c <__alt_data_end+0xf800443c>
10004db4:	89400117 	ldw	r5,4(r17)
10004db8:	8009883a 	mov	r4,r16
10004dbc:	0006f940 	call	10006f94 <_Balloc>
10004dc0:	89800417 	ldw	r6,16(r17)
10004dc4:	11000304 	addi	r4,r2,12
10004dc8:	89400304 	addi	r5,r17,12
10004dcc:	31800084 	addi	r6,r6,2
10004dd0:	318d883a 	add	r6,r6,r6
10004dd4:	318d883a 	add	r6,r6,r6
10004dd8:	1027883a 	mov	r19,r2
10004ddc:	00013140 	call	10001314 <memcpy>
10004de0:	8009883a 	mov	r4,r16
10004de4:	980b883a 	mov	r5,r19
10004de8:	01800044 	movi	r6,1
10004dec:	00077c80 	call	100077c8 <__lshift>
10004df0:	1029883a 	mov	r20,r2
10004df4:	003e8606 	br	10004810 <__alt_data_end+0xf8004810>
10004df8:	00800e44 	movi	r2,57
10004dfc:	90809526 	beq	r18,r2,10005054 <_dtoa_r+0x15c4>
10004e00:	92000044 	addi	r8,r18,1
10004e04:	003f2306 	br	10004a94 <__alt_data_end+0xf8004a94>
10004e08:	9011883a 	mov	r8,r18
10004e0c:	8825883a 	mov	r18,r17
10004e10:	a023883a 	mov	r17,r20
10004e14:	003e3706 	br	100046f4 <__alt_data_end+0xf80046f4>
10004e18:	002b883a 	mov	r21,zero
10004e1c:	0023883a 	mov	r17,zero
10004e20:	003f5606 	br	10004b7c <__alt_data_end+0xf8004b7c>
10004e24:	51bfffc4 	addi	r6,r10,-1
10004e28:	300490fa 	slli	r2,r6,3
10004e2c:	00c40074 	movhi	r3,4097
10004e30:	18c1d704 	addi	r3,r3,1884
10004e34:	1885883a 	add	r2,r3,r2
10004e38:	d9c00e17 	ldw	r7,56(sp)
10004e3c:	11000017 	ldw	r4,0(r2)
10004e40:	11400117 	ldw	r5,4(r2)
10004e44:	d8800717 	ldw	r2,28(sp)
10004e48:	d9801015 	stw	r6,64(sp)
10004e4c:	880d883a 	mov	r6,r17
10004e50:	da801615 	stw	r10,88(sp)
10004e54:	15c00044 	addi	r23,r2,1
10004e58:	000c8dc0 	call	1000c8dc <__muldf3>
10004e5c:	a80b883a 	mov	r5,r21
10004e60:	a009883a 	mov	r4,r20
10004e64:	d8c01115 	stw	r3,68(sp)
10004e68:	d8800e15 	stw	r2,56(sp)
10004e6c:	000da180 	call	1000da18 <__fixdfsi>
10004e70:	1009883a 	mov	r4,r2
10004e74:	1023883a 	mov	r17,r2
10004e78:	000daa00 	call	1000daa0 <__floatsidf>
10004e7c:	a009883a 	mov	r4,r20
10004e80:	a80b883a 	mov	r5,r21
10004e84:	100d883a 	mov	r6,r2
10004e88:	180f883a 	mov	r7,r3
10004e8c:	000d1480 	call	1000d148 <__subdf3>
10004e90:	1813883a 	mov	r9,r3
10004e94:	d8c00717 	ldw	r3,28(sp)
10004e98:	8c400c04 	addi	r17,r17,48
10004e9c:	1011883a 	mov	r8,r2
10004ea0:	1c400005 	stb	r17,0(r3)
10004ea4:	da801617 	ldw	r10,88(sp)
10004ea8:	00800044 	movi	r2,1
10004eac:	50802326 	beq	r10,r2,10004f3c <_dtoa_r+0x14ac>
10004eb0:	d8800717 	ldw	r2,28(sp)
10004eb4:	b82b883a 	mov	r21,r23
10004eb8:	dc001315 	stw	r16,76(sp)
10004ebc:	12a9883a 	add	r20,r2,r10
10004ec0:	4807883a 	mov	r3,r9
10004ec4:	4005883a 	mov	r2,r8
10004ec8:	dc801415 	stw	r18,80(sp)
10004ecc:	000d883a 	mov	r6,zero
10004ed0:	01d00934 	movhi	r7,16420
10004ed4:	1009883a 	mov	r4,r2
10004ed8:	180b883a 	mov	r5,r3
10004edc:	000c8dc0 	call	1000c8dc <__muldf3>
10004ee0:	180b883a 	mov	r5,r3
10004ee4:	1009883a 	mov	r4,r2
10004ee8:	1821883a 	mov	r16,r3
10004eec:	1025883a 	mov	r18,r2
10004ef0:	000da180 	call	1000da18 <__fixdfsi>
10004ef4:	1009883a 	mov	r4,r2
10004ef8:	1023883a 	mov	r17,r2
10004efc:	000daa00 	call	1000daa0 <__floatsidf>
10004f00:	9009883a 	mov	r4,r18
10004f04:	800b883a 	mov	r5,r16
10004f08:	100d883a 	mov	r6,r2
10004f0c:	180f883a 	mov	r7,r3
10004f10:	8c400c04 	addi	r17,r17,48
10004f14:	000d1480 	call	1000d148 <__subdf3>
10004f18:	ad400044 	addi	r21,r21,1
10004f1c:	ac7fffc5 	stb	r17,-1(r21)
10004f20:	ad3fea1e 	bne	r21,r20,10004ecc <__alt_data_end+0xf8004ecc>
10004f24:	1813883a 	mov	r9,r3
10004f28:	d8c01017 	ldw	r3,64(sp)
10004f2c:	dc001317 	ldw	r16,76(sp)
10004f30:	dc801417 	ldw	r18,80(sp)
10004f34:	1011883a 	mov	r8,r2
10004f38:	b8ef883a 	add	r23,r23,r3
10004f3c:	d9000e17 	ldw	r4,56(sp)
10004f40:	d9401117 	ldw	r5,68(sp)
10004f44:	000d883a 	mov	r6,zero
10004f48:	01cff834 	movhi	r7,16352
10004f4c:	da001715 	stw	r8,92(sp)
10004f50:	da401515 	stw	r9,84(sp)
10004f54:	000b47c0 	call	1000b47c <__adddf3>
10004f58:	da001717 	ldw	r8,92(sp)
10004f5c:	da401517 	ldw	r9,84(sp)
10004f60:	1009883a 	mov	r4,r2
10004f64:	400d883a 	mov	r6,r8
10004f68:	480f883a 	mov	r7,r9
10004f6c:	180b883a 	mov	r5,r3
10004f70:	000c7fc0 	call	1000c7fc <__ledf2>
10004f74:	da001717 	ldw	r8,92(sp)
10004f78:	da401517 	ldw	r9,84(sp)
10004f7c:	10003b0e 	bge	r2,zero,1000506c <_dtoa_r+0x15dc>
10004f80:	d9001217 	ldw	r4,72(sp)
10004f84:	bd7fffc3 	ldbu	r21,-1(r23)
10004f88:	d9000515 	stw	r4,20(sp)
10004f8c:	003d1c06 	br	10004400 <__alt_data_end+0xf8004400>
10004f90:	d8c00817 	ldw	r3,32(sp)
10004f94:	18a9c83a 	sub	r20,r3,r2
10004f98:	0005883a 	mov	r2,zero
10004f9c:	003d3706 	br	1000447c <__alt_data_end+0xf800447c>
10004fa0:	00800044 	movi	r2,1
10004fa4:	003dd006 	br	100046e8 <__alt_data_end+0xf80046e8>
10004fa8:	d8c00217 	ldw	r3,8(sp)
10004fac:	00800d84 	movi	r2,54
10004fb0:	dd400917 	ldw	r21,36(sp)
10004fb4:	10c5c83a 	sub	r2,r2,r3
10004fb8:	dd000817 	ldw	r20,32(sp)
10004fbc:	003d2f06 	br	1000447c <__alt_data_end+0xf800447c>
10004fc0:	9029883a 	mov	r20,r18
10004fc4:	982b883a 	mov	r21,r19
10004fc8:	04400084 	movi	r17,2
10004fcc:	003bc606 	br	10003ee8 <__alt_data_end+0xf8003ee8>
10004fd0:	d8800617 	ldw	r2,24(sp)
10004fd4:	103efc26 	beq	r2,zero,10004bc8 <__alt_data_end+0xf8004bc8>
10004fd8:	d8c00d17 	ldw	r3,52(sp)
10004fdc:	00fc890e 	bge	zero,r3,10004204 <__alt_data_end+0xf8004204>
10004fe0:	a80b883a 	mov	r5,r21
10004fe4:	a009883a 	mov	r4,r20
10004fe8:	000d883a 	mov	r6,zero
10004fec:	01d00934 	movhi	r7,16420
10004ff0:	000c8dc0 	call	1000c8dc <__muldf3>
10004ff4:	89000044 	addi	r4,r17,1
10004ff8:	1029883a 	mov	r20,r2
10004ffc:	182b883a 	mov	r21,r3
10005000:	000daa00 	call	1000daa0 <__floatsidf>
10005004:	a009883a 	mov	r4,r20
10005008:	a80b883a 	mov	r5,r21
1000500c:	100d883a 	mov	r6,r2
10005010:	180f883a 	mov	r7,r3
10005014:	000c8dc0 	call	1000c8dc <__muldf3>
10005018:	1009883a 	mov	r4,r2
1000501c:	180b883a 	mov	r5,r3
10005020:	000d883a 	mov	r6,zero
10005024:	01d00734 	movhi	r7,16412
10005028:	000b47c0 	call	1000b47c <__adddf3>
1000502c:	d9000517 	ldw	r4,20(sp)
10005030:	1023883a 	mov	r17,r2
10005034:	00bf3034 	movhi	r2,64704
10005038:	213fffc4 	addi	r4,r4,-1
1000503c:	1885883a 	add	r2,r3,r2
10005040:	d9001215 	stw	r4,72(sp)
10005044:	d8800e15 	stw	r2,56(sp)
10005048:	da800d17 	ldw	r10,52(sp)
1000504c:	003bc306 	br	10003f5c <__alt_data_end+0xf8003f5c>
10005050:	b039883a 	mov	fp,r22
10005054:	01000e44 	movi	r4,57
10005058:	8825883a 	mov	r18,r17
1000505c:	9dc00044 	addi	r23,r19,1
10005060:	99000005 	stb	r4,0(r19)
10005064:	a023883a 	mov	r17,r20
10005068:	003dae06 	br	10004724 <__alt_data_end+0xf8004724>
1000506c:	d9800e17 	ldw	r6,56(sp)
10005070:	d9c01117 	ldw	r7,68(sp)
10005074:	0009883a 	mov	r4,zero
10005078:	014ff834 	movhi	r5,16352
1000507c:	da001715 	stw	r8,92(sp)
10005080:	da401515 	stw	r9,84(sp)
10005084:	000d1480 	call	1000d148 <__subdf3>
10005088:	da001717 	ldw	r8,92(sp)
1000508c:	da401517 	ldw	r9,84(sp)
10005090:	1009883a 	mov	r4,r2
10005094:	180b883a 	mov	r5,r3
10005098:	400d883a 	mov	r6,r8
1000509c:	480f883a 	mov	r7,r9
100050a0:	000c71c0 	call	1000c71c <__gedf2>
100050a4:	00bc570e 	bge	zero,r2,10004204 <__alt_data_end+0xf8004204>
100050a8:	01000c04 	movi	r4,48
100050ac:	00000106 	br	100050b4 <_dtoa_r+0x1624>
100050b0:	102f883a 	mov	r23,r2
100050b4:	b8bfffc4 	addi	r2,r23,-1
100050b8:	10c00007 	ldb	r3,0(r2)
100050bc:	193ffc26 	beq	r3,r4,100050b0 <__alt_data_end+0xf80050b0>
100050c0:	d9801217 	ldw	r6,72(sp)
100050c4:	d9800515 	stw	r6,20(sp)
100050c8:	003c1f06 	br	10004148 <__alt_data_end+0xf8004148>
100050cc:	d8801217 	ldw	r2,72(sp)
100050d0:	dc001117 	ldw	r16,68(sp)
100050d4:	d8800515 	stw	r2,20(sp)
100050d8:	003cc906 	br	10004400 <__alt_data_end+0xf8004400>
100050dc:	dd801317 	ldw	r22,76(sp)
100050e0:	dc001117 	ldw	r16,68(sp)
100050e4:	dcc01417 	ldw	r19,80(sp)
100050e8:	dc801017 	ldw	r18,64(sp)
100050ec:	003c4506 	br	10004204 <__alt_data_end+0xf8004204>
100050f0:	103e5d1e 	bne	r2,zero,10004a68 <__alt_data_end+0xf8004a68>
100050f4:	4080004c 	andi	r2,r8,1
100050f8:	103e5b26 	beq	r2,zero,10004a68 <__alt_data_end+0xf8004a68>
100050fc:	003e5706 	br	10004a5c <__alt_data_end+0xf8004a5c>
10005100:	d8c00317 	ldw	r3,12(sp)
10005104:	00800084 	movi	r2,2
10005108:	10c00a16 	blt	r2,r3,10005134 <_dtoa_r+0x16a4>
1000510c:	d9000d17 	ldw	r4,52(sp)
10005110:	003e8306 	br	10004b20 <__alt_data_end+0xf8004b20>
10005114:	04400084 	movi	r17,2
10005118:	003b7306 	br	10003ee8 <__alt_data_end+0xf8003ee8>
1000511c:	d9801217 	ldw	r6,72(sp)
10005120:	d9800515 	stw	r6,20(sp)
10005124:	003cb606 	br	10004400 <__alt_data_end+0xf8004400>
10005128:	d9001217 	ldw	r4,72(sp)
1000512c:	d9000515 	stw	r4,20(sp)
10005130:	003c0506 	br	10004148 <__alt_data_end+0xf8004148>
10005134:	d9800d17 	ldw	r6,52(sp)
10005138:	d9800615 	stw	r6,24(sp)
1000513c:	003e8306 	br	10004b4c <__alt_data_end+0xf8004b4c>
10005140:	d9800317 	ldw	r6,12(sp)
10005144:	00800084 	movi	r2,2
10005148:	11800216 	blt	r2,r6,10005154 <_dtoa_r+0x16c4>
1000514c:	d8800d17 	ldw	r2,52(sp)
10005150:	003da606 	br	100047ec <__alt_data_end+0xf80047ec>
10005154:	d8800d17 	ldw	r2,52(sp)
10005158:	d8800615 	stw	r2,24(sp)
1000515c:	003e7b06 	br	10004b4c <__alt_data_end+0xf8004b4c>
10005160:	05000044 	movi	r20,1
10005164:	003b0506 	br	10003d7c <__alt_data_end+0xf8003d7c>
10005168:	8009883a 	mov	r4,r16
1000516c:	80001115 	stw	zero,68(r16)
10005170:	000b883a 	mov	r5,zero
10005174:	0006f940 	call	10006f94 <_Balloc>
10005178:	d8800715 	stw	r2,28(sp)
1000517c:	d8c00717 	ldw	r3,28(sp)
10005180:	00bfffc4 	movi	r2,-1
10005184:	01000044 	movi	r4,1
10005188:	d8800615 	stw	r2,24(sp)
1000518c:	80c01015 	stw	r3,64(r16)
10005190:	d9000b15 	stw	r4,44(sp)
10005194:	d8002215 	stw	zero,136(sp)
10005198:	d8800d15 	stw	r2,52(sp)
1000519c:	003c1906 	br	10004204 <__alt_data_end+0xf8004204>
100051a0:	193d2926 	beq	r3,r4,10004648 <__alt_data_end+0xf8004648>
100051a4:	00c00f04 	movi	r3,60
100051a8:	1885c83a 	sub	r2,r3,r2
100051ac:	003d7b06 	br	1000479c <__alt_data_end+0xf800479c>
100051b0:	000b883a 	mov	r5,zero
100051b4:	003b1006 	br	10003df8 <__alt_data_end+0xf8003df8>

100051b8 <_fflush_r>:
100051b8:	defffb04 	addi	sp,sp,-20
100051bc:	dcc00315 	stw	r19,12(sp)
100051c0:	dc000015 	stw	r16,0(sp)
100051c4:	dfc00415 	stw	ra,16(sp)
100051c8:	dc800215 	stw	r18,8(sp)
100051cc:	dc400115 	stw	r17,4(sp)
100051d0:	2027883a 	mov	r19,r4
100051d4:	2821883a 	mov	r16,r5
100051d8:	20000226 	beq	r4,zero,100051e4 <_fflush_r+0x2c>
100051dc:	20800e17 	ldw	r2,56(r4)
100051e0:	10005326 	beq	r2,zero,10005330 <_fflush_r+0x178>
100051e4:	8080030b 	ldhu	r2,12(r16)
100051e8:	10ffffcc 	andi	r3,r2,65535
100051ec:	18e0001c 	xori	r3,r3,32768
100051f0:	18e00004 	addi	r3,r3,-32768
100051f4:	18002c26 	beq	r3,zero,100052a8 <_fflush_r+0xf0>
100051f8:	10c0020c 	andi	r3,r2,8
100051fc:	1800321e 	bne	r3,zero,100052c8 <_fflush_r+0x110>
10005200:	80c00117 	ldw	r3,4(r16)
10005204:	10820014 	ori	r2,r2,2048
10005208:	8080030d 	sth	r2,12(r16)
1000520c:	00c0570e 	bge	zero,r3,1000536c <_fflush_r+0x1b4>
10005210:	82000a17 	ldw	r8,40(r16)
10005214:	40002426 	beq	r8,zero,100052a8 <_fflush_r+0xf0>
10005218:	9c400017 	ldw	r17,0(r19)
1000521c:	10c4000c 	andi	r3,r2,4096
10005220:	98000015 	stw	zero,0(r19)
10005224:	18004626 	beq	r3,zero,10005340 <_fflush_r+0x188>
10005228:	81801417 	ldw	r6,80(r16)
1000522c:	10c0010c 	andi	r3,r2,4
10005230:	18000626 	beq	r3,zero,1000524c <_fflush_r+0x94>
10005234:	80c00117 	ldw	r3,4(r16)
10005238:	80800c17 	ldw	r2,48(r16)
1000523c:	30cdc83a 	sub	r6,r6,r3
10005240:	10000226 	beq	r2,zero,1000524c <_fflush_r+0x94>
10005244:	80800f17 	ldw	r2,60(r16)
10005248:	308dc83a 	sub	r6,r6,r2
1000524c:	81400717 	ldw	r5,28(r16)
10005250:	9809883a 	mov	r4,r19
10005254:	000f883a 	mov	r7,zero
10005258:	403ee83a 	callr	r8
1000525c:	00ffffc4 	movi	r3,-1
10005260:	10c04526 	beq	r2,r3,10005378 <_fflush_r+0x1c0>
10005264:	80c0030b 	ldhu	r3,12(r16)
10005268:	81000417 	ldw	r4,16(r16)
1000526c:	80000115 	stw	zero,4(r16)
10005270:	197dffcc 	andi	r5,r3,63487
10005274:	8140030d 	sth	r5,12(r16)
10005278:	81000015 	stw	r4,0(r16)
1000527c:	18c4000c 	andi	r3,r3,4096
10005280:	18000126 	beq	r3,zero,10005288 <_fflush_r+0xd0>
10005284:	80801415 	stw	r2,80(r16)
10005288:	81400c17 	ldw	r5,48(r16)
1000528c:	9c400015 	stw	r17,0(r19)
10005290:	28000526 	beq	r5,zero,100052a8 <_fflush_r+0xf0>
10005294:	80801004 	addi	r2,r16,64
10005298:	28800226 	beq	r5,r2,100052a4 <_fflush_r+0xec>
1000529c:	9809883a 	mov	r4,r19
100052a0:	00058e80 	call	100058e8 <_free_r>
100052a4:	80000c15 	stw	zero,48(r16)
100052a8:	0005883a 	mov	r2,zero
100052ac:	dfc00417 	ldw	ra,16(sp)
100052b0:	dcc00317 	ldw	r19,12(sp)
100052b4:	dc800217 	ldw	r18,8(sp)
100052b8:	dc400117 	ldw	r17,4(sp)
100052bc:	dc000017 	ldw	r16,0(sp)
100052c0:	dec00504 	addi	sp,sp,20
100052c4:	f800283a 	ret
100052c8:	84800417 	ldw	r18,16(r16)
100052cc:	903ff626 	beq	r18,zero,100052a8 <__alt_data_end+0xf80052a8>
100052d0:	84400017 	ldw	r17,0(r16)
100052d4:	108000cc 	andi	r2,r2,3
100052d8:	84800015 	stw	r18,0(r16)
100052dc:	8ca3c83a 	sub	r17,r17,r18
100052e0:	10001526 	beq	r2,zero,10005338 <_fflush_r+0x180>
100052e4:	0005883a 	mov	r2,zero
100052e8:	80800215 	stw	r2,8(r16)
100052ec:	04400316 	blt	zero,r17,100052fc <_fflush_r+0x144>
100052f0:	003fed06 	br	100052a8 <__alt_data_end+0xf80052a8>
100052f4:	90a5883a 	add	r18,r18,r2
100052f8:	047feb0e 	bge	zero,r17,100052a8 <__alt_data_end+0xf80052a8>
100052fc:	80800917 	ldw	r2,36(r16)
10005300:	81400717 	ldw	r5,28(r16)
10005304:	880f883a 	mov	r7,r17
10005308:	900d883a 	mov	r6,r18
1000530c:	9809883a 	mov	r4,r19
10005310:	103ee83a 	callr	r2
10005314:	88a3c83a 	sub	r17,r17,r2
10005318:	00bff616 	blt	zero,r2,100052f4 <__alt_data_end+0xf80052f4>
1000531c:	80c0030b 	ldhu	r3,12(r16)
10005320:	00bfffc4 	movi	r2,-1
10005324:	18c01014 	ori	r3,r3,64
10005328:	80c0030d 	sth	r3,12(r16)
1000532c:	003fdf06 	br	100052ac <__alt_data_end+0xf80052ac>
10005330:	00057740 	call	10005774 <__sinit>
10005334:	003fab06 	br	100051e4 <__alt_data_end+0xf80051e4>
10005338:	80800517 	ldw	r2,20(r16)
1000533c:	003fea06 	br	100052e8 <__alt_data_end+0xf80052e8>
10005340:	81400717 	ldw	r5,28(r16)
10005344:	000d883a 	mov	r6,zero
10005348:	9809883a 	mov	r4,r19
1000534c:	01c00044 	movi	r7,1
10005350:	403ee83a 	callr	r8
10005354:	100d883a 	mov	r6,r2
10005358:	00bfffc4 	movi	r2,-1
1000535c:	30801326 	beq	r6,r2,100053ac <_fflush_r+0x1f4>
10005360:	8080030b 	ldhu	r2,12(r16)
10005364:	82000a17 	ldw	r8,40(r16)
10005368:	003fb006 	br	1000522c <__alt_data_end+0xf800522c>
1000536c:	80c00f17 	ldw	r3,60(r16)
10005370:	00ffa716 	blt	zero,r3,10005210 <__alt_data_end+0xf8005210>
10005374:	003fcc06 	br	100052a8 <__alt_data_end+0xf80052a8>
10005378:	98c00017 	ldw	r3,0(r19)
1000537c:	183fb926 	beq	r3,zero,10005264 <__alt_data_end+0xf8005264>
10005380:	01000744 	movi	r4,29
10005384:	19000226 	beq	r3,r4,10005390 <_fflush_r+0x1d8>
10005388:	01000584 	movi	r4,22
1000538c:	1900101e 	bne	r3,r4,100053d0 <_fflush_r+0x218>
10005390:	8080030b 	ldhu	r2,12(r16)
10005394:	80c00417 	ldw	r3,16(r16)
10005398:	80000115 	stw	zero,4(r16)
1000539c:	10bdffcc 	andi	r2,r2,63487
100053a0:	8080030d 	sth	r2,12(r16)
100053a4:	80c00015 	stw	r3,0(r16)
100053a8:	003fb706 	br	10005288 <__alt_data_end+0xf8005288>
100053ac:	98800017 	ldw	r2,0(r19)
100053b0:	103feb26 	beq	r2,zero,10005360 <__alt_data_end+0xf8005360>
100053b4:	00c00744 	movi	r3,29
100053b8:	10c00226 	beq	r2,r3,100053c4 <_fflush_r+0x20c>
100053bc:	00c00584 	movi	r3,22
100053c0:	10ffd61e 	bne	r2,r3,1000531c <__alt_data_end+0xf800531c>
100053c4:	9c400015 	stw	r17,0(r19)
100053c8:	0005883a 	mov	r2,zero
100053cc:	003fb706 	br	100052ac <__alt_data_end+0xf80052ac>
100053d0:	80c0030b 	ldhu	r3,12(r16)
100053d4:	18c01014 	ori	r3,r3,64
100053d8:	80c0030d 	sth	r3,12(r16)
100053dc:	003fb306 	br	100052ac <__alt_data_end+0xf80052ac>

100053e0 <fflush>:
100053e0:	20000526 	beq	r4,zero,100053f8 <fflush+0x18>
100053e4:	00840074 	movhi	r2,4097
100053e8:	108a9904 	addi	r2,r2,10852
100053ec:	200b883a 	mov	r5,r4
100053f0:	11000017 	ldw	r4,0(r2)
100053f4:	00051b81 	jmpi	100051b8 <_fflush_r>
100053f8:	00840074 	movhi	r2,4097
100053fc:	108a9804 	addi	r2,r2,10848
10005400:	11000017 	ldw	r4,0(r2)
10005404:	01440034 	movhi	r5,4096
10005408:	29546e04 	addi	r5,r5,20920
1000540c:	00061341 	jmpi	10006134 <_fwalk_reent>

10005410 <__fp_lock>:
10005410:	0005883a 	mov	r2,zero
10005414:	f800283a 	ret

10005418 <__fp_unlock>:
10005418:	0005883a 	mov	r2,zero
1000541c:	f800283a 	ret

10005420 <_cleanup_r>:
10005420:	01440074 	movhi	r5,4097
10005424:	29680204 	addi	r5,r5,-24568
10005428:	000607c1 	jmpi	1000607c <_fwalk>

1000542c <__sinit.part.1>:
1000542c:	defff604 	addi	sp,sp,-40
10005430:	00c40034 	movhi	r3,4096
10005434:	dfc00915 	stw	ra,36(sp)
10005438:	df000815 	stw	fp,32(sp)
1000543c:	ddc00715 	stw	r23,28(sp)
10005440:	dd800615 	stw	r22,24(sp)
10005444:	dd400515 	stw	r21,20(sp)
10005448:	dd000415 	stw	r20,16(sp)
1000544c:	dcc00315 	stw	r19,12(sp)
10005450:	dc800215 	stw	r18,8(sp)
10005454:	dc400115 	stw	r17,4(sp)
10005458:	dc000015 	stw	r16,0(sp)
1000545c:	18d50804 	addi	r3,r3,21536
10005460:	24000117 	ldw	r16,4(r4)
10005464:	20c00f15 	stw	r3,60(r4)
10005468:	07000044 	movi	fp,1
1000546c:	00c000c4 	movi	r3,3
10005470:	2080bb04 	addi	r2,r4,748
10005474:	20c0b915 	stw	r3,740(r4)
10005478:	27000e15 	stw	fp,56(r4)
1000547c:	2080ba15 	stw	r2,744(r4)
10005480:	2000b815 	stw	zero,736(r4)
10005484:	05c00204 	movi	r23,8
10005488:	00800104 	movi	r2,4
1000548c:	2025883a 	mov	r18,r4
10005490:	b80d883a 	mov	r6,r23
10005494:	81001704 	addi	r4,r16,92
10005498:	000b883a 	mov	r5,zero
1000549c:	80000015 	stw	zero,0(r16)
100054a0:	80000115 	stw	zero,4(r16)
100054a4:	80000215 	stw	zero,8(r16)
100054a8:	8080030d 	sth	r2,12(r16)
100054ac:	80001915 	stw	zero,100(r16)
100054b0:	8000038d 	sth	zero,14(r16)
100054b4:	80000415 	stw	zero,16(r16)
100054b8:	80000515 	stw	zero,20(r16)
100054bc:	80000615 	stw	zero,24(r16)
100054c0:	0006e700 	call	10006e70 <memset>
100054c4:	05840074 	movhi	r22,4097
100054c8:	94400217 	ldw	r17,8(r18)
100054cc:	05440074 	movhi	r21,4097
100054d0:	05040074 	movhi	r20,4097
100054d4:	04c40074 	movhi	r19,4097
100054d8:	b5a19104 	addi	r22,r22,-31164
100054dc:	ad61a804 	addi	r21,r21,-31072
100054e0:	a521c704 	addi	r20,r20,-30948
100054e4:	9ce1de04 	addi	r19,r19,-30856
100054e8:	85800815 	stw	r22,32(r16)
100054ec:	85400915 	stw	r21,36(r16)
100054f0:	85000a15 	stw	r20,40(r16)
100054f4:	84c00b15 	stw	r19,44(r16)
100054f8:	84000715 	stw	r16,28(r16)
100054fc:	00800284 	movi	r2,10
10005500:	89001704 	addi	r4,r17,92
10005504:	b80d883a 	mov	r6,r23
10005508:	000b883a 	mov	r5,zero
1000550c:	88000015 	stw	zero,0(r17)
10005510:	88000115 	stw	zero,4(r17)
10005514:	88000215 	stw	zero,8(r17)
10005518:	8880030d 	sth	r2,12(r17)
1000551c:	88001915 	stw	zero,100(r17)
10005520:	8f00038d 	sth	fp,14(r17)
10005524:	88000415 	stw	zero,16(r17)
10005528:	88000515 	stw	zero,20(r17)
1000552c:	88000615 	stw	zero,24(r17)
10005530:	0006e700 	call	10006e70 <memset>
10005534:	94000317 	ldw	r16,12(r18)
10005538:	00800484 	movi	r2,18
1000553c:	8c400715 	stw	r17,28(r17)
10005540:	8d800815 	stw	r22,32(r17)
10005544:	8d400915 	stw	r21,36(r17)
10005548:	8d000a15 	stw	r20,40(r17)
1000554c:	8cc00b15 	stw	r19,44(r17)
10005550:	8080030d 	sth	r2,12(r16)
10005554:	00800084 	movi	r2,2
10005558:	80000015 	stw	zero,0(r16)
1000555c:	80000115 	stw	zero,4(r16)
10005560:	80000215 	stw	zero,8(r16)
10005564:	80001915 	stw	zero,100(r16)
10005568:	8080038d 	sth	r2,14(r16)
1000556c:	80000415 	stw	zero,16(r16)
10005570:	80000515 	stw	zero,20(r16)
10005574:	80000615 	stw	zero,24(r16)
10005578:	81001704 	addi	r4,r16,92
1000557c:	000b883a 	mov	r5,zero
10005580:	b80d883a 	mov	r6,r23
10005584:	0006e700 	call	10006e70 <memset>
10005588:	84000715 	stw	r16,28(r16)
1000558c:	85800815 	stw	r22,32(r16)
10005590:	85400915 	stw	r21,36(r16)
10005594:	85000a15 	stw	r20,40(r16)
10005598:	84c00b15 	stw	r19,44(r16)
1000559c:	dfc00917 	ldw	ra,36(sp)
100055a0:	df000817 	ldw	fp,32(sp)
100055a4:	ddc00717 	ldw	r23,28(sp)
100055a8:	dd800617 	ldw	r22,24(sp)
100055ac:	dd400517 	ldw	r21,20(sp)
100055b0:	dd000417 	ldw	r20,16(sp)
100055b4:	dcc00317 	ldw	r19,12(sp)
100055b8:	dc800217 	ldw	r18,8(sp)
100055bc:	dc400117 	ldw	r17,4(sp)
100055c0:	dc000017 	ldw	r16,0(sp)
100055c4:	dec00a04 	addi	sp,sp,40
100055c8:	f800283a 	ret

100055cc <__sfmoreglue>:
100055cc:	defffc04 	addi	sp,sp,-16
100055d0:	dc800215 	stw	r18,8(sp)
100055d4:	2825883a 	mov	r18,r5
100055d8:	dc000015 	stw	r16,0(sp)
100055dc:	01401a04 	movi	r5,104
100055e0:	2021883a 	mov	r16,r4
100055e4:	9009883a 	mov	r4,r18
100055e8:	dfc00315 	stw	ra,12(sp)
100055ec:	dc400115 	stw	r17,4(sp)
100055f0:	000b4540 	call	1000b454 <__mulsi3>
100055f4:	8009883a 	mov	r4,r16
100055f8:	11400304 	addi	r5,r2,12
100055fc:	1023883a 	mov	r17,r2
10005600:	00064840 	call	10006484 <_malloc_r>
10005604:	1021883a 	mov	r16,r2
10005608:	10000726 	beq	r2,zero,10005628 <__sfmoreglue+0x5c>
1000560c:	11000304 	addi	r4,r2,12
10005610:	10000015 	stw	zero,0(r2)
10005614:	14800115 	stw	r18,4(r2)
10005618:	11000215 	stw	r4,8(r2)
1000561c:	000b883a 	mov	r5,zero
10005620:	880d883a 	mov	r6,r17
10005624:	0006e700 	call	10006e70 <memset>
10005628:	8005883a 	mov	r2,r16
1000562c:	dfc00317 	ldw	ra,12(sp)
10005630:	dc800217 	ldw	r18,8(sp)
10005634:	dc400117 	ldw	r17,4(sp)
10005638:	dc000017 	ldw	r16,0(sp)
1000563c:	dec00404 	addi	sp,sp,16
10005640:	f800283a 	ret

10005644 <__sfp>:
10005644:	00840074 	movhi	r2,4097
10005648:	defffb04 	addi	sp,sp,-20
1000564c:	108a9804 	addi	r2,r2,10848
10005650:	dc800215 	stw	r18,8(sp)
10005654:	14800017 	ldw	r18,0(r2)
10005658:	dcc00315 	stw	r19,12(sp)
1000565c:	dfc00415 	stw	ra,16(sp)
10005660:	90800e17 	ldw	r2,56(r18)
10005664:	dc400115 	stw	r17,4(sp)
10005668:	dc000015 	stw	r16,0(sp)
1000566c:	2027883a 	mov	r19,r4
10005670:	1000021e 	bne	r2,zero,1000567c <__sfp+0x38>
10005674:	9009883a 	mov	r4,r18
10005678:	000542c0 	call	1000542c <__sinit.part.1>
1000567c:	9480b804 	addi	r18,r18,736
10005680:	047fffc4 	movi	r17,-1
10005684:	91400117 	ldw	r5,4(r18)
10005688:	94000217 	ldw	r16,8(r18)
1000568c:	297fffc4 	addi	r5,r5,-1
10005690:	28000a16 	blt	r5,zero,100056bc <__sfp+0x78>
10005694:	8080030f 	ldh	r2,12(r16)
10005698:	10000c26 	beq	r2,zero,100056cc <__sfp+0x88>
1000569c:	80c01d04 	addi	r3,r16,116
100056a0:	00000206 	br	100056ac <__sfp+0x68>
100056a4:	18bfe60f 	ldh	r2,-104(r3)
100056a8:	10000826 	beq	r2,zero,100056cc <__sfp+0x88>
100056ac:	297fffc4 	addi	r5,r5,-1
100056b0:	1c3ffd04 	addi	r16,r3,-12
100056b4:	18c01a04 	addi	r3,r3,104
100056b8:	2c7ffa1e 	bne	r5,r17,100056a4 <__alt_data_end+0xf80056a4>
100056bc:	90800017 	ldw	r2,0(r18)
100056c0:	10001d26 	beq	r2,zero,10005738 <__sfp+0xf4>
100056c4:	1025883a 	mov	r18,r2
100056c8:	003fee06 	br	10005684 <__alt_data_end+0xf8005684>
100056cc:	00bfffc4 	movi	r2,-1
100056d0:	8080038d 	sth	r2,14(r16)
100056d4:	00800044 	movi	r2,1
100056d8:	8080030d 	sth	r2,12(r16)
100056dc:	80001915 	stw	zero,100(r16)
100056e0:	80000015 	stw	zero,0(r16)
100056e4:	80000215 	stw	zero,8(r16)
100056e8:	80000115 	stw	zero,4(r16)
100056ec:	80000415 	stw	zero,16(r16)
100056f0:	80000515 	stw	zero,20(r16)
100056f4:	80000615 	stw	zero,24(r16)
100056f8:	81001704 	addi	r4,r16,92
100056fc:	000b883a 	mov	r5,zero
10005700:	01800204 	movi	r6,8
10005704:	0006e700 	call	10006e70 <memset>
10005708:	8005883a 	mov	r2,r16
1000570c:	80000c15 	stw	zero,48(r16)
10005710:	80000d15 	stw	zero,52(r16)
10005714:	80001115 	stw	zero,68(r16)
10005718:	80001215 	stw	zero,72(r16)
1000571c:	dfc00417 	ldw	ra,16(sp)
10005720:	dcc00317 	ldw	r19,12(sp)
10005724:	dc800217 	ldw	r18,8(sp)
10005728:	dc400117 	ldw	r17,4(sp)
1000572c:	dc000017 	ldw	r16,0(sp)
10005730:	dec00504 	addi	sp,sp,20
10005734:	f800283a 	ret
10005738:	9809883a 	mov	r4,r19
1000573c:	01400104 	movi	r5,4
10005740:	00055cc0 	call	100055cc <__sfmoreglue>
10005744:	90800015 	stw	r2,0(r18)
10005748:	103fde1e 	bne	r2,zero,100056c4 <__alt_data_end+0xf80056c4>
1000574c:	00800304 	movi	r2,12
10005750:	98800015 	stw	r2,0(r19)
10005754:	0005883a 	mov	r2,zero
10005758:	003ff006 	br	1000571c <__alt_data_end+0xf800571c>

1000575c <_cleanup>:
1000575c:	00840074 	movhi	r2,4097
10005760:	108a9804 	addi	r2,r2,10848
10005764:	11000017 	ldw	r4,0(r2)
10005768:	01440074 	movhi	r5,4097
1000576c:	29680204 	addi	r5,r5,-24568
10005770:	000607c1 	jmpi	1000607c <_fwalk>

10005774 <__sinit>:
10005774:	20800e17 	ldw	r2,56(r4)
10005778:	10000126 	beq	r2,zero,10005780 <__sinit+0xc>
1000577c:	f800283a 	ret
10005780:	000542c1 	jmpi	1000542c <__sinit.part.1>

10005784 <__sfp_lock_acquire>:
10005784:	f800283a 	ret

10005788 <__sfp_lock_release>:
10005788:	f800283a 	ret

1000578c <__sinit_lock_acquire>:
1000578c:	f800283a 	ret

10005790 <__sinit_lock_release>:
10005790:	f800283a 	ret

10005794 <__fp_lock_all>:
10005794:	00840074 	movhi	r2,4097
10005798:	108a9904 	addi	r2,r2,10852
1000579c:	11000017 	ldw	r4,0(r2)
100057a0:	01440034 	movhi	r5,4096
100057a4:	29550404 	addi	r5,r5,21520
100057a8:	000607c1 	jmpi	1000607c <_fwalk>

100057ac <__fp_unlock_all>:
100057ac:	00840074 	movhi	r2,4097
100057b0:	108a9904 	addi	r2,r2,10852
100057b4:	11000017 	ldw	r4,0(r2)
100057b8:	01440034 	movhi	r5,4096
100057bc:	29550604 	addi	r5,r5,21528
100057c0:	000607c1 	jmpi	1000607c <_fwalk>

100057c4 <_malloc_trim_r>:
100057c4:	defffb04 	addi	sp,sp,-20
100057c8:	dcc00315 	stw	r19,12(sp)
100057cc:	04c40074 	movhi	r19,4097
100057d0:	dc800215 	stw	r18,8(sp)
100057d4:	dc400115 	stw	r17,4(sp)
100057d8:	dc000015 	stw	r16,0(sp)
100057dc:	dfc00415 	stw	ra,16(sp)
100057e0:	2821883a 	mov	r16,r5
100057e4:	9cc51404 	addi	r19,r19,5200
100057e8:	2025883a 	mov	r18,r4
100057ec:	000e2580 	call	1000e258 <__malloc_lock>
100057f0:	98800217 	ldw	r2,8(r19)
100057f4:	14400117 	ldw	r17,4(r2)
100057f8:	00bfff04 	movi	r2,-4
100057fc:	88a2703a 	and	r17,r17,r2
10005800:	8c21c83a 	sub	r16,r17,r16
10005804:	8403fbc4 	addi	r16,r16,4079
10005808:	8020d33a 	srli	r16,r16,12
1000580c:	0083ffc4 	movi	r2,4095
10005810:	843fffc4 	addi	r16,r16,-1
10005814:	8020933a 	slli	r16,r16,12
10005818:	1400060e 	bge	r2,r16,10005834 <_malloc_trim_r+0x70>
1000581c:	9009883a 	mov	r4,r18
10005820:	000b883a 	mov	r5,zero
10005824:	00085f00 	call	100085f0 <_sbrk_r>
10005828:	98c00217 	ldw	r3,8(r19)
1000582c:	1c47883a 	add	r3,r3,r17
10005830:	10c00a26 	beq	r2,r3,1000585c <_malloc_trim_r+0x98>
10005834:	9009883a 	mov	r4,r18
10005838:	000e2780 	call	1000e278 <__malloc_unlock>
1000583c:	0005883a 	mov	r2,zero
10005840:	dfc00417 	ldw	ra,16(sp)
10005844:	dcc00317 	ldw	r19,12(sp)
10005848:	dc800217 	ldw	r18,8(sp)
1000584c:	dc400117 	ldw	r17,4(sp)
10005850:	dc000017 	ldw	r16,0(sp)
10005854:	dec00504 	addi	sp,sp,20
10005858:	f800283a 	ret
1000585c:	9009883a 	mov	r4,r18
10005860:	040bc83a 	sub	r5,zero,r16
10005864:	00085f00 	call	100085f0 <_sbrk_r>
10005868:	00ffffc4 	movi	r3,-1
1000586c:	10c00d26 	beq	r2,r3,100058a4 <_malloc_trim_r+0xe0>
10005870:	00c40074 	movhi	r3,4097
10005874:	18d30004 	addi	r3,r3,19456
10005878:	18800017 	ldw	r2,0(r3)
1000587c:	99000217 	ldw	r4,8(r19)
10005880:	8c23c83a 	sub	r17,r17,r16
10005884:	8c400054 	ori	r17,r17,1
10005888:	1421c83a 	sub	r16,r2,r16
1000588c:	24400115 	stw	r17,4(r4)
10005890:	9009883a 	mov	r4,r18
10005894:	1c000015 	stw	r16,0(r3)
10005898:	000e2780 	call	1000e278 <__malloc_unlock>
1000589c:	00800044 	movi	r2,1
100058a0:	003fe706 	br	10005840 <__alt_data_end+0xf8005840>
100058a4:	9009883a 	mov	r4,r18
100058a8:	000b883a 	mov	r5,zero
100058ac:	00085f00 	call	100085f0 <_sbrk_r>
100058b0:	99000217 	ldw	r4,8(r19)
100058b4:	014003c4 	movi	r5,15
100058b8:	1107c83a 	sub	r3,r2,r4
100058bc:	28ffdd0e 	bge	r5,r3,10005834 <__alt_data_end+0xf8005834>
100058c0:	01440074 	movhi	r5,4097
100058c4:	294a9b04 	addi	r5,r5,10860
100058c8:	29400017 	ldw	r5,0(r5)
100058cc:	18c00054 	ori	r3,r3,1
100058d0:	20c00115 	stw	r3,4(r4)
100058d4:	00c40074 	movhi	r3,4097
100058d8:	1145c83a 	sub	r2,r2,r5
100058dc:	18d30004 	addi	r3,r3,19456
100058e0:	18800015 	stw	r2,0(r3)
100058e4:	003fd306 	br	10005834 <__alt_data_end+0xf8005834>

100058e8 <_free_r>:
100058e8:	28004c26 	beq	r5,zero,10005a1c <_free_r+0x134>
100058ec:	defffd04 	addi	sp,sp,-12
100058f0:	dc400115 	stw	r17,4(sp)
100058f4:	dc000015 	stw	r16,0(sp)
100058f8:	2023883a 	mov	r17,r4
100058fc:	2821883a 	mov	r16,r5
10005900:	dfc00215 	stw	ra,8(sp)
10005904:	000e2580 	call	1000e258 <__malloc_lock>
10005908:	813fff17 	ldw	r4,-4(r16)
1000590c:	00bfff84 	movi	r2,-2
10005910:	02440074 	movhi	r9,4097
10005914:	81bffe04 	addi	r6,r16,-8
10005918:	2084703a 	and	r2,r4,r2
1000591c:	4a451404 	addi	r9,r9,5200
10005920:	308b883a 	add	r5,r6,r2
10005924:	2a000117 	ldw	r8,4(r5)
10005928:	49c00217 	ldw	r7,8(r9)
1000592c:	00ffff04 	movi	r3,-4
10005930:	40c6703a 	and	r3,r8,r3
10005934:	39405326 	beq	r7,r5,10005a84 <_free_r+0x19c>
10005938:	28c00115 	stw	r3,4(r5)
1000593c:	2100004c 	andi	r4,r4,1
10005940:	2000091e 	bne	r4,zero,10005968 <_free_r+0x80>
10005944:	81fffe17 	ldw	r7,-8(r16)
10005948:	4a000204 	addi	r8,r9,8
1000594c:	31cdc83a 	sub	r6,r6,r7
10005950:	31000217 	ldw	r4,8(r6)
10005954:	11c5883a 	add	r2,r2,r7
10005958:	22006126 	beq	r4,r8,10005ae0 <_free_r+0x1f8>
1000595c:	31c00317 	ldw	r7,12(r6)
10005960:	21c00315 	stw	r7,12(r4)
10005964:	39000215 	stw	r4,8(r7)
10005968:	28c9883a 	add	r4,r5,r3
1000596c:	21c00117 	ldw	r7,4(r4)
10005970:	39c0004c 	andi	r7,r7,1
10005974:	38000d1e 	bne	r7,zero,100059ac <_free_r+0xc4>
10005978:	29000217 	ldw	r4,8(r5)
1000597c:	10c5883a 	add	r2,r2,r3
10005980:	00c40074 	movhi	r3,4097
10005984:	18c51604 	addi	r3,r3,5208
10005988:	20c07526 	beq	r4,r3,10005b60 <_free_r+0x278>
1000598c:	29c00317 	ldw	r7,12(r5)
10005990:	11400054 	ori	r5,r2,1
10005994:	3087883a 	add	r3,r6,r2
10005998:	21c00315 	stw	r7,12(r4)
1000599c:	39000215 	stw	r4,8(r7)
100059a0:	31400115 	stw	r5,4(r6)
100059a4:	18800015 	stw	r2,0(r3)
100059a8:	00000406 	br	100059bc <_free_r+0xd4>
100059ac:	10c00054 	ori	r3,r2,1
100059b0:	30c00115 	stw	r3,4(r6)
100059b4:	3087883a 	add	r3,r6,r2
100059b8:	18800015 	stw	r2,0(r3)
100059bc:	00c07fc4 	movi	r3,511
100059c0:	18801736 	bltu	r3,r2,10005a20 <_free_r+0x138>
100059c4:	1004d0fa 	srli	r2,r2,3
100059c8:	01400044 	movi	r5,1
100059cc:	49000117 	ldw	r4,4(r9)
100059d0:	1087883a 	add	r3,r2,r2
100059d4:	18c7883a 	add	r3,r3,r3
100059d8:	1005d0ba 	srai	r2,r2,2
100059dc:	18c7883a 	add	r3,r3,r3
100059e0:	1a47883a 	add	r3,r3,r9
100059e4:	19c00217 	ldw	r7,8(r3)
100059e8:	2884983a 	sll	r2,r5,r2
100059ec:	30c00315 	stw	r3,12(r6)
100059f0:	31c00215 	stw	r7,8(r6)
100059f4:	1104b03a 	or	r2,r2,r4
100059f8:	19800215 	stw	r6,8(r3)
100059fc:	48800115 	stw	r2,4(r9)
10005a00:	39800315 	stw	r6,12(r7)
10005a04:	8809883a 	mov	r4,r17
10005a08:	dfc00217 	ldw	ra,8(sp)
10005a0c:	dc400117 	ldw	r17,4(sp)
10005a10:	dc000017 	ldw	r16,0(sp)
10005a14:	dec00304 	addi	sp,sp,12
10005a18:	000e2781 	jmpi	1000e278 <__malloc_unlock>
10005a1c:	f800283a 	ret
10005a20:	1006d27a 	srli	r3,r2,9
10005a24:	01000104 	movi	r4,4
10005a28:	20c04036 	bltu	r4,r3,10005b2c <_free_r+0x244>
10005a2c:	1006d1ba 	srli	r3,r2,6
10005a30:	19400e04 	addi	r5,r3,56
10005a34:	2947883a 	add	r3,r5,r5
10005a38:	18c7883a 	add	r3,r3,r3
10005a3c:	18c7883a 	add	r3,r3,r3
10005a40:	1a49883a 	add	r4,r3,r9
10005a44:	20c00217 	ldw	r3,8(r4)
10005a48:	01c40074 	movhi	r7,4097
10005a4c:	39c51404 	addi	r7,r7,5200
10005a50:	19003b26 	beq	r3,r4,10005b40 <_free_r+0x258>
10005a54:	01ffff04 	movi	r7,-4
10005a58:	19400117 	ldw	r5,4(r3)
10005a5c:	29ca703a 	and	r5,r5,r7
10005a60:	1140022e 	bgeu	r2,r5,10005a6c <_free_r+0x184>
10005a64:	18c00217 	ldw	r3,8(r3)
10005a68:	20fffb1e 	bne	r4,r3,10005a58 <__alt_data_end+0xf8005a58>
10005a6c:	18800317 	ldw	r2,12(r3)
10005a70:	30800315 	stw	r2,12(r6)
10005a74:	30c00215 	stw	r3,8(r6)
10005a78:	11800215 	stw	r6,8(r2)
10005a7c:	19800315 	stw	r6,12(r3)
10005a80:	003fe006 	br	10005a04 <__alt_data_end+0xf8005a04>
10005a84:	2100004c 	andi	r4,r4,1
10005a88:	1885883a 	add	r2,r3,r2
10005a8c:	2000071e 	bne	r4,zero,10005aac <_free_r+0x1c4>
10005a90:	817ffe17 	ldw	r5,-8(r16)
10005a94:	314dc83a 	sub	r6,r6,r5
10005a98:	30c00317 	ldw	r3,12(r6)
10005a9c:	31000217 	ldw	r4,8(r6)
10005aa0:	1145883a 	add	r2,r2,r5
10005aa4:	20c00315 	stw	r3,12(r4)
10005aa8:	19000215 	stw	r4,8(r3)
10005aac:	10c00054 	ori	r3,r2,1
10005ab0:	30c00115 	stw	r3,4(r6)
10005ab4:	00c40074 	movhi	r3,4097
10005ab8:	18ca9c04 	addi	r3,r3,10864
10005abc:	18c00017 	ldw	r3,0(r3)
10005ac0:	49800215 	stw	r6,8(r9)
10005ac4:	10ffcf36 	bltu	r2,r3,10005a04 <__alt_data_end+0xf8005a04>
10005ac8:	00840074 	movhi	r2,4097
10005acc:	1092f704 	addi	r2,r2,19420
10005ad0:	11400017 	ldw	r5,0(r2)
10005ad4:	8809883a 	mov	r4,r17
10005ad8:	00057c40 	call	100057c4 <_malloc_trim_r>
10005adc:	003fc906 	br	10005a04 <__alt_data_end+0xf8005a04>
10005ae0:	28c9883a 	add	r4,r5,r3
10005ae4:	21000117 	ldw	r4,4(r4)
10005ae8:	2100004c 	andi	r4,r4,1
10005aec:	20000a1e 	bne	r4,zero,10005b18 <_free_r+0x230>
10005af0:	29000317 	ldw	r4,12(r5)
10005af4:	29400217 	ldw	r5,8(r5)
10005af8:	10c5883a 	add	r2,r2,r3
10005afc:	10c00054 	ori	r3,r2,1
10005b00:	29000315 	stw	r4,12(r5)
10005b04:	21400215 	stw	r5,8(r4)
10005b08:	30c00115 	stw	r3,4(r6)
10005b0c:	308d883a 	add	r6,r6,r2
10005b10:	30800015 	stw	r2,0(r6)
10005b14:	003fbb06 	br	10005a04 <__alt_data_end+0xf8005a04>
10005b18:	10c00054 	ori	r3,r2,1
10005b1c:	30c00115 	stw	r3,4(r6)
10005b20:	308d883a 	add	r6,r6,r2
10005b24:	30800015 	stw	r2,0(r6)
10005b28:	003fb606 	br	10005a04 <__alt_data_end+0xf8005a04>
10005b2c:	01000504 	movi	r4,20
10005b30:	20c01436 	bltu	r4,r3,10005b84 <_free_r+0x29c>
10005b34:	194016c4 	addi	r5,r3,91
10005b38:	2947883a 	add	r3,r5,r5
10005b3c:	003fbe06 	br	10005a38 <__alt_data_end+0xf8005a38>
10005b40:	280bd0ba 	srai	r5,r5,2
10005b44:	00800044 	movi	r2,1
10005b48:	39000117 	ldw	r4,4(r7)
10005b4c:	114a983a 	sll	r5,r2,r5
10005b50:	1805883a 	mov	r2,r3
10005b54:	2908b03a 	or	r4,r5,r4
10005b58:	39000115 	stw	r4,4(r7)
10005b5c:	003fc406 	br	10005a70 <__alt_data_end+0xf8005a70>
10005b60:	49800515 	stw	r6,20(r9)
10005b64:	49800415 	stw	r6,16(r9)
10005b68:	10c00054 	ori	r3,r2,1
10005b6c:	31000315 	stw	r4,12(r6)
10005b70:	31000215 	stw	r4,8(r6)
10005b74:	30c00115 	stw	r3,4(r6)
10005b78:	308d883a 	add	r6,r6,r2
10005b7c:	30800015 	stw	r2,0(r6)
10005b80:	003fa006 	br	10005a04 <__alt_data_end+0xf8005a04>
10005b84:	01001504 	movi	r4,84
10005b88:	20c00436 	bltu	r4,r3,10005b9c <_free_r+0x2b4>
10005b8c:	1006d33a 	srli	r3,r2,12
10005b90:	19401b84 	addi	r5,r3,110
10005b94:	2947883a 	add	r3,r5,r5
10005b98:	003fa706 	br	10005a38 <__alt_data_end+0xf8005a38>
10005b9c:	01005504 	movi	r4,340
10005ba0:	20c00436 	bltu	r4,r3,10005bb4 <_free_r+0x2cc>
10005ba4:	1006d3fa 	srli	r3,r2,15
10005ba8:	19401dc4 	addi	r5,r3,119
10005bac:	2947883a 	add	r3,r5,r5
10005bb0:	003fa106 	br	10005a38 <__alt_data_end+0xf8005a38>
10005bb4:	01015504 	movi	r4,1364
10005bb8:	20c00436 	bltu	r4,r3,10005bcc <_free_r+0x2e4>
10005bbc:	1006d4ba 	srli	r3,r2,18
10005bc0:	19401f04 	addi	r5,r3,124
10005bc4:	2947883a 	add	r3,r5,r5
10005bc8:	003f9b06 	br	10005a38 <__alt_data_end+0xf8005a38>
10005bcc:	00c03f04 	movi	r3,252
10005bd0:	01401f84 	movi	r5,126
10005bd4:	003f9806 	br	10005a38 <__alt_data_end+0xf8005a38>

10005bd8 <__sfvwrite_r>:
10005bd8:	30800217 	ldw	r2,8(r6)
10005bdc:	10004526 	beq	r2,zero,10005cf4 <__sfvwrite_r+0x11c>
10005be0:	28c0030b 	ldhu	r3,12(r5)
10005be4:	defff404 	addi	sp,sp,-48
10005be8:	dd400715 	stw	r21,28(sp)
10005bec:	dcc00515 	stw	r19,20(sp)
10005bf0:	dc000215 	stw	r16,8(sp)
10005bf4:	dfc00b15 	stw	ra,44(sp)
10005bf8:	df000a15 	stw	fp,40(sp)
10005bfc:	ddc00915 	stw	r23,36(sp)
10005c00:	dd800815 	stw	r22,32(sp)
10005c04:	dd000615 	stw	r20,24(sp)
10005c08:	dc800415 	stw	r18,16(sp)
10005c0c:	dc400315 	stw	r17,12(sp)
10005c10:	1880020c 	andi	r2,r3,8
10005c14:	2821883a 	mov	r16,r5
10005c18:	202b883a 	mov	r21,r4
10005c1c:	3027883a 	mov	r19,r6
10005c20:	10002526 	beq	r2,zero,10005cb8 <__sfvwrite_r+0xe0>
10005c24:	28800417 	ldw	r2,16(r5)
10005c28:	10002326 	beq	r2,zero,10005cb8 <__sfvwrite_r+0xe0>
10005c2c:	1880008c 	andi	r2,r3,2
10005c30:	9c400017 	ldw	r17,0(r19)
10005c34:	10003126 	beq	r2,zero,10005cfc <__sfvwrite_r+0x124>
10005c38:	0029883a 	mov	r20,zero
10005c3c:	0025883a 	mov	r18,zero
10005c40:	05810004 	movi	r22,1024
10005c44:	a00d883a 	mov	r6,r20
10005c48:	a809883a 	mov	r4,r21
10005c4c:	90002526 	beq	r18,zero,10005ce4 <__sfvwrite_r+0x10c>
10005c50:	900f883a 	mov	r7,r18
10005c54:	81400717 	ldw	r5,28(r16)
10005c58:	b480012e 	bgeu	r22,r18,10005c60 <__sfvwrite_r+0x88>
10005c5c:	01c10004 	movi	r7,1024
10005c60:	80800917 	ldw	r2,36(r16)
10005c64:	103ee83a 	callr	r2
10005c68:	0080510e 	bge	zero,r2,10005db0 <__sfvwrite_r+0x1d8>
10005c6c:	98c00217 	ldw	r3,8(r19)
10005c70:	a0a9883a 	add	r20,r20,r2
10005c74:	90a5c83a 	sub	r18,r18,r2
10005c78:	1885c83a 	sub	r2,r3,r2
10005c7c:	98800215 	stw	r2,8(r19)
10005c80:	103ff01e 	bne	r2,zero,10005c44 <__alt_data_end+0xf8005c44>
10005c84:	0005883a 	mov	r2,zero
10005c88:	dfc00b17 	ldw	ra,44(sp)
10005c8c:	df000a17 	ldw	fp,40(sp)
10005c90:	ddc00917 	ldw	r23,36(sp)
10005c94:	dd800817 	ldw	r22,32(sp)
10005c98:	dd400717 	ldw	r21,28(sp)
10005c9c:	dd000617 	ldw	r20,24(sp)
10005ca0:	dcc00517 	ldw	r19,20(sp)
10005ca4:	dc800417 	ldw	r18,16(sp)
10005ca8:	dc400317 	ldw	r17,12(sp)
10005cac:	dc000217 	ldw	r16,8(sp)
10005cb0:	dec00c04 	addi	sp,sp,48
10005cb4:	f800283a 	ret
10005cb8:	a809883a 	mov	r4,r21
10005cbc:	800b883a 	mov	r5,r16
10005cc0:	00037380 	call	10003738 <__swsetup_r>
10005cc4:	80c0030b 	ldhu	r3,12(r16)
10005cc8:	103fd826 	beq	r2,zero,10005c2c <__alt_data_end+0xf8005c2c>
10005ccc:	18c01014 	ori	r3,r3,64
10005cd0:	80c0030d 	sth	r3,12(r16)
10005cd4:	00c00244 	movi	r3,9
10005cd8:	00bfffc4 	movi	r2,-1
10005cdc:	a8c00015 	stw	r3,0(r21)
10005ce0:	003fe906 	br	10005c88 <__alt_data_end+0xf8005c88>
10005ce4:	8d000017 	ldw	r20,0(r17)
10005ce8:	8c800117 	ldw	r18,4(r17)
10005cec:	8c400204 	addi	r17,r17,8
10005cf0:	003fd406 	br	10005c44 <__alt_data_end+0xf8005c44>
10005cf4:	0005883a 	mov	r2,zero
10005cf8:	f800283a 	ret
10005cfc:	1880004c 	andi	r2,r3,1
10005d00:	1000301e 	bne	r2,zero,10005dc4 <__sfvwrite_r+0x1ec>
10005d04:	002f883a 	mov	r23,zero
10005d08:	0025883a 	mov	r18,zero
10005d0c:	90001c26 	beq	r18,zero,10005d80 <__sfvwrite_r+0x1a8>
10005d10:	1880800c 	andi	r2,r3,512
10005d14:	85000217 	ldw	r20,8(r16)
10005d18:	10006c26 	beq	r2,zero,10005ecc <__sfvwrite_r+0x2f4>
10005d1c:	a02d883a 	mov	r22,r20
10005d20:	95008536 	bltu	r18,r20,10005f38 <__sfvwrite_r+0x360>
10005d24:	1881200c 	andi	r2,r3,1152
10005d28:	10009d1e 	bne	r2,zero,10005fa0 <__sfvwrite_r+0x3c8>
10005d2c:	81000017 	ldw	r4,0(r16)
10005d30:	a039883a 	mov	fp,r20
10005d34:	9029883a 	mov	r20,r18
10005d38:	b80b883a 	mov	r5,r23
10005d3c:	b00d883a 	mov	r6,r22
10005d40:	0006d140 	call	10006d14 <memmove>
10005d44:	80c00217 	ldw	r3,8(r16)
10005d48:	81000017 	ldw	r4,0(r16)
10005d4c:	9005883a 	mov	r2,r18
10005d50:	1f39c83a 	sub	fp,r3,fp
10005d54:	258f883a 	add	r7,r4,r22
10005d58:	87000215 	stw	fp,8(r16)
10005d5c:	81c00015 	stw	r7,0(r16)
10005d60:	98c00217 	ldw	r3,8(r19)
10005d64:	b8af883a 	add	r23,r23,r2
10005d68:	90a5c83a 	sub	r18,r18,r2
10005d6c:	1d05c83a 	sub	r2,r3,r20
10005d70:	98800215 	stw	r2,8(r19)
10005d74:	103fc326 	beq	r2,zero,10005c84 <__alt_data_end+0xf8005c84>
10005d78:	80c0030b 	ldhu	r3,12(r16)
10005d7c:	903fe41e 	bne	r18,zero,10005d10 <__alt_data_end+0xf8005d10>
10005d80:	8dc00017 	ldw	r23,0(r17)
10005d84:	8c800117 	ldw	r18,4(r17)
10005d88:	8c400204 	addi	r17,r17,8
10005d8c:	003fdf06 	br	10005d0c <__alt_data_end+0xf8005d0c>
10005d90:	0007fdc0 	call	10007fdc <_realloc_r>
10005d94:	102d883a 	mov	r22,r2
10005d98:	1000a01e 	bne	r2,zero,1000601c <__sfvwrite_r+0x444>
10005d9c:	81400417 	ldw	r5,16(r16)
10005da0:	a809883a 	mov	r4,r21
10005da4:	00058e80 	call	100058e8 <_free_r>
10005da8:	00800304 	movi	r2,12
10005dac:	a8800015 	stw	r2,0(r21)
10005db0:	80c0030b 	ldhu	r3,12(r16)
10005db4:	00bfffc4 	movi	r2,-1
10005db8:	18c01014 	ori	r3,r3,64
10005dbc:	80c0030d 	sth	r3,12(r16)
10005dc0:	003fb106 	br	10005c88 <__alt_data_end+0xf8005c88>
10005dc4:	0029883a 	mov	r20,zero
10005dc8:	0011883a 	mov	r8,zero
10005dcc:	0039883a 	mov	fp,zero
10005dd0:	0025883a 	mov	r18,zero
10005dd4:	90001f26 	beq	r18,zero,10005e54 <__sfvwrite_r+0x27c>
10005dd8:	40006826 	beq	r8,zero,10005f7c <__sfvwrite_r+0x3a4>
10005ddc:	a02f883a 	mov	r23,r20
10005de0:	9500012e 	bgeu	r18,r20,10005de8 <__sfvwrite_r+0x210>
10005de4:	902f883a 	mov	r23,r18
10005de8:	81000017 	ldw	r4,0(r16)
10005dec:	80800417 	ldw	r2,16(r16)
10005df0:	b82d883a 	mov	r22,r23
10005df4:	81800217 	ldw	r6,8(r16)
10005df8:	81c00517 	ldw	r7,20(r16)
10005dfc:	1100022e 	bgeu	r2,r4,10005e08 <__sfvwrite_r+0x230>
10005e00:	31c7883a 	add	r3,r6,r7
10005e04:	1dc01816 	blt	r3,r23,10005e68 <__sfvwrite_r+0x290>
10005e08:	b9c03f16 	blt	r23,r7,10005f08 <__sfvwrite_r+0x330>
10005e0c:	80800917 	ldw	r2,36(r16)
10005e10:	81400717 	ldw	r5,28(r16)
10005e14:	a809883a 	mov	r4,r21
10005e18:	da000115 	stw	r8,4(sp)
10005e1c:	e00d883a 	mov	r6,fp
10005e20:	103ee83a 	callr	r2
10005e24:	102d883a 	mov	r22,r2
10005e28:	da000117 	ldw	r8,4(sp)
10005e2c:	00bfe00e 	bge	zero,r2,10005db0 <__alt_data_end+0xf8005db0>
10005e30:	a5a9c83a 	sub	r20,r20,r22
10005e34:	a0001f26 	beq	r20,zero,10005eb4 <__sfvwrite_r+0x2dc>
10005e38:	98800217 	ldw	r2,8(r19)
10005e3c:	e5b9883a 	add	fp,fp,r22
10005e40:	95a5c83a 	sub	r18,r18,r22
10005e44:	15adc83a 	sub	r22,r2,r22
10005e48:	9d800215 	stw	r22,8(r19)
10005e4c:	b03f8d26 	beq	r22,zero,10005c84 <__alt_data_end+0xf8005c84>
10005e50:	903fe11e 	bne	r18,zero,10005dd8 <__alt_data_end+0xf8005dd8>
10005e54:	8f000017 	ldw	fp,0(r17)
10005e58:	8c800117 	ldw	r18,4(r17)
10005e5c:	0011883a 	mov	r8,zero
10005e60:	8c400204 	addi	r17,r17,8
10005e64:	003fdb06 	br	10005dd4 <__alt_data_end+0xf8005dd4>
10005e68:	180d883a 	mov	r6,r3
10005e6c:	e00b883a 	mov	r5,fp
10005e70:	da000115 	stw	r8,4(sp)
10005e74:	d8c00015 	stw	r3,0(sp)
10005e78:	0006d140 	call	10006d14 <memmove>
10005e7c:	d8c00017 	ldw	r3,0(sp)
10005e80:	80800017 	ldw	r2,0(r16)
10005e84:	a809883a 	mov	r4,r21
10005e88:	800b883a 	mov	r5,r16
10005e8c:	10c5883a 	add	r2,r2,r3
10005e90:	80800015 	stw	r2,0(r16)
10005e94:	d8c00015 	stw	r3,0(sp)
10005e98:	00051b80 	call	100051b8 <_fflush_r>
10005e9c:	d8c00017 	ldw	r3,0(sp)
10005ea0:	da000117 	ldw	r8,4(sp)
10005ea4:	103fc21e 	bne	r2,zero,10005db0 <__alt_data_end+0xf8005db0>
10005ea8:	182d883a 	mov	r22,r3
10005eac:	a5a9c83a 	sub	r20,r20,r22
10005eb0:	a03fe11e 	bne	r20,zero,10005e38 <__alt_data_end+0xf8005e38>
10005eb4:	a809883a 	mov	r4,r21
10005eb8:	800b883a 	mov	r5,r16
10005ebc:	00051b80 	call	100051b8 <_fflush_r>
10005ec0:	103fbb1e 	bne	r2,zero,10005db0 <__alt_data_end+0xf8005db0>
10005ec4:	0011883a 	mov	r8,zero
10005ec8:	003fdb06 	br	10005e38 <__alt_data_end+0xf8005e38>
10005ecc:	81000017 	ldw	r4,0(r16)
10005ed0:	80800417 	ldw	r2,16(r16)
10005ed4:	1100012e 	bgeu	r2,r4,10005edc <__sfvwrite_r+0x304>
10005ed8:	a4805a36 	bltu	r20,r18,10006044 <__sfvwrite_r+0x46c>
10005edc:	81c00517 	ldw	r7,20(r16)
10005ee0:	91c01a36 	bltu	r18,r7,10005f4c <__sfvwrite_r+0x374>
10005ee4:	80800917 	ldw	r2,36(r16)
10005ee8:	81400717 	ldw	r5,28(r16)
10005eec:	a809883a 	mov	r4,r21
10005ef0:	b80d883a 	mov	r6,r23
10005ef4:	103ee83a 	callr	r2
10005ef8:	1029883a 	mov	r20,r2
10005efc:	00bfac0e 	bge	zero,r2,10005db0 <__alt_data_end+0xf8005db0>
10005f00:	a005883a 	mov	r2,r20
10005f04:	003f9606 	br	10005d60 <__alt_data_end+0xf8005d60>
10005f08:	b80d883a 	mov	r6,r23
10005f0c:	e00b883a 	mov	r5,fp
10005f10:	da000115 	stw	r8,4(sp)
10005f14:	0006d140 	call	10006d14 <memmove>
10005f18:	80800217 	ldw	r2,8(r16)
10005f1c:	80c00017 	ldw	r3,0(r16)
10005f20:	da000117 	ldw	r8,4(sp)
10005f24:	15c5c83a 	sub	r2,r2,r23
10005f28:	1def883a 	add	r23,r3,r23
10005f2c:	80800215 	stw	r2,8(r16)
10005f30:	85c00015 	stw	r23,0(r16)
10005f34:	003fbe06 	br	10005e30 <__alt_data_end+0xf8005e30>
10005f38:	81000017 	ldw	r4,0(r16)
10005f3c:	9039883a 	mov	fp,r18
10005f40:	9029883a 	mov	r20,r18
10005f44:	902d883a 	mov	r22,r18
10005f48:	003f7b06 	br	10005d38 <__alt_data_end+0xf8005d38>
10005f4c:	b80b883a 	mov	r5,r23
10005f50:	900d883a 	mov	r6,r18
10005f54:	0006d140 	call	10006d14 <memmove>
10005f58:	80c00217 	ldw	r3,8(r16)
10005f5c:	80800017 	ldw	r2,0(r16)
10005f60:	9029883a 	mov	r20,r18
10005f64:	1c87c83a 	sub	r3,r3,r18
10005f68:	1485883a 	add	r2,r2,r18
10005f6c:	80800015 	stw	r2,0(r16)
10005f70:	80c00215 	stw	r3,8(r16)
10005f74:	9005883a 	mov	r2,r18
10005f78:	003f7906 	br	10005d60 <__alt_data_end+0xf8005d60>
10005f7c:	e009883a 	mov	r4,fp
10005f80:	01400284 	movi	r5,10
10005f84:	900d883a 	mov	r6,r18
10005f88:	0006c2c0 	call	10006c2c <memchr>
10005f8c:	10003826 	beq	r2,zero,10006070 <__sfvwrite_r+0x498>
10005f90:	10800044 	addi	r2,r2,1
10005f94:	1729c83a 	sub	r20,r2,fp
10005f98:	02000044 	movi	r8,1
10005f9c:	003f8f06 	br	10005ddc <__alt_data_end+0xf8005ddc>
10005fa0:	80800517 	ldw	r2,20(r16)
10005fa4:	81400417 	ldw	r5,16(r16)
10005fa8:	87000017 	ldw	fp,0(r16)
10005fac:	10a9883a 	add	r20,r2,r2
10005fb0:	a085883a 	add	r2,r20,r2
10005fb4:	1028d7fa 	srli	r20,r2,31
10005fb8:	e179c83a 	sub	fp,fp,r5
10005fbc:	e1000044 	addi	r4,fp,1
10005fc0:	a085883a 	add	r2,r20,r2
10005fc4:	1029d07a 	srai	r20,r2,1
10005fc8:	2485883a 	add	r2,r4,r18
10005fcc:	a00d883a 	mov	r6,r20
10005fd0:	a080022e 	bgeu	r20,r2,10005fdc <__sfvwrite_r+0x404>
10005fd4:	1029883a 	mov	r20,r2
10005fd8:	100d883a 	mov	r6,r2
10005fdc:	18c1000c 	andi	r3,r3,1024
10005fe0:	a809883a 	mov	r4,r21
10005fe4:	183f6a26 	beq	r3,zero,10005d90 <__alt_data_end+0xf8005d90>
10005fe8:	300b883a 	mov	r5,r6
10005fec:	00064840 	call	10006484 <_malloc_r>
10005ff0:	102d883a 	mov	r22,r2
10005ff4:	103f6c26 	beq	r2,zero,10005da8 <__alt_data_end+0xf8005da8>
10005ff8:	81400417 	ldw	r5,16(r16)
10005ffc:	1009883a 	mov	r4,r2
10006000:	e00d883a 	mov	r6,fp
10006004:	00013140 	call	10001314 <memcpy>
10006008:	8080030b 	ldhu	r2,12(r16)
1000600c:	00fedfc4 	movi	r3,-1153
10006010:	10c4703a 	and	r2,r2,r3
10006014:	10802014 	ori	r2,r2,128
10006018:	8080030d 	sth	r2,12(r16)
1000601c:	b709883a 	add	r4,r22,fp
10006020:	a707c83a 	sub	r3,r20,fp
10006024:	85800415 	stw	r22,16(r16)
10006028:	85000515 	stw	r20,20(r16)
1000602c:	81000015 	stw	r4,0(r16)
10006030:	9039883a 	mov	fp,r18
10006034:	80c00215 	stw	r3,8(r16)
10006038:	9029883a 	mov	r20,r18
1000603c:	902d883a 	mov	r22,r18
10006040:	003f3d06 	br	10005d38 <__alt_data_end+0xf8005d38>
10006044:	b80b883a 	mov	r5,r23
10006048:	a00d883a 	mov	r6,r20
1000604c:	0006d140 	call	10006d14 <memmove>
10006050:	80800017 	ldw	r2,0(r16)
10006054:	a809883a 	mov	r4,r21
10006058:	800b883a 	mov	r5,r16
1000605c:	1505883a 	add	r2,r2,r20
10006060:	80800015 	stw	r2,0(r16)
10006064:	00051b80 	call	100051b8 <_fflush_r>
10006068:	103fa526 	beq	r2,zero,10005f00 <__alt_data_end+0xf8005f00>
1000606c:	003f5006 	br	10005db0 <__alt_data_end+0xf8005db0>
10006070:	95000044 	addi	r20,r18,1
10006074:	02000044 	movi	r8,1
10006078:	003f5806 	br	10005ddc <__alt_data_end+0xf8005ddc>

1000607c <_fwalk>:
1000607c:	defff804 	addi	sp,sp,-32
10006080:	dd400515 	stw	r21,20(sp)
10006084:	2540b804 	addi	r21,r4,736
10006088:	dd800615 	stw	r22,24(sp)
1000608c:	dd000415 	stw	r20,16(sp)
10006090:	dfc00715 	stw	ra,28(sp)
10006094:	dcc00315 	stw	r19,12(sp)
10006098:	dc800215 	stw	r18,8(sp)
1000609c:	dc400115 	stw	r17,4(sp)
100060a0:	dc000015 	stw	r16,0(sp)
100060a4:	2829883a 	mov	r20,r5
100060a8:	002d883a 	mov	r22,zero
100060ac:	00057840 	call	10005784 <__sfp_lock_acquire>
100060b0:	a8001426 	beq	r21,zero,10006104 <_fwalk+0x88>
100060b4:	04ffffc4 	movi	r19,-1
100060b8:	ac400117 	ldw	r17,4(r21)
100060bc:	ac800217 	ldw	r18,8(r21)
100060c0:	8c7fffc4 	addi	r17,r17,-1
100060c4:	88000d16 	blt	r17,zero,100060fc <_fwalk+0x80>
100060c8:	94000304 	addi	r16,r18,12
100060cc:	94800384 	addi	r18,r18,14
100060d0:	80c0000f 	ldh	r3,0(r16)
100060d4:	8c7fffc4 	addi	r17,r17,-1
100060d8:	813ffd04 	addi	r4,r16,-12
100060dc:	18000426 	beq	r3,zero,100060f0 <_fwalk+0x74>
100060e0:	90c0000f 	ldh	r3,0(r18)
100060e4:	1cc00226 	beq	r3,r19,100060f0 <_fwalk+0x74>
100060e8:	a03ee83a 	callr	r20
100060ec:	b0acb03a 	or	r22,r22,r2
100060f0:	84001a04 	addi	r16,r16,104
100060f4:	94801a04 	addi	r18,r18,104
100060f8:	8cfff51e 	bne	r17,r19,100060d0 <__alt_data_end+0xf80060d0>
100060fc:	ad400017 	ldw	r21,0(r21)
10006100:	a83fed1e 	bne	r21,zero,100060b8 <__alt_data_end+0xf80060b8>
10006104:	00057880 	call	10005788 <__sfp_lock_release>
10006108:	b005883a 	mov	r2,r22
1000610c:	dfc00717 	ldw	ra,28(sp)
10006110:	dd800617 	ldw	r22,24(sp)
10006114:	dd400517 	ldw	r21,20(sp)
10006118:	dd000417 	ldw	r20,16(sp)
1000611c:	dcc00317 	ldw	r19,12(sp)
10006120:	dc800217 	ldw	r18,8(sp)
10006124:	dc400117 	ldw	r17,4(sp)
10006128:	dc000017 	ldw	r16,0(sp)
1000612c:	dec00804 	addi	sp,sp,32
10006130:	f800283a 	ret

10006134 <_fwalk_reent>:
10006134:	defff804 	addi	sp,sp,-32
10006138:	dd400515 	stw	r21,20(sp)
1000613c:	2540b804 	addi	r21,r4,736
10006140:	dd800615 	stw	r22,24(sp)
10006144:	dd000415 	stw	r20,16(sp)
10006148:	dcc00315 	stw	r19,12(sp)
1000614c:	dfc00715 	stw	ra,28(sp)
10006150:	dc800215 	stw	r18,8(sp)
10006154:	dc400115 	stw	r17,4(sp)
10006158:	dc000015 	stw	r16,0(sp)
1000615c:	2027883a 	mov	r19,r4
10006160:	2829883a 	mov	r20,r5
10006164:	002d883a 	mov	r22,zero
10006168:	00057840 	call	10005784 <__sfp_lock_acquire>
1000616c:	a8001326 	beq	r21,zero,100061bc <_fwalk_reent+0x88>
10006170:	04bfffc4 	movi	r18,-1
10006174:	ac400117 	ldw	r17,4(r21)
10006178:	ac000217 	ldw	r16,8(r21)
1000617c:	8c7fffc4 	addi	r17,r17,-1
10006180:	88000c16 	blt	r17,zero,100061b4 <_fwalk_reent+0x80>
10006184:	84000304 	addi	r16,r16,12
10006188:	80c0000f 	ldh	r3,0(r16)
1000618c:	8c7fffc4 	addi	r17,r17,-1
10006190:	817ffd04 	addi	r5,r16,-12
10006194:	18000526 	beq	r3,zero,100061ac <_fwalk_reent+0x78>
10006198:	80c0008f 	ldh	r3,2(r16)
1000619c:	9809883a 	mov	r4,r19
100061a0:	1c800226 	beq	r3,r18,100061ac <_fwalk_reent+0x78>
100061a4:	a03ee83a 	callr	r20
100061a8:	b0acb03a 	or	r22,r22,r2
100061ac:	84001a04 	addi	r16,r16,104
100061b0:	8cbff51e 	bne	r17,r18,10006188 <__alt_data_end+0xf8006188>
100061b4:	ad400017 	ldw	r21,0(r21)
100061b8:	a83fee1e 	bne	r21,zero,10006174 <__alt_data_end+0xf8006174>
100061bc:	00057880 	call	10005788 <__sfp_lock_release>
100061c0:	b005883a 	mov	r2,r22
100061c4:	dfc00717 	ldw	ra,28(sp)
100061c8:	dd800617 	ldw	r22,24(sp)
100061cc:	dd400517 	ldw	r21,20(sp)
100061d0:	dd000417 	ldw	r20,16(sp)
100061d4:	dcc00317 	ldw	r19,12(sp)
100061d8:	dc800217 	ldw	r18,8(sp)
100061dc:	dc400117 	ldw	r17,4(sp)
100061e0:	dc000017 	ldw	r16,0(sp)
100061e4:	dec00804 	addi	sp,sp,32
100061e8:	f800283a 	ret

100061ec <_setlocale_r>:
100061ec:	30001b26 	beq	r6,zero,1000625c <_setlocale_r+0x70>
100061f0:	01440074 	movhi	r5,4097
100061f4:	defffe04 	addi	sp,sp,-8
100061f8:	2941bd04 	addi	r5,r5,1780
100061fc:	3009883a 	mov	r4,r6
10006200:	dc000015 	stw	r16,0(sp)
10006204:	dfc00115 	stw	ra,4(sp)
10006208:	3021883a 	mov	r16,r6
1000620c:	00087800 	call	10008780 <strcmp>
10006210:	1000061e 	bne	r2,zero,1000622c <_setlocale_r+0x40>
10006214:	00840074 	movhi	r2,4097
10006218:	1081bc04 	addi	r2,r2,1776
1000621c:	dfc00117 	ldw	ra,4(sp)
10006220:	dc000017 	ldw	r16,0(sp)
10006224:	dec00204 	addi	sp,sp,8
10006228:	f800283a 	ret
1000622c:	01440074 	movhi	r5,4097
10006230:	2941bc04 	addi	r5,r5,1776
10006234:	8009883a 	mov	r4,r16
10006238:	00087800 	call	10008780 <strcmp>
1000623c:	103ff526 	beq	r2,zero,10006214 <__alt_data_end+0xf8006214>
10006240:	01440074 	movhi	r5,4097
10006244:	2941a704 	addi	r5,r5,1692
10006248:	8009883a 	mov	r4,r16
1000624c:	00087800 	call	10008780 <strcmp>
10006250:	103ff026 	beq	r2,zero,10006214 <__alt_data_end+0xf8006214>
10006254:	0005883a 	mov	r2,zero
10006258:	003ff006 	br	1000621c <__alt_data_end+0xf800621c>
1000625c:	00840074 	movhi	r2,4097
10006260:	1081bc04 	addi	r2,r2,1776
10006264:	f800283a 	ret

10006268 <__locale_charset>:
10006268:	00840074 	movhi	r2,4097
1000626c:	1084fe04 	addi	r2,r2,5112
10006270:	f800283a 	ret

10006274 <__locale_mb_cur_max>:
10006274:	00840074 	movhi	r2,4097
10006278:	108a9a04 	addi	r2,r2,10856
1000627c:	10800017 	ldw	r2,0(r2)
10006280:	f800283a 	ret

10006284 <__locale_msgcharset>:
10006284:	00840074 	movhi	r2,4097
10006288:	1084f604 	addi	r2,r2,5080
1000628c:	f800283a 	ret

10006290 <__locale_cjk_lang>:
10006290:	0005883a 	mov	r2,zero
10006294:	f800283a 	ret

10006298 <_localeconv_r>:
10006298:	00840074 	movhi	r2,4097
1000629c:	10850604 	addi	r2,r2,5144
100062a0:	f800283a 	ret

100062a4 <setlocale>:
100062a4:	00c40074 	movhi	r3,4097
100062a8:	18ca9904 	addi	r3,r3,10852
100062ac:	2005883a 	mov	r2,r4
100062b0:	19000017 	ldw	r4,0(r3)
100062b4:	280d883a 	mov	r6,r5
100062b8:	100b883a 	mov	r5,r2
100062bc:	00061ec1 	jmpi	100061ec <_setlocale_r>

100062c0 <localeconv>:
100062c0:	00840074 	movhi	r2,4097
100062c4:	10850604 	addi	r2,r2,5144
100062c8:	f800283a 	ret

100062cc <__smakebuf_r>:
100062cc:	2880030b 	ldhu	r2,12(r5)
100062d0:	10c0008c 	andi	r3,r2,2
100062d4:	1800401e 	bne	r3,zero,100063d8 <__smakebuf_r+0x10c>
100062d8:	deffec04 	addi	sp,sp,-80
100062dc:	dc000f15 	stw	r16,60(sp)
100062e0:	2821883a 	mov	r16,r5
100062e4:	2940038f 	ldh	r5,14(r5)
100062e8:	dc401015 	stw	r17,64(sp)
100062ec:	dfc01315 	stw	ra,76(sp)
100062f0:	dcc01215 	stw	r19,72(sp)
100062f4:	dc801115 	stw	r18,68(sp)
100062f8:	2023883a 	mov	r17,r4
100062fc:	28001b16 	blt	r5,zero,1000636c <__smakebuf_r+0xa0>
10006300:	d80d883a 	mov	r6,sp
10006304:	000a1f80 	call	1000a1f8 <_fstat_r>
10006308:	10001716 	blt	r2,zero,10006368 <__smakebuf_r+0x9c>
1000630c:	d8800117 	ldw	r2,4(sp)
10006310:	00e00014 	movui	r3,32768
10006314:	10bc000c 	andi	r2,r2,61440
10006318:	10c03726 	beq	r2,r3,100063f8 <__smakebuf_r+0x12c>
1000631c:	80c0030b 	ldhu	r3,12(r16)
10006320:	18c20014 	ori	r3,r3,2048
10006324:	80c0030d 	sth	r3,12(r16)
10006328:	00c80004 	movi	r3,8192
1000632c:	10c03c1e 	bne	r2,r3,10006420 <__smakebuf_r+0x154>
10006330:	8140038f 	ldh	r5,14(r16)
10006334:	8809883a 	mov	r4,r17
10006338:	000a2500 	call	1000a250 <_isatty_r>
1000633c:	10004e26 	beq	r2,zero,10006478 <__smakebuf_r+0x1ac>
10006340:	8080030b 	ldhu	r2,12(r16)
10006344:	04c00044 	movi	r19,1
10006348:	80c010c4 	addi	r3,r16,67
1000634c:	14c4b03a 	or	r2,r2,r19
10006350:	8080030d 	sth	r2,12(r16)
10006354:	80c00015 	stw	r3,0(r16)
10006358:	80c00415 	stw	r3,16(r16)
1000635c:	84c00515 	stw	r19,20(r16)
10006360:	04810004 	movi	r18,1024
10006364:	00000706 	br	10006384 <__smakebuf_r+0xb8>
10006368:	8080030b 	ldhu	r2,12(r16)
1000636c:	10c0200c 	andi	r3,r2,128
10006370:	18001f1e 	bne	r3,zero,100063f0 <__smakebuf_r+0x124>
10006374:	04810004 	movi	r18,1024
10006378:	10820014 	ori	r2,r2,2048
1000637c:	8080030d 	sth	r2,12(r16)
10006380:	0027883a 	mov	r19,zero
10006384:	8809883a 	mov	r4,r17
10006388:	900b883a 	mov	r5,r18
1000638c:	00064840 	call	10006484 <_malloc_r>
10006390:	10002e26 	beq	r2,zero,1000644c <__smakebuf_r+0x180>
10006394:	80c0030b 	ldhu	r3,12(r16)
10006398:	01040034 	movhi	r4,4096
1000639c:	21150804 	addi	r4,r4,21536
100063a0:	89000f15 	stw	r4,60(r17)
100063a4:	18c02014 	ori	r3,r3,128
100063a8:	80c0030d 	sth	r3,12(r16)
100063ac:	80800015 	stw	r2,0(r16)
100063b0:	80800415 	stw	r2,16(r16)
100063b4:	84800515 	stw	r18,20(r16)
100063b8:	98001c1e 	bne	r19,zero,1000642c <__smakebuf_r+0x160>
100063bc:	dfc01317 	ldw	ra,76(sp)
100063c0:	dcc01217 	ldw	r19,72(sp)
100063c4:	dc801117 	ldw	r18,68(sp)
100063c8:	dc401017 	ldw	r17,64(sp)
100063cc:	dc000f17 	ldw	r16,60(sp)
100063d0:	dec01404 	addi	sp,sp,80
100063d4:	f800283a 	ret
100063d8:	288010c4 	addi	r2,r5,67
100063dc:	28800015 	stw	r2,0(r5)
100063e0:	28800415 	stw	r2,16(r5)
100063e4:	00800044 	movi	r2,1
100063e8:	28800515 	stw	r2,20(r5)
100063ec:	f800283a 	ret
100063f0:	04801004 	movi	r18,64
100063f4:	003fe006 	br	10006378 <__alt_data_end+0xf8006378>
100063f8:	81000a17 	ldw	r4,40(r16)
100063fc:	00c40074 	movhi	r3,4097
10006400:	18e1c704 	addi	r3,r3,-30948
10006404:	20ffc51e 	bne	r4,r3,1000631c <__alt_data_end+0xf800631c>
10006408:	80c0030b 	ldhu	r3,12(r16)
1000640c:	01010004 	movi	r4,1024
10006410:	81001315 	stw	r4,76(r16)
10006414:	1906b03a 	or	r3,r3,r4
10006418:	80c0030d 	sth	r3,12(r16)
1000641c:	003fc206 	br	10006328 <__alt_data_end+0xf8006328>
10006420:	0027883a 	mov	r19,zero
10006424:	04810004 	movi	r18,1024
10006428:	003fd606 	br	10006384 <__alt_data_end+0xf8006384>
1000642c:	8140038f 	ldh	r5,14(r16)
10006430:	8809883a 	mov	r4,r17
10006434:	000a2500 	call	1000a250 <_isatty_r>
10006438:	103fe026 	beq	r2,zero,100063bc <__alt_data_end+0xf80063bc>
1000643c:	8080030b 	ldhu	r2,12(r16)
10006440:	10800054 	ori	r2,r2,1
10006444:	8080030d 	sth	r2,12(r16)
10006448:	003fdc06 	br	100063bc <__alt_data_end+0xf80063bc>
1000644c:	8080030b 	ldhu	r2,12(r16)
10006450:	10c0800c 	andi	r3,r2,512
10006454:	183fd91e 	bne	r3,zero,100063bc <__alt_data_end+0xf80063bc>
10006458:	10800094 	ori	r2,r2,2
1000645c:	80c010c4 	addi	r3,r16,67
10006460:	8080030d 	sth	r2,12(r16)
10006464:	00800044 	movi	r2,1
10006468:	80c00015 	stw	r3,0(r16)
1000646c:	80c00415 	stw	r3,16(r16)
10006470:	80800515 	stw	r2,20(r16)
10006474:	003fd106 	br	100063bc <__alt_data_end+0xf80063bc>
10006478:	04c00044 	movi	r19,1
1000647c:	04810004 	movi	r18,1024
10006480:	003fc006 	br	10006384 <__alt_data_end+0xf8006384>

10006484 <_malloc_r>:
10006484:	defff504 	addi	sp,sp,-44
10006488:	dc800315 	stw	r18,12(sp)
1000648c:	dfc00a15 	stw	ra,40(sp)
10006490:	df000915 	stw	fp,36(sp)
10006494:	ddc00815 	stw	r23,32(sp)
10006498:	dd800715 	stw	r22,28(sp)
1000649c:	dd400615 	stw	r21,24(sp)
100064a0:	dd000515 	stw	r20,20(sp)
100064a4:	dcc00415 	stw	r19,16(sp)
100064a8:	dc400215 	stw	r17,8(sp)
100064ac:	dc000115 	stw	r16,4(sp)
100064b0:	288002c4 	addi	r2,r5,11
100064b4:	00c00584 	movi	r3,22
100064b8:	2025883a 	mov	r18,r4
100064bc:	18802a2e 	bgeu	r3,r2,10006568 <_malloc_r+0xe4>
100064c0:	047ffe04 	movi	r17,-8
100064c4:	1462703a 	and	r17,r2,r17
100064c8:	88009e16 	blt	r17,zero,10006744 <_malloc_r+0x2c0>
100064cc:	89409d36 	bltu	r17,r5,10006744 <_malloc_r+0x2c0>
100064d0:	000e2580 	call	1000e258 <__malloc_lock>
100064d4:	00807dc4 	movi	r2,503
100064d8:	14402736 	bltu	r2,r17,10006578 <_malloc_r+0xf4>
100064dc:	8806d0fa 	srli	r3,r17,3
100064e0:	04c40074 	movhi	r19,4097
100064e4:	9cc51404 	addi	r19,r19,5200
100064e8:	18c5883a 	add	r2,r3,r3
100064ec:	1085883a 	add	r2,r2,r2
100064f0:	1085883a 	add	r2,r2,r2
100064f4:	9885883a 	add	r2,r19,r2
100064f8:	14000317 	ldw	r16,12(r2)
100064fc:	80814a26 	beq	r16,r2,10006a28 <_malloc_r+0x5a4>
10006500:	80c00117 	ldw	r3,4(r16)
10006504:	81000317 	ldw	r4,12(r16)
10006508:	00bfff04 	movi	r2,-4
1000650c:	1884703a 	and	r2,r3,r2
10006510:	81400217 	ldw	r5,8(r16)
10006514:	8085883a 	add	r2,r16,r2
10006518:	10c00117 	ldw	r3,4(r2)
1000651c:	29000315 	stw	r4,12(r5)
10006520:	21400215 	stw	r5,8(r4)
10006524:	18c00054 	ori	r3,r3,1
10006528:	10c00115 	stw	r3,4(r2)
1000652c:	9009883a 	mov	r4,r18
10006530:	000e2780 	call	1000e278 <__malloc_unlock>
10006534:	80800204 	addi	r2,r16,8
10006538:	dfc00a17 	ldw	ra,40(sp)
1000653c:	df000917 	ldw	fp,36(sp)
10006540:	ddc00817 	ldw	r23,32(sp)
10006544:	dd800717 	ldw	r22,28(sp)
10006548:	dd400617 	ldw	r21,24(sp)
1000654c:	dd000517 	ldw	r20,20(sp)
10006550:	dcc00417 	ldw	r19,16(sp)
10006554:	dc800317 	ldw	r18,12(sp)
10006558:	dc400217 	ldw	r17,8(sp)
1000655c:	dc000117 	ldw	r16,4(sp)
10006560:	dec00b04 	addi	sp,sp,44
10006564:	f800283a 	ret
10006568:	04400404 	movi	r17,16
1000656c:	89407536 	bltu	r17,r5,10006744 <_malloc_r+0x2c0>
10006570:	000e2580 	call	1000e258 <__malloc_lock>
10006574:	003fd906 	br	100064dc <__alt_data_end+0xf80064dc>
10006578:	8806d27a 	srli	r3,r17,9
1000657c:	18007526 	beq	r3,zero,10006754 <_malloc_r+0x2d0>
10006580:	00800104 	movi	r2,4
10006584:	10c0ef36 	bltu	r2,r3,10006944 <_malloc_r+0x4c0>
10006588:	8806d1ba 	srli	r3,r17,6
1000658c:	19c00e04 	addi	r7,r3,56
10006590:	39cb883a 	add	r5,r7,r7
10006594:	04c40074 	movhi	r19,4097
10006598:	294b883a 	add	r5,r5,r5
1000659c:	9cc51404 	addi	r19,r19,5200
100065a0:	294b883a 	add	r5,r5,r5
100065a4:	994b883a 	add	r5,r19,r5
100065a8:	2c000317 	ldw	r16,12(r5)
100065ac:	2c000e26 	beq	r5,r16,100065e8 <_malloc_r+0x164>
100065b0:	80800117 	ldw	r2,4(r16)
100065b4:	01bfff04 	movi	r6,-4
100065b8:	010003c4 	movi	r4,15
100065bc:	1184703a 	and	r2,r2,r6
100065c0:	1447c83a 	sub	r3,r2,r17
100065c4:	20c00716 	blt	r4,r3,100065e4 <_malloc_r+0x160>
100065c8:	1800650e 	bge	r3,zero,10006760 <_malloc_r+0x2dc>
100065cc:	84000317 	ldw	r16,12(r16)
100065d0:	2c000526 	beq	r5,r16,100065e8 <_malloc_r+0x164>
100065d4:	80800117 	ldw	r2,4(r16)
100065d8:	1184703a 	and	r2,r2,r6
100065dc:	1447c83a 	sub	r3,r2,r17
100065e0:	20fff90e 	bge	r4,r3,100065c8 <__alt_data_end+0xf80065c8>
100065e4:	39ffffc4 	addi	r7,r7,-1
100065e8:	38c00044 	addi	r3,r7,1
100065ec:	01840074 	movhi	r6,4097
100065f0:	9c000417 	ldw	r16,16(r19)
100065f4:	31851404 	addi	r6,r6,5200
100065f8:	32400204 	addi	r9,r6,8
100065fc:	82410326 	beq	r16,r9,10006a0c <_malloc_r+0x588>
10006600:	81000117 	ldw	r4,4(r16)
10006604:	00bfff04 	movi	r2,-4
10006608:	208e703a 	and	r7,r4,r2
1000660c:	3c45c83a 	sub	r2,r7,r17
10006610:	010003c4 	movi	r4,15
10006614:	2080ee16 	blt	r4,r2,100069d0 <_malloc_r+0x54c>
10006618:	32400515 	stw	r9,20(r6)
1000661c:	32400415 	stw	r9,16(r6)
10006620:	1000510e 	bge	r2,zero,10006768 <_malloc_r+0x2e4>
10006624:	00807fc4 	movi	r2,511
10006628:	11c0ce36 	bltu	r2,r7,10006964 <_malloc_r+0x4e0>
1000662c:	3808d0fa 	srli	r4,r7,3
10006630:	01c00044 	movi	r7,1
10006634:	30800117 	ldw	r2,4(r6)
10006638:	210b883a 	add	r5,r4,r4
1000663c:	294b883a 	add	r5,r5,r5
10006640:	2009d0ba 	srai	r4,r4,2
10006644:	294b883a 	add	r5,r5,r5
10006648:	298b883a 	add	r5,r5,r6
1000664c:	2a000217 	ldw	r8,8(r5)
10006650:	3908983a 	sll	r4,r7,r4
10006654:	81400315 	stw	r5,12(r16)
10006658:	82000215 	stw	r8,8(r16)
1000665c:	2088b03a 	or	r4,r4,r2
10006660:	2c000215 	stw	r16,8(r5)
10006664:	31000115 	stw	r4,4(r6)
10006668:	44000315 	stw	r16,12(r8)
1000666c:	1805d0ba 	srai	r2,r3,2
10006670:	01400044 	movi	r5,1
10006674:	288a983a 	sll	r5,r5,r2
10006678:	21404336 	bltu	r4,r5,10006788 <_malloc_r+0x304>
1000667c:	2144703a 	and	r2,r4,r5
10006680:	10000a1e 	bne	r2,zero,100066ac <_malloc_r+0x228>
10006684:	00bfff04 	movi	r2,-4
10006688:	294b883a 	add	r5,r5,r5
1000668c:	1886703a 	and	r3,r3,r2
10006690:	2144703a 	and	r2,r4,r5
10006694:	18c00104 	addi	r3,r3,4
10006698:	1000041e 	bne	r2,zero,100066ac <_malloc_r+0x228>
1000669c:	294b883a 	add	r5,r5,r5
100066a0:	2144703a 	and	r2,r4,r5
100066a4:	18c00104 	addi	r3,r3,4
100066a8:	103ffc26 	beq	r2,zero,1000669c <__alt_data_end+0xf800669c>
100066ac:	023fff04 	movi	r8,-4
100066b0:	01c003c4 	movi	r7,15
100066b4:	18c5883a 	add	r2,r3,r3
100066b8:	1085883a 	add	r2,r2,r2
100066bc:	1085883a 	add	r2,r2,r2
100066c0:	9895883a 	add	r10,r19,r2
100066c4:	52c00304 	addi	r11,r10,12
100066c8:	1819883a 	mov	r12,r3
100066cc:	5c000017 	ldw	r16,0(r11)
100066d0:	59bffd04 	addi	r6,r11,-12
100066d4:	8180041e 	bne	r16,r6,100066e8 <_malloc_r+0x264>
100066d8:	0000ce06 	br	10006a14 <_malloc_r+0x590>
100066dc:	2000d70e 	bge	r4,zero,10006a3c <_malloc_r+0x5b8>
100066e0:	84000317 	ldw	r16,12(r16)
100066e4:	8180cb26 	beq	r16,r6,10006a14 <_malloc_r+0x590>
100066e8:	80800117 	ldw	r2,4(r16)
100066ec:	1204703a 	and	r2,r2,r8
100066f0:	1449c83a 	sub	r4,r2,r17
100066f4:	393ff90e 	bge	r7,r4,100066dc <__alt_data_end+0xf80066dc>
100066f8:	80800317 	ldw	r2,12(r16)
100066fc:	80c00217 	ldw	r3,8(r16)
10006700:	89400054 	ori	r5,r17,1
10006704:	81400115 	stw	r5,4(r16)
10006708:	18800315 	stw	r2,12(r3)
1000670c:	10c00215 	stw	r3,8(r2)
10006710:	8463883a 	add	r17,r16,r17
10006714:	9c400515 	stw	r17,20(r19)
10006718:	9c400415 	stw	r17,16(r19)
1000671c:	20800054 	ori	r2,r4,1
10006720:	88800115 	stw	r2,4(r17)
10006724:	8a400315 	stw	r9,12(r17)
10006728:	8a400215 	stw	r9,8(r17)
1000672c:	8923883a 	add	r17,r17,r4
10006730:	89000015 	stw	r4,0(r17)
10006734:	9009883a 	mov	r4,r18
10006738:	000e2780 	call	1000e278 <__malloc_unlock>
1000673c:	80800204 	addi	r2,r16,8
10006740:	003f7d06 	br	10006538 <__alt_data_end+0xf8006538>
10006744:	00800304 	movi	r2,12
10006748:	90800015 	stw	r2,0(r18)
1000674c:	0005883a 	mov	r2,zero
10006750:	003f7906 	br	10006538 <__alt_data_end+0xf8006538>
10006754:	01401f84 	movi	r5,126
10006758:	01c00fc4 	movi	r7,63
1000675c:	003f8d06 	br	10006594 <__alt_data_end+0xf8006594>
10006760:	81000317 	ldw	r4,12(r16)
10006764:	003f6a06 	br	10006510 <__alt_data_end+0xf8006510>
10006768:	81c5883a 	add	r2,r16,r7
1000676c:	10c00117 	ldw	r3,4(r2)
10006770:	9009883a 	mov	r4,r18
10006774:	18c00054 	ori	r3,r3,1
10006778:	10c00115 	stw	r3,4(r2)
1000677c:	000e2780 	call	1000e278 <__malloc_unlock>
10006780:	80800204 	addi	r2,r16,8
10006784:	003f6c06 	br	10006538 <__alt_data_end+0xf8006538>
10006788:	9c000217 	ldw	r16,8(r19)
1000678c:	00bfff04 	movi	r2,-4
10006790:	85800117 	ldw	r22,4(r16)
10006794:	b0ac703a 	and	r22,r22,r2
10006798:	b4400336 	bltu	r22,r17,100067a8 <_malloc_r+0x324>
1000679c:	b445c83a 	sub	r2,r22,r17
100067a0:	00c003c4 	movi	r3,15
100067a4:	18805d16 	blt	r3,r2,1000691c <_malloc_r+0x498>
100067a8:	05c40074 	movhi	r23,4097
100067ac:	00840074 	movhi	r2,4097
100067b0:	bdca9b04 	addi	r23,r23,10860
100067b4:	1092f704 	addi	r2,r2,19420
100067b8:	15400017 	ldw	r21,0(r2)
100067bc:	b9000017 	ldw	r4,0(r23)
100067c0:	00ffffc4 	movi	r3,-1
100067c4:	858d883a 	add	r6,r16,r22
100067c8:	8d6b883a 	add	r21,r17,r21
100067cc:	20c0e426 	beq	r4,r3,10006b60 <_malloc_r+0x6dc>
100067d0:	ad4403c4 	addi	r21,r21,4111
100067d4:	00fc0004 	movi	r3,-4096
100067d8:	a8ea703a 	and	r21,r21,r3
100067dc:	9009883a 	mov	r4,r18
100067e0:	a80b883a 	mov	r5,r21
100067e4:	d9800015 	stw	r6,0(sp)
100067e8:	00085f00 	call	100085f0 <_sbrk_r>
100067ec:	00ffffc4 	movi	r3,-1
100067f0:	1029883a 	mov	r20,r2
100067f4:	d9800017 	ldw	r6,0(sp)
100067f8:	10c0a426 	beq	r2,r3,10006a8c <_malloc_r+0x608>
100067fc:	1180a236 	bltu	r2,r6,10006a88 <_malloc_r+0x604>
10006800:	07040074 	movhi	fp,4097
10006804:	e7130004 	addi	fp,fp,19456
10006808:	e0c00017 	ldw	r3,0(fp)
1000680c:	a8c7883a 	add	r3,r21,r3
10006810:	e0c00015 	stw	r3,0(fp)
10006814:	3500da26 	beq	r6,r20,10006b80 <_malloc_r+0x6fc>
10006818:	b9000017 	ldw	r4,0(r23)
1000681c:	00bfffc4 	movi	r2,-1
10006820:	2080e426 	beq	r4,r2,10006bb4 <_malloc_r+0x730>
10006824:	a185c83a 	sub	r2,r20,r6
10006828:	1885883a 	add	r2,r3,r2
1000682c:	e0800015 	stw	r2,0(fp)
10006830:	a0c001cc 	andi	r3,r20,7
10006834:	1800b526 	beq	r3,zero,10006b0c <_malloc_r+0x688>
10006838:	a0e9c83a 	sub	r20,r20,r3
1000683c:	00840204 	movi	r2,4104
10006840:	a5000204 	addi	r20,r20,8
10006844:	10c7c83a 	sub	r3,r2,r3
10006848:	a545883a 	add	r2,r20,r21
1000684c:	1083ffcc 	andi	r2,r2,4095
10006850:	18abc83a 	sub	r21,r3,r2
10006854:	9009883a 	mov	r4,r18
10006858:	a80b883a 	mov	r5,r21
1000685c:	00085f00 	call	100085f0 <_sbrk_r>
10006860:	00ffffc4 	movi	r3,-1
10006864:	10c0d026 	beq	r2,r3,10006ba8 <_malloc_r+0x724>
10006868:	1507c83a 	sub	r3,r2,r20
1000686c:	a8c7883a 	add	r3,r21,r3
10006870:	18c00054 	ori	r3,r3,1
10006874:	e0800017 	ldw	r2,0(fp)
10006878:	9d000215 	stw	r20,8(r19)
1000687c:	a0c00115 	stw	r3,4(r20)
10006880:	a887883a 	add	r3,r21,r2
10006884:	e0c00015 	stw	r3,0(fp)
10006888:	84c00e26 	beq	r16,r19,100068c4 <_malloc_r+0x440>
1000688c:	018003c4 	movi	r6,15
10006890:	3580a02e 	bgeu	r6,r22,10006b14 <_malloc_r+0x690>
10006894:	81400117 	ldw	r5,4(r16)
10006898:	013ffe04 	movi	r4,-8
1000689c:	b0bffd04 	addi	r2,r22,-12
100068a0:	1104703a 	and	r2,r2,r4
100068a4:	2900004c 	andi	r4,r5,1
100068a8:	1108b03a 	or	r4,r2,r4
100068ac:	81000115 	stw	r4,4(r16)
100068b0:	01400144 	movi	r5,5
100068b4:	8089883a 	add	r4,r16,r2
100068b8:	21400115 	stw	r5,4(r4)
100068bc:	21400215 	stw	r5,8(r4)
100068c0:	3080c036 	bltu	r6,r2,10006bc4 <_malloc_r+0x740>
100068c4:	00840074 	movhi	r2,4097
100068c8:	1092f604 	addi	r2,r2,19416
100068cc:	11000017 	ldw	r4,0(r2)
100068d0:	20c0012e 	bgeu	r4,r3,100068d8 <_malloc_r+0x454>
100068d4:	10c00015 	stw	r3,0(r2)
100068d8:	00840074 	movhi	r2,4097
100068dc:	1092f504 	addi	r2,r2,19412
100068e0:	11000017 	ldw	r4,0(r2)
100068e4:	9c000217 	ldw	r16,8(r19)
100068e8:	20c0012e 	bgeu	r4,r3,100068f0 <_malloc_r+0x46c>
100068ec:	10c00015 	stw	r3,0(r2)
100068f0:	80c00117 	ldw	r3,4(r16)
100068f4:	00bfff04 	movi	r2,-4
100068f8:	1886703a 	and	r3,r3,r2
100068fc:	1c45c83a 	sub	r2,r3,r17
10006900:	1c400236 	bltu	r3,r17,1000690c <_malloc_r+0x488>
10006904:	00c003c4 	movi	r3,15
10006908:	18800416 	blt	r3,r2,1000691c <_malloc_r+0x498>
1000690c:	9009883a 	mov	r4,r18
10006910:	000e2780 	call	1000e278 <__malloc_unlock>
10006914:	0005883a 	mov	r2,zero
10006918:	003f0706 	br	10006538 <__alt_data_end+0xf8006538>
1000691c:	88c00054 	ori	r3,r17,1
10006920:	80c00115 	stw	r3,4(r16)
10006924:	8463883a 	add	r17,r16,r17
10006928:	10800054 	ori	r2,r2,1
1000692c:	9c400215 	stw	r17,8(r19)
10006930:	88800115 	stw	r2,4(r17)
10006934:	9009883a 	mov	r4,r18
10006938:	000e2780 	call	1000e278 <__malloc_unlock>
1000693c:	80800204 	addi	r2,r16,8
10006940:	003efd06 	br	10006538 <__alt_data_end+0xf8006538>
10006944:	00800504 	movi	r2,20
10006948:	10c0482e 	bgeu	r2,r3,10006a6c <_malloc_r+0x5e8>
1000694c:	00801504 	movi	r2,84
10006950:	10c06836 	bltu	r2,r3,10006af4 <_malloc_r+0x670>
10006954:	8806d33a 	srli	r3,r17,12
10006958:	19c01b84 	addi	r7,r3,110
1000695c:	39cb883a 	add	r5,r7,r7
10006960:	003f0c06 	br	10006594 <__alt_data_end+0xf8006594>
10006964:	3804d27a 	srli	r2,r7,9
10006968:	01000104 	movi	r4,4
1000696c:	2080422e 	bgeu	r4,r2,10006a78 <_malloc_r+0x5f4>
10006970:	01000504 	movi	r4,20
10006974:	20807c36 	bltu	r4,r2,10006b68 <_malloc_r+0x6e4>
10006978:	110016c4 	addi	r4,r2,91
1000697c:	210b883a 	add	r5,r4,r4
10006980:	294b883a 	add	r5,r5,r5
10006984:	294b883a 	add	r5,r5,r5
10006988:	994b883a 	add	r5,r19,r5
1000698c:	28800217 	ldw	r2,8(r5)
10006990:	02040074 	movhi	r8,4097
10006994:	42051404 	addi	r8,r8,5200
10006998:	11406326 	beq	r2,r5,10006b28 <_malloc_r+0x6a4>
1000699c:	01bfff04 	movi	r6,-4
100069a0:	11000117 	ldw	r4,4(r2)
100069a4:	2188703a 	and	r4,r4,r6
100069a8:	3900022e 	bgeu	r7,r4,100069b4 <_malloc_r+0x530>
100069ac:	10800217 	ldw	r2,8(r2)
100069b0:	28bffb1e 	bne	r5,r2,100069a0 <__alt_data_end+0xf80069a0>
100069b4:	11800317 	ldw	r6,12(r2)
100069b8:	99000117 	ldw	r4,4(r19)
100069bc:	81800315 	stw	r6,12(r16)
100069c0:	80800215 	stw	r2,8(r16)
100069c4:	34000215 	stw	r16,8(r6)
100069c8:	14000315 	stw	r16,12(r2)
100069cc:	003f2706 	br	1000666c <__alt_data_end+0xf800666c>
100069d0:	88c00054 	ori	r3,r17,1
100069d4:	80c00115 	stw	r3,4(r16)
100069d8:	8463883a 	add	r17,r16,r17
100069dc:	34400515 	stw	r17,20(r6)
100069e0:	34400415 	stw	r17,16(r6)
100069e4:	10c00054 	ori	r3,r2,1
100069e8:	8a400315 	stw	r9,12(r17)
100069ec:	8a400215 	stw	r9,8(r17)
100069f0:	88c00115 	stw	r3,4(r17)
100069f4:	88a3883a 	add	r17,r17,r2
100069f8:	88800015 	stw	r2,0(r17)
100069fc:	9009883a 	mov	r4,r18
10006a00:	000e2780 	call	1000e278 <__malloc_unlock>
10006a04:	80800204 	addi	r2,r16,8
10006a08:	003ecb06 	br	10006538 <__alt_data_end+0xf8006538>
10006a0c:	31000117 	ldw	r4,4(r6)
10006a10:	003f1606 	br	1000666c <__alt_data_end+0xf800666c>
10006a14:	63000044 	addi	r12,r12,1
10006a18:	608000cc 	andi	r2,r12,3
10006a1c:	5ac00204 	addi	r11,r11,8
10006a20:	103f2a1e 	bne	r2,zero,100066cc <__alt_data_end+0xf80066cc>
10006a24:	00002106 	br	10006aac <_malloc_r+0x628>
10006a28:	80800204 	addi	r2,r16,8
10006a2c:	84000517 	ldw	r16,20(r16)
10006a30:	143eb31e 	bne	r2,r16,10006500 <__alt_data_end+0xf8006500>
10006a34:	18c00084 	addi	r3,r3,2
10006a38:	003eec06 	br	100065ec <__alt_data_end+0xf80065ec>
10006a3c:	8085883a 	add	r2,r16,r2
10006a40:	10c00117 	ldw	r3,4(r2)
10006a44:	81000317 	ldw	r4,12(r16)
10006a48:	81400217 	ldw	r5,8(r16)
10006a4c:	18c00054 	ori	r3,r3,1
10006a50:	10c00115 	stw	r3,4(r2)
10006a54:	29000315 	stw	r4,12(r5)
10006a58:	21400215 	stw	r5,8(r4)
10006a5c:	9009883a 	mov	r4,r18
10006a60:	000e2780 	call	1000e278 <__malloc_unlock>
10006a64:	80800204 	addi	r2,r16,8
10006a68:	003eb306 	br	10006538 <__alt_data_end+0xf8006538>
10006a6c:	19c016c4 	addi	r7,r3,91
10006a70:	39cb883a 	add	r5,r7,r7
10006a74:	003ec706 	br	10006594 <__alt_data_end+0xf8006594>
10006a78:	3804d1ba 	srli	r2,r7,6
10006a7c:	11000e04 	addi	r4,r2,56
10006a80:	210b883a 	add	r5,r4,r4
10006a84:	003fbe06 	br	10006980 <__alt_data_end+0xf8006980>
10006a88:	84ff5d26 	beq	r16,r19,10006800 <__alt_data_end+0xf8006800>
10006a8c:	9c000217 	ldw	r16,8(r19)
10006a90:	00bfff04 	movi	r2,-4
10006a94:	80c00117 	ldw	r3,4(r16)
10006a98:	1886703a 	and	r3,r3,r2
10006a9c:	003f9706 	br	100068fc <__alt_data_end+0xf80068fc>
10006aa0:	52800017 	ldw	r10,0(r10)
10006aa4:	18ffffc4 	addi	r3,r3,-1
10006aa8:	50805c1e 	bne	r10,r2,10006c1c <_malloc_r+0x798>
10006aac:	190000cc 	andi	r4,r3,3
10006ab0:	50bffe04 	addi	r2,r10,-8
10006ab4:	203ffa1e 	bne	r4,zero,10006aa0 <__alt_data_end+0xf8006aa0>
10006ab8:	98800117 	ldw	r2,4(r19)
10006abc:	0146303a 	nor	r3,zero,r5
10006ac0:	1884703a 	and	r2,r3,r2
10006ac4:	98800115 	stw	r2,4(r19)
10006ac8:	294b883a 	add	r5,r5,r5
10006acc:	117f2e36 	bltu	r2,r5,10006788 <__alt_data_end+0xf8006788>
10006ad0:	283f2d26 	beq	r5,zero,10006788 <__alt_data_end+0xf8006788>
10006ad4:	1146703a 	and	r3,r2,r5
10006ad8:	1800521e 	bne	r3,zero,10006c24 <_malloc_r+0x7a0>
10006adc:	6007883a 	mov	r3,r12
10006ae0:	294b883a 	add	r5,r5,r5
10006ae4:	1148703a 	and	r4,r2,r5
10006ae8:	18c00104 	addi	r3,r3,4
10006aec:	203ffc26 	beq	r4,zero,10006ae0 <__alt_data_end+0xf8006ae0>
10006af0:	003ef006 	br	100066b4 <__alt_data_end+0xf80066b4>
10006af4:	00805504 	movi	r2,340
10006af8:	10c01336 	bltu	r2,r3,10006b48 <_malloc_r+0x6c4>
10006afc:	8806d3fa 	srli	r3,r17,15
10006b00:	19c01dc4 	addi	r7,r3,119
10006b04:	39cb883a 	add	r5,r7,r7
10006b08:	003ea206 	br	10006594 <__alt_data_end+0xf8006594>
10006b0c:	00c40004 	movi	r3,4096
10006b10:	003f4d06 	br	10006848 <__alt_data_end+0xf8006848>
10006b14:	00800044 	movi	r2,1
10006b18:	a0800115 	stw	r2,4(r20)
10006b1c:	a021883a 	mov	r16,r20
10006b20:	0007883a 	mov	r3,zero
10006b24:	003f7506 	br	100068fc <__alt_data_end+0xf80068fc>
10006b28:	200bd0ba 	srai	r5,r4,2
10006b2c:	01800044 	movi	r6,1
10006b30:	41000117 	ldw	r4,4(r8)
10006b34:	314a983a 	sll	r5,r6,r5
10006b38:	100d883a 	mov	r6,r2
10006b3c:	2908b03a 	or	r4,r5,r4
10006b40:	41000115 	stw	r4,4(r8)
10006b44:	003f9d06 	br	100069bc <__alt_data_end+0xf80069bc>
10006b48:	00815504 	movi	r2,1364
10006b4c:	10c01336 	bltu	r2,r3,10006b9c <_malloc_r+0x718>
10006b50:	8806d4ba 	srli	r3,r17,18
10006b54:	19c01f04 	addi	r7,r3,124
10006b58:	39cb883a 	add	r5,r7,r7
10006b5c:	003e8d06 	br	10006594 <__alt_data_end+0xf8006594>
10006b60:	ad400404 	addi	r21,r21,16
10006b64:	003f1d06 	br	100067dc <__alt_data_end+0xf80067dc>
10006b68:	01001504 	movi	r4,84
10006b6c:	20801c36 	bltu	r4,r2,10006be0 <_malloc_r+0x75c>
10006b70:	3804d33a 	srli	r2,r7,12
10006b74:	11001b84 	addi	r4,r2,110
10006b78:	210b883a 	add	r5,r4,r4
10006b7c:	003f8006 	br	10006980 <__alt_data_end+0xf8006980>
10006b80:	3083ffcc 	andi	r2,r6,4095
10006b84:	103f241e 	bne	r2,zero,10006818 <__alt_data_end+0xf8006818>
10006b88:	99000217 	ldw	r4,8(r19)
10006b8c:	ad85883a 	add	r2,r21,r22
10006b90:	10800054 	ori	r2,r2,1
10006b94:	20800115 	stw	r2,4(r4)
10006b98:	003f4a06 	br	100068c4 <__alt_data_end+0xf80068c4>
10006b9c:	01403f04 	movi	r5,252
10006ba0:	01c01f84 	movi	r7,126
10006ba4:	003e7b06 	br	10006594 <__alt_data_end+0xf8006594>
10006ba8:	00c00044 	movi	r3,1
10006bac:	002b883a 	mov	r21,zero
10006bb0:	003f3006 	br	10006874 <__alt_data_end+0xf8006874>
10006bb4:	00840074 	movhi	r2,4097
10006bb8:	108a9b04 	addi	r2,r2,10860
10006bbc:	15000015 	stw	r20,0(r2)
10006bc0:	003f1b06 	br	10006830 <__alt_data_end+0xf8006830>
10006bc4:	9009883a 	mov	r4,r18
10006bc8:	81400204 	addi	r5,r16,8
10006bcc:	00058e80 	call	100058e8 <_free_r>
10006bd0:	00840074 	movhi	r2,4097
10006bd4:	10930004 	addi	r2,r2,19456
10006bd8:	10c00017 	ldw	r3,0(r2)
10006bdc:	003f3906 	br	100068c4 <__alt_data_end+0xf80068c4>
10006be0:	01005504 	movi	r4,340
10006be4:	20800436 	bltu	r4,r2,10006bf8 <_malloc_r+0x774>
10006be8:	3804d3fa 	srli	r2,r7,15
10006bec:	11001dc4 	addi	r4,r2,119
10006bf0:	210b883a 	add	r5,r4,r4
10006bf4:	003f6206 	br	10006980 <__alt_data_end+0xf8006980>
10006bf8:	01015504 	movi	r4,1364
10006bfc:	20800436 	bltu	r4,r2,10006c10 <_malloc_r+0x78c>
10006c00:	3804d4ba 	srli	r2,r7,18
10006c04:	11001f04 	addi	r4,r2,124
10006c08:	210b883a 	add	r5,r4,r4
10006c0c:	003f5c06 	br	10006980 <__alt_data_end+0xf8006980>
10006c10:	01403f04 	movi	r5,252
10006c14:	01001f84 	movi	r4,126
10006c18:	003f5906 	br	10006980 <__alt_data_end+0xf8006980>
10006c1c:	98800117 	ldw	r2,4(r19)
10006c20:	003fa906 	br	10006ac8 <__alt_data_end+0xf8006ac8>
10006c24:	6007883a 	mov	r3,r12
10006c28:	003ea206 	br	100066b4 <__alt_data_end+0xf80066b4>

10006c2c <memchr>:
10006c2c:	208000cc 	andi	r2,r4,3
10006c30:	280f883a 	mov	r7,r5
10006c34:	10003526 	beq	r2,zero,10006d0c <memchr+0xe0>
10006c38:	30bfffc4 	addi	r2,r6,-1
10006c3c:	30001b26 	beq	r6,zero,10006cac <memchr+0x80>
10006c40:	21800003 	ldbu	r6,0(r4)
10006c44:	28c03fcc 	andi	r3,r5,255
10006c48:	30c01a26 	beq	r6,r3,10006cb4 <memchr+0x88>
10006c4c:	180d883a 	mov	r6,r3
10006c50:	00000406 	br	10006c64 <memchr+0x38>
10006c54:	10001526 	beq	r2,zero,10006cac <memchr+0x80>
10006c58:	20c00003 	ldbu	r3,0(r4)
10006c5c:	10bfffc4 	addi	r2,r2,-1
10006c60:	19801426 	beq	r3,r6,10006cb4 <memchr+0x88>
10006c64:	21000044 	addi	r4,r4,1
10006c68:	20c000cc 	andi	r3,r4,3
10006c6c:	183ff91e 	bne	r3,zero,10006c54 <__alt_data_end+0xf8006c54>
10006c70:	024000c4 	movi	r9,3
10006c74:	48801136 	bltu	r9,r2,10006cbc <memchr+0x90>
10006c78:	10000c26 	beq	r2,zero,10006cac <memchr+0x80>
10006c7c:	20c00003 	ldbu	r3,0(r4)
10006c80:	29403fcc 	andi	r5,r5,255
10006c84:	19400b26 	beq	r3,r5,10006cb4 <memchr+0x88>
10006c88:	20c00044 	addi	r3,r4,1
10006c8c:	2085883a 	add	r2,r4,r2
10006c90:	39803fcc 	andi	r6,r7,255
10006c94:	00000306 	br	10006ca4 <memchr+0x78>
10006c98:	18c00044 	addi	r3,r3,1
10006c9c:	197fffc3 	ldbu	r5,-1(r3)
10006ca0:	29800426 	beq	r5,r6,10006cb4 <memchr+0x88>
10006ca4:	1809883a 	mov	r4,r3
10006ca8:	18bffb1e 	bne	r3,r2,10006c98 <__alt_data_end+0xf8006c98>
10006cac:	0005883a 	mov	r2,zero
10006cb0:	f800283a 	ret
10006cb4:	2005883a 	mov	r2,r4
10006cb8:	f800283a 	ret
10006cbc:	28c03fcc 	andi	r3,r5,255
10006cc0:	1810923a 	slli	r8,r3,8
10006cc4:	02ffbff4 	movhi	r11,65279
10006cc8:	02a02074 	movhi	r10,32897
10006ccc:	40c6b03a 	or	r3,r8,r3
10006cd0:	1810943a 	slli	r8,r3,16
10006cd4:	5affbfc4 	addi	r11,r11,-257
10006cd8:	52a02004 	addi	r10,r10,-32640
10006cdc:	40d0b03a 	or	r8,r8,r3
10006ce0:	20c00017 	ldw	r3,0(r4)
10006ce4:	40c6f03a 	xor	r3,r8,r3
10006ce8:	1acd883a 	add	r6,r3,r11
10006cec:	00c6303a 	nor	r3,zero,r3
10006cf0:	30c6703a 	and	r3,r6,r3
10006cf4:	1a86703a 	and	r3,r3,r10
10006cf8:	183fdf1e 	bne	r3,zero,10006c78 <__alt_data_end+0xf8006c78>
10006cfc:	10bfff04 	addi	r2,r2,-4
10006d00:	21000104 	addi	r4,r4,4
10006d04:	48bff636 	bltu	r9,r2,10006ce0 <__alt_data_end+0xf8006ce0>
10006d08:	003fdb06 	br	10006c78 <__alt_data_end+0xf8006c78>
10006d0c:	3005883a 	mov	r2,r6
10006d10:	003fd706 	br	10006c70 <__alt_data_end+0xf8006c70>

10006d14 <memmove>:
10006d14:	2005883a 	mov	r2,r4
10006d18:	29000b2e 	bgeu	r5,r4,10006d48 <memmove+0x34>
10006d1c:	298f883a 	add	r7,r5,r6
10006d20:	21c0092e 	bgeu	r4,r7,10006d48 <memmove+0x34>
10006d24:	2187883a 	add	r3,r4,r6
10006d28:	198bc83a 	sub	r5,r3,r6
10006d2c:	30004b26 	beq	r6,zero,10006e5c <memmove+0x148>
10006d30:	39ffffc4 	addi	r7,r7,-1
10006d34:	39000003 	ldbu	r4,0(r7)
10006d38:	18ffffc4 	addi	r3,r3,-1
10006d3c:	19000005 	stb	r4,0(r3)
10006d40:	197ffb1e 	bne	r3,r5,10006d30 <__alt_data_end+0xf8006d30>
10006d44:	f800283a 	ret
10006d48:	00c003c4 	movi	r3,15
10006d4c:	1980412e 	bgeu	r3,r6,10006e54 <memmove+0x140>
10006d50:	1146b03a 	or	r3,r2,r5
10006d54:	18c000cc 	andi	r3,r3,3
10006d58:	1800411e 	bne	r3,zero,10006e60 <memmove+0x14c>
10006d5c:	33fffc04 	addi	r15,r6,-16
10006d60:	781ed13a 	srli	r15,r15,4
10006d64:	28c00104 	addi	r3,r5,4
10006d68:	13400104 	addi	r13,r2,4
10006d6c:	781c913a 	slli	r14,r15,4
10006d70:	2b000204 	addi	r12,r5,8
10006d74:	12c00204 	addi	r11,r2,8
10006d78:	73800504 	addi	r14,r14,20
10006d7c:	2a800304 	addi	r10,r5,12
10006d80:	12400304 	addi	r9,r2,12
10006d84:	2b9d883a 	add	r14,r5,r14
10006d88:	2811883a 	mov	r8,r5
10006d8c:	100f883a 	mov	r7,r2
10006d90:	41000017 	ldw	r4,0(r8)
10006d94:	39c00404 	addi	r7,r7,16
10006d98:	18c00404 	addi	r3,r3,16
10006d9c:	393ffc15 	stw	r4,-16(r7)
10006da0:	193ffc17 	ldw	r4,-16(r3)
10006da4:	6b400404 	addi	r13,r13,16
10006da8:	5ac00404 	addi	r11,r11,16
10006dac:	693ffc15 	stw	r4,-16(r13)
10006db0:	61000017 	ldw	r4,0(r12)
10006db4:	4a400404 	addi	r9,r9,16
10006db8:	42000404 	addi	r8,r8,16
10006dbc:	593ffc15 	stw	r4,-16(r11)
10006dc0:	51000017 	ldw	r4,0(r10)
10006dc4:	63000404 	addi	r12,r12,16
10006dc8:	52800404 	addi	r10,r10,16
10006dcc:	493ffc15 	stw	r4,-16(r9)
10006dd0:	1bbfef1e 	bne	r3,r14,10006d90 <__alt_data_end+0xf8006d90>
10006dd4:	79000044 	addi	r4,r15,1
10006dd8:	2008913a 	slli	r4,r4,4
10006ddc:	328003cc 	andi	r10,r6,15
10006de0:	02c000c4 	movi	r11,3
10006de4:	1107883a 	add	r3,r2,r4
10006de8:	290b883a 	add	r5,r5,r4
10006dec:	5a801e2e 	bgeu	r11,r10,10006e68 <memmove+0x154>
10006df0:	1813883a 	mov	r9,r3
10006df4:	2811883a 	mov	r8,r5
10006df8:	500f883a 	mov	r7,r10
10006dfc:	41000017 	ldw	r4,0(r8)
10006e00:	4a400104 	addi	r9,r9,4
10006e04:	39ffff04 	addi	r7,r7,-4
10006e08:	493fff15 	stw	r4,-4(r9)
10006e0c:	42000104 	addi	r8,r8,4
10006e10:	59fffa36 	bltu	r11,r7,10006dfc <__alt_data_end+0xf8006dfc>
10006e14:	513fff04 	addi	r4,r10,-4
10006e18:	2008d0ba 	srli	r4,r4,2
10006e1c:	318000cc 	andi	r6,r6,3
10006e20:	21000044 	addi	r4,r4,1
10006e24:	2109883a 	add	r4,r4,r4
10006e28:	2109883a 	add	r4,r4,r4
10006e2c:	1907883a 	add	r3,r3,r4
10006e30:	290b883a 	add	r5,r5,r4
10006e34:	30000926 	beq	r6,zero,10006e5c <memmove+0x148>
10006e38:	198d883a 	add	r6,r3,r6
10006e3c:	29c00003 	ldbu	r7,0(r5)
10006e40:	18c00044 	addi	r3,r3,1
10006e44:	29400044 	addi	r5,r5,1
10006e48:	19ffffc5 	stb	r7,-1(r3)
10006e4c:	19bffb1e 	bne	r3,r6,10006e3c <__alt_data_end+0xf8006e3c>
10006e50:	f800283a 	ret
10006e54:	1007883a 	mov	r3,r2
10006e58:	003ff606 	br	10006e34 <__alt_data_end+0xf8006e34>
10006e5c:	f800283a 	ret
10006e60:	1007883a 	mov	r3,r2
10006e64:	003ff406 	br	10006e38 <__alt_data_end+0xf8006e38>
10006e68:	500d883a 	mov	r6,r10
10006e6c:	003ff106 	br	10006e34 <__alt_data_end+0xf8006e34>

10006e70 <memset>:
10006e70:	20c000cc 	andi	r3,r4,3
10006e74:	2005883a 	mov	r2,r4
10006e78:	18004326 	beq	r3,zero,10006f88 <memset+0x118>
10006e7c:	31ffffc4 	addi	r7,r6,-1
10006e80:	30004026 	beq	r6,zero,10006f84 <memset+0x114>
10006e84:	2813883a 	mov	r9,r5
10006e88:	200d883a 	mov	r6,r4
10006e8c:	2007883a 	mov	r3,r4
10006e90:	00000406 	br	10006ea4 <memset+0x34>
10006e94:	3a3fffc4 	addi	r8,r7,-1
10006e98:	31800044 	addi	r6,r6,1
10006e9c:	38003926 	beq	r7,zero,10006f84 <memset+0x114>
10006ea0:	400f883a 	mov	r7,r8
10006ea4:	18c00044 	addi	r3,r3,1
10006ea8:	32400005 	stb	r9,0(r6)
10006eac:	1a0000cc 	andi	r8,r3,3
10006eb0:	403ff81e 	bne	r8,zero,10006e94 <__alt_data_end+0xf8006e94>
10006eb4:	010000c4 	movi	r4,3
10006eb8:	21c02d2e 	bgeu	r4,r7,10006f70 <memset+0x100>
10006ebc:	29803fcc 	andi	r6,r5,255
10006ec0:	3008923a 	slli	r4,r6,8
10006ec4:	218cb03a 	or	r6,r4,r6
10006ec8:	3008943a 	slli	r4,r6,16
10006ecc:	218cb03a 	or	r6,r4,r6
10006ed0:	010003c4 	movi	r4,15
10006ed4:	21c0182e 	bgeu	r4,r7,10006f38 <memset+0xc8>
10006ed8:	3b3ffc04 	addi	r12,r7,-16
10006edc:	6018d13a 	srli	r12,r12,4
10006ee0:	1a000104 	addi	r8,r3,4
10006ee4:	1ac00204 	addi	r11,r3,8
10006ee8:	6008913a 	slli	r4,r12,4
10006eec:	1a800304 	addi	r10,r3,12
10006ef0:	1813883a 	mov	r9,r3
10006ef4:	21000504 	addi	r4,r4,20
10006ef8:	1909883a 	add	r4,r3,r4
10006efc:	49800015 	stw	r6,0(r9)
10006f00:	41800015 	stw	r6,0(r8)
10006f04:	59800015 	stw	r6,0(r11)
10006f08:	51800015 	stw	r6,0(r10)
10006f0c:	42000404 	addi	r8,r8,16
10006f10:	4a400404 	addi	r9,r9,16
10006f14:	5ac00404 	addi	r11,r11,16
10006f18:	52800404 	addi	r10,r10,16
10006f1c:	413ff71e 	bne	r8,r4,10006efc <__alt_data_end+0xf8006efc>
10006f20:	63000044 	addi	r12,r12,1
10006f24:	6018913a 	slli	r12,r12,4
10006f28:	39c003cc 	andi	r7,r7,15
10006f2c:	010000c4 	movi	r4,3
10006f30:	1b07883a 	add	r3,r3,r12
10006f34:	21c00e2e 	bgeu	r4,r7,10006f70 <memset+0x100>
10006f38:	1813883a 	mov	r9,r3
10006f3c:	3811883a 	mov	r8,r7
10006f40:	010000c4 	movi	r4,3
10006f44:	49800015 	stw	r6,0(r9)
10006f48:	423fff04 	addi	r8,r8,-4
10006f4c:	4a400104 	addi	r9,r9,4
10006f50:	223ffc36 	bltu	r4,r8,10006f44 <__alt_data_end+0xf8006f44>
10006f54:	393fff04 	addi	r4,r7,-4
10006f58:	2008d0ba 	srli	r4,r4,2
10006f5c:	39c000cc 	andi	r7,r7,3
10006f60:	21000044 	addi	r4,r4,1
10006f64:	2109883a 	add	r4,r4,r4
10006f68:	2109883a 	add	r4,r4,r4
10006f6c:	1907883a 	add	r3,r3,r4
10006f70:	38000426 	beq	r7,zero,10006f84 <memset+0x114>
10006f74:	19cf883a 	add	r7,r3,r7
10006f78:	19400005 	stb	r5,0(r3)
10006f7c:	18c00044 	addi	r3,r3,1
10006f80:	19fffd1e 	bne	r3,r7,10006f78 <__alt_data_end+0xf8006f78>
10006f84:	f800283a 	ret
10006f88:	2007883a 	mov	r3,r4
10006f8c:	300f883a 	mov	r7,r6
10006f90:	003fc806 	br	10006eb4 <__alt_data_end+0xf8006eb4>

10006f94 <_Balloc>:
10006f94:	20801317 	ldw	r2,76(r4)
10006f98:	defffc04 	addi	sp,sp,-16
10006f9c:	dc400115 	stw	r17,4(sp)
10006fa0:	dc000015 	stw	r16,0(sp)
10006fa4:	dfc00315 	stw	ra,12(sp)
10006fa8:	dc800215 	stw	r18,8(sp)
10006fac:	2023883a 	mov	r17,r4
10006fb0:	2821883a 	mov	r16,r5
10006fb4:	10000f26 	beq	r2,zero,10006ff4 <_Balloc+0x60>
10006fb8:	8407883a 	add	r3,r16,r16
10006fbc:	18c7883a 	add	r3,r3,r3
10006fc0:	10c7883a 	add	r3,r2,r3
10006fc4:	18800017 	ldw	r2,0(r3)
10006fc8:	10001126 	beq	r2,zero,10007010 <_Balloc+0x7c>
10006fcc:	11000017 	ldw	r4,0(r2)
10006fd0:	19000015 	stw	r4,0(r3)
10006fd4:	10000415 	stw	zero,16(r2)
10006fd8:	10000315 	stw	zero,12(r2)
10006fdc:	dfc00317 	ldw	ra,12(sp)
10006fe0:	dc800217 	ldw	r18,8(sp)
10006fe4:	dc400117 	ldw	r17,4(sp)
10006fe8:	dc000017 	ldw	r16,0(sp)
10006fec:	dec00404 	addi	sp,sp,16
10006ff0:	f800283a 	ret
10006ff4:	01400104 	movi	r5,4
10006ff8:	01800844 	movi	r6,33
10006ffc:	0009e300 	call	10009e30 <_calloc_r>
10007000:	88801315 	stw	r2,76(r17)
10007004:	103fec1e 	bne	r2,zero,10006fb8 <__alt_data_end+0xf8006fb8>
10007008:	0005883a 	mov	r2,zero
1000700c:	003ff306 	br	10006fdc <__alt_data_end+0xf8006fdc>
10007010:	01400044 	movi	r5,1
10007014:	2c24983a 	sll	r18,r5,r16
10007018:	8809883a 	mov	r4,r17
1000701c:	91800144 	addi	r6,r18,5
10007020:	318d883a 	add	r6,r6,r6
10007024:	318d883a 	add	r6,r6,r6
10007028:	0009e300 	call	10009e30 <_calloc_r>
1000702c:	103ff626 	beq	r2,zero,10007008 <__alt_data_end+0xf8007008>
10007030:	14000115 	stw	r16,4(r2)
10007034:	14800215 	stw	r18,8(r2)
10007038:	003fe606 	br	10006fd4 <__alt_data_end+0xf8006fd4>

1000703c <_Bfree>:
1000703c:	28000826 	beq	r5,zero,10007060 <_Bfree+0x24>
10007040:	28c00117 	ldw	r3,4(r5)
10007044:	20801317 	ldw	r2,76(r4)
10007048:	18c7883a 	add	r3,r3,r3
1000704c:	18c7883a 	add	r3,r3,r3
10007050:	10c5883a 	add	r2,r2,r3
10007054:	10c00017 	ldw	r3,0(r2)
10007058:	28c00015 	stw	r3,0(r5)
1000705c:	11400015 	stw	r5,0(r2)
10007060:	f800283a 	ret

10007064 <__multadd>:
10007064:	defff704 	addi	sp,sp,-36
10007068:	dc800215 	stw	r18,8(sp)
1000706c:	2c800417 	ldw	r18,16(r5)
10007070:	ddc00715 	stw	r23,28(sp)
10007074:	dd800615 	stw	r22,24(sp)
10007078:	dd000415 	stw	r20,16(sp)
1000707c:	dcc00315 	stw	r19,12(sp)
10007080:	dc400115 	stw	r17,4(sp)
10007084:	dc000015 	stw	r16,0(sp)
10007088:	dfc00815 	stw	ra,32(sp)
1000708c:	dd400515 	stw	r21,20(sp)
10007090:	2827883a 	mov	r19,r5
10007094:	2029883a 	mov	r20,r4
10007098:	3023883a 	mov	r17,r6
1000709c:	3821883a 	mov	r16,r7
100070a0:	2d800504 	addi	r22,r5,20
100070a4:	002f883a 	mov	r23,zero
100070a8:	b5400017 	ldw	r21,0(r22)
100070ac:	880b883a 	mov	r5,r17
100070b0:	bdc00044 	addi	r23,r23,1
100070b4:	a93fffcc 	andi	r4,r21,65535
100070b8:	000b4540 	call	1000b454 <__mulsi3>
100070bc:	1421883a 	add	r16,r2,r16
100070c0:	a808d43a 	srli	r4,r21,16
100070c4:	802ad43a 	srli	r21,r16,16
100070c8:	880b883a 	mov	r5,r17
100070cc:	000b4540 	call	1000b454 <__mulsi3>
100070d0:	a88f883a 	add	r7,r21,r2
100070d4:	3804943a 	slli	r2,r7,16
100070d8:	80ffffcc 	andi	r3,r16,65535
100070dc:	b5800104 	addi	r22,r22,4
100070e0:	10c7883a 	add	r3,r2,r3
100070e4:	b0ffff15 	stw	r3,-4(r22)
100070e8:	3820d43a 	srli	r16,r7,16
100070ec:	bcbfee16 	blt	r23,r18,100070a8 <__alt_data_end+0xf80070a8>
100070f0:	80000926 	beq	r16,zero,10007118 <__multadd+0xb4>
100070f4:	98800217 	ldw	r2,8(r19)
100070f8:	9080130e 	bge	r18,r2,10007148 <__multadd+0xe4>
100070fc:	90800144 	addi	r2,r18,5
10007100:	1085883a 	add	r2,r2,r2
10007104:	1085883a 	add	r2,r2,r2
10007108:	9885883a 	add	r2,r19,r2
1000710c:	14000015 	stw	r16,0(r2)
10007110:	94800044 	addi	r18,r18,1
10007114:	9c800415 	stw	r18,16(r19)
10007118:	9805883a 	mov	r2,r19
1000711c:	dfc00817 	ldw	ra,32(sp)
10007120:	ddc00717 	ldw	r23,28(sp)
10007124:	dd800617 	ldw	r22,24(sp)
10007128:	dd400517 	ldw	r21,20(sp)
1000712c:	dd000417 	ldw	r20,16(sp)
10007130:	dcc00317 	ldw	r19,12(sp)
10007134:	dc800217 	ldw	r18,8(sp)
10007138:	dc400117 	ldw	r17,4(sp)
1000713c:	dc000017 	ldw	r16,0(sp)
10007140:	dec00904 	addi	sp,sp,36
10007144:	f800283a 	ret
10007148:	99400117 	ldw	r5,4(r19)
1000714c:	a009883a 	mov	r4,r20
10007150:	29400044 	addi	r5,r5,1
10007154:	0006f940 	call	10006f94 <_Balloc>
10007158:	99800417 	ldw	r6,16(r19)
1000715c:	99400304 	addi	r5,r19,12
10007160:	11000304 	addi	r4,r2,12
10007164:	31800084 	addi	r6,r6,2
10007168:	318d883a 	add	r6,r6,r6
1000716c:	318d883a 	add	r6,r6,r6
10007170:	1023883a 	mov	r17,r2
10007174:	00013140 	call	10001314 <memcpy>
10007178:	99000117 	ldw	r4,4(r19)
1000717c:	a0c01317 	ldw	r3,76(r20)
10007180:	2109883a 	add	r4,r4,r4
10007184:	2109883a 	add	r4,r4,r4
10007188:	1907883a 	add	r3,r3,r4
1000718c:	18800017 	ldw	r2,0(r3)
10007190:	98800015 	stw	r2,0(r19)
10007194:	1cc00015 	stw	r19,0(r3)
10007198:	8827883a 	mov	r19,r17
1000719c:	003fd706 	br	100070fc <__alt_data_end+0xf80070fc>

100071a0 <__s2b>:
100071a0:	defff904 	addi	sp,sp,-28
100071a4:	dc400115 	stw	r17,4(sp)
100071a8:	dc000015 	stw	r16,0(sp)
100071ac:	2023883a 	mov	r17,r4
100071b0:	2821883a 	mov	r16,r5
100071b4:	39000204 	addi	r4,r7,8
100071b8:	01400244 	movi	r5,9
100071bc:	dcc00315 	stw	r19,12(sp)
100071c0:	dc800215 	stw	r18,8(sp)
100071c4:	dfc00615 	stw	ra,24(sp)
100071c8:	dd400515 	stw	r21,20(sp)
100071cc:	dd000415 	stw	r20,16(sp)
100071d0:	3825883a 	mov	r18,r7
100071d4:	3027883a 	mov	r19,r6
100071d8:	000b3940 	call	1000b394 <__divsi3>
100071dc:	00c00044 	movi	r3,1
100071e0:	000b883a 	mov	r5,zero
100071e4:	1880030e 	bge	r3,r2,100071f4 <__s2b+0x54>
100071e8:	18c7883a 	add	r3,r3,r3
100071ec:	29400044 	addi	r5,r5,1
100071f0:	18bffd16 	blt	r3,r2,100071e8 <__alt_data_end+0xf80071e8>
100071f4:	8809883a 	mov	r4,r17
100071f8:	0006f940 	call	10006f94 <_Balloc>
100071fc:	d8c00717 	ldw	r3,28(sp)
10007200:	10c00515 	stw	r3,20(r2)
10007204:	00c00044 	movi	r3,1
10007208:	10c00415 	stw	r3,16(r2)
1000720c:	00c00244 	movi	r3,9
10007210:	1cc0210e 	bge	r3,r19,10007298 <__s2b+0xf8>
10007214:	80eb883a 	add	r21,r16,r3
10007218:	a829883a 	mov	r20,r21
1000721c:	84e1883a 	add	r16,r16,r19
10007220:	a1c00007 	ldb	r7,0(r20)
10007224:	8809883a 	mov	r4,r17
10007228:	a5000044 	addi	r20,r20,1
1000722c:	100b883a 	mov	r5,r2
10007230:	01800284 	movi	r6,10
10007234:	39fff404 	addi	r7,r7,-48
10007238:	00070640 	call	10007064 <__multadd>
1000723c:	a43ff81e 	bne	r20,r16,10007220 <__alt_data_end+0xf8007220>
10007240:	ace1883a 	add	r16,r21,r19
10007244:	843ffe04 	addi	r16,r16,-8
10007248:	9c800a0e 	bge	r19,r18,10007274 <__s2b+0xd4>
1000724c:	94e5c83a 	sub	r18,r18,r19
10007250:	84a5883a 	add	r18,r16,r18
10007254:	81c00007 	ldb	r7,0(r16)
10007258:	8809883a 	mov	r4,r17
1000725c:	84000044 	addi	r16,r16,1
10007260:	100b883a 	mov	r5,r2
10007264:	01800284 	movi	r6,10
10007268:	39fff404 	addi	r7,r7,-48
1000726c:	00070640 	call	10007064 <__multadd>
10007270:	84bff81e 	bne	r16,r18,10007254 <__alt_data_end+0xf8007254>
10007274:	dfc00617 	ldw	ra,24(sp)
10007278:	dd400517 	ldw	r21,20(sp)
1000727c:	dd000417 	ldw	r20,16(sp)
10007280:	dcc00317 	ldw	r19,12(sp)
10007284:	dc800217 	ldw	r18,8(sp)
10007288:	dc400117 	ldw	r17,4(sp)
1000728c:	dc000017 	ldw	r16,0(sp)
10007290:	dec00704 	addi	sp,sp,28
10007294:	f800283a 	ret
10007298:	84000284 	addi	r16,r16,10
1000729c:	1827883a 	mov	r19,r3
100072a0:	003fe906 	br	10007248 <__alt_data_end+0xf8007248>

100072a4 <__hi0bits>:
100072a4:	20bfffec 	andhi	r2,r4,65535
100072a8:	1000141e 	bne	r2,zero,100072fc <__hi0bits+0x58>
100072ac:	2008943a 	slli	r4,r4,16
100072b0:	00800404 	movi	r2,16
100072b4:	20ffc02c 	andhi	r3,r4,65280
100072b8:	1800021e 	bne	r3,zero,100072c4 <__hi0bits+0x20>
100072bc:	2008923a 	slli	r4,r4,8
100072c0:	10800204 	addi	r2,r2,8
100072c4:	20fc002c 	andhi	r3,r4,61440
100072c8:	1800021e 	bne	r3,zero,100072d4 <__hi0bits+0x30>
100072cc:	2008913a 	slli	r4,r4,4
100072d0:	10800104 	addi	r2,r2,4
100072d4:	20f0002c 	andhi	r3,r4,49152
100072d8:	1800031e 	bne	r3,zero,100072e8 <__hi0bits+0x44>
100072dc:	2109883a 	add	r4,r4,r4
100072e0:	10800084 	addi	r2,r2,2
100072e4:	2109883a 	add	r4,r4,r4
100072e8:	20000316 	blt	r4,zero,100072f8 <__hi0bits+0x54>
100072ec:	2110002c 	andhi	r4,r4,16384
100072f0:	2000041e 	bne	r4,zero,10007304 <__hi0bits+0x60>
100072f4:	00800804 	movi	r2,32
100072f8:	f800283a 	ret
100072fc:	0005883a 	mov	r2,zero
10007300:	003fec06 	br	100072b4 <__alt_data_end+0xf80072b4>
10007304:	10800044 	addi	r2,r2,1
10007308:	f800283a 	ret

1000730c <__lo0bits>:
1000730c:	20c00017 	ldw	r3,0(r4)
10007310:	188001cc 	andi	r2,r3,7
10007314:	10000826 	beq	r2,zero,10007338 <__lo0bits+0x2c>
10007318:	1880004c 	andi	r2,r3,1
1000731c:	1000211e 	bne	r2,zero,100073a4 <__lo0bits+0x98>
10007320:	1880008c 	andi	r2,r3,2
10007324:	1000211e 	bne	r2,zero,100073ac <__lo0bits+0xa0>
10007328:	1806d0ba 	srli	r3,r3,2
1000732c:	00800084 	movi	r2,2
10007330:	20c00015 	stw	r3,0(r4)
10007334:	f800283a 	ret
10007338:	18bfffcc 	andi	r2,r3,65535
1000733c:	10001326 	beq	r2,zero,1000738c <__lo0bits+0x80>
10007340:	0005883a 	mov	r2,zero
10007344:	19403fcc 	andi	r5,r3,255
10007348:	2800021e 	bne	r5,zero,10007354 <__lo0bits+0x48>
1000734c:	1806d23a 	srli	r3,r3,8
10007350:	10800204 	addi	r2,r2,8
10007354:	194003cc 	andi	r5,r3,15
10007358:	2800021e 	bne	r5,zero,10007364 <__lo0bits+0x58>
1000735c:	1806d13a 	srli	r3,r3,4
10007360:	10800104 	addi	r2,r2,4
10007364:	194000cc 	andi	r5,r3,3
10007368:	2800021e 	bne	r5,zero,10007374 <__lo0bits+0x68>
1000736c:	1806d0ba 	srli	r3,r3,2
10007370:	10800084 	addi	r2,r2,2
10007374:	1940004c 	andi	r5,r3,1
10007378:	2800081e 	bne	r5,zero,1000739c <__lo0bits+0x90>
1000737c:	1806d07a 	srli	r3,r3,1
10007380:	1800051e 	bne	r3,zero,10007398 <__lo0bits+0x8c>
10007384:	00800804 	movi	r2,32
10007388:	f800283a 	ret
1000738c:	1806d43a 	srli	r3,r3,16
10007390:	00800404 	movi	r2,16
10007394:	003feb06 	br	10007344 <__alt_data_end+0xf8007344>
10007398:	10800044 	addi	r2,r2,1
1000739c:	20c00015 	stw	r3,0(r4)
100073a0:	f800283a 	ret
100073a4:	0005883a 	mov	r2,zero
100073a8:	f800283a 	ret
100073ac:	1806d07a 	srli	r3,r3,1
100073b0:	00800044 	movi	r2,1
100073b4:	20c00015 	stw	r3,0(r4)
100073b8:	f800283a 	ret

100073bc <__i2b>:
100073bc:	defffd04 	addi	sp,sp,-12
100073c0:	dc000015 	stw	r16,0(sp)
100073c4:	04000044 	movi	r16,1
100073c8:	dc400115 	stw	r17,4(sp)
100073cc:	2823883a 	mov	r17,r5
100073d0:	800b883a 	mov	r5,r16
100073d4:	dfc00215 	stw	ra,8(sp)
100073d8:	0006f940 	call	10006f94 <_Balloc>
100073dc:	14400515 	stw	r17,20(r2)
100073e0:	14000415 	stw	r16,16(r2)
100073e4:	dfc00217 	ldw	ra,8(sp)
100073e8:	dc400117 	ldw	r17,4(sp)
100073ec:	dc000017 	ldw	r16,0(sp)
100073f0:	dec00304 	addi	sp,sp,12
100073f4:	f800283a 	ret

100073f8 <__multiply>:
100073f8:	deffef04 	addi	sp,sp,-68
100073fc:	dc400815 	stw	r17,32(sp)
10007400:	dc000715 	stw	r16,28(sp)
10007404:	2c400417 	ldw	r17,16(r5)
10007408:	34000417 	ldw	r16,16(r6)
1000740c:	dd800d15 	stw	r22,52(sp)
10007410:	dc800915 	stw	r18,36(sp)
10007414:	dfc01015 	stw	ra,64(sp)
10007418:	df000f15 	stw	fp,60(sp)
1000741c:	ddc00e15 	stw	r23,56(sp)
10007420:	dd400c15 	stw	r21,48(sp)
10007424:	dd000b15 	stw	r20,44(sp)
10007428:	dcc00a15 	stw	r19,40(sp)
1000742c:	2825883a 	mov	r18,r5
10007430:	302d883a 	mov	r22,r6
10007434:	8c009116 	blt	r17,r16,1000767c <__multiply+0x284>
10007438:	8005883a 	mov	r2,r16
1000743c:	8821883a 	mov	r16,r17
10007440:	1023883a 	mov	r17,r2
10007444:	90800217 	ldw	r2,8(r18)
10007448:	8447883a 	add	r3,r16,r17
1000744c:	d8c00215 	stw	r3,8(sp)
10007450:	91400117 	ldw	r5,4(r18)
10007454:	10c0010e 	bge	r2,r3,1000745c <__multiply+0x64>
10007458:	29400044 	addi	r5,r5,1
1000745c:	0006f940 	call	10006f94 <_Balloc>
10007460:	d8c00217 	ldw	r3,8(sp)
10007464:	d8800615 	stw	r2,24(sp)
10007468:	18eb883a 	add	r21,r3,r3
1000746c:	ad6b883a 	add	r21,r21,r21
10007470:	10c00504 	addi	r3,r2,20
10007474:	1d6b883a 	add	r21,r3,r21
10007478:	d8c00115 	stw	r3,4(sp)
1000747c:	dd400315 	stw	r21,12(sp)
10007480:	1805883a 	mov	r2,r3
10007484:	1d40042e 	bgeu	r3,r21,10007498 <__multiply+0xa0>
10007488:	d8c00317 	ldw	r3,12(sp)
1000748c:	10000015 	stw	zero,0(r2)
10007490:	10800104 	addi	r2,r2,4
10007494:	10fffc36 	bltu	r2,r3,10007488 <__alt_data_end+0xf8007488>
10007498:	8c63883a 	add	r17,r17,r17
1000749c:	b5800504 	addi	r22,r22,20
100074a0:	8c63883a 	add	r17,r17,r17
100074a4:	94800504 	addi	r18,r18,20
100074a8:	8421883a 	add	r16,r16,r16
100074ac:	b463883a 	add	r17,r22,r17
100074b0:	8421883a 	add	r16,r16,r16
100074b4:	dd800015 	stw	r22,0(sp)
100074b8:	dc800415 	stw	r18,16(sp)
100074bc:	dc400515 	stw	r17,20(sp)
100074c0:	9429883a 	add	r20,r18,r16
100074c4:	b4404f2e 	bgeu	r22,r17,10007604 <__multiply+0x20c>
100074c8:	d8c00017 	ldw	r3,0(sp)
100074cc:	1c800017 	ldw	r18,0(r3)
100074d0:	943fffcc 	andi	r16,r18,65535
100074d4:	80001e26 	beq	r16,zero,10007550 <__multiply+0x158>
100074d8:	dd800117 	ldw	r22,4(sp)
100074dc:	dd400417 	ldw	r21,16(sp)
100074e0:	0025883a 	mov	r18,zero
100074e4:	adc00017 	ldw	r23,0(r21)
100074e8:	b4c00017 	ldw	r19,0(r22)
100074ec:	800b883a 	mov	r5,r16
100074f0:	b93fffcc 	andi	r4,r23,65535
100074f4:	000b4540 	call	1000b454 <__mulsi3>
100074f8:	9c7fffcc 	andi	r17,r19,65535
100074fc:	8885883a 	add	r2,r17,r2
10007500:	b808d43a 	srli	r4,r23,16
10007504:	14a3883a 	add	r17,r2,r18
10007508:	9826d43a 	srli	r19,r19,16
1000750c:	8824d43a 	srli	r18,r17,16
10007510:	800b883a 	mov	r5,r16
10007514:	000b4540 	call	1000b454 <__mulsi3>
10007518:	9885883a 	add	r2,r19,r2
1000751c:	14a7883a 	add	r19,r2,r18
10007520:	88ffffcc 	andi	r3,r17,65535
10007524:	9822943a 	slli	r17,r19,16
10007528:	ad400104 	addi	r21,r21,4
1000752c:	b005883a 	mov	r2,r22
10007530:	88c6b03a 	or	r3,r17,r3
10007534:	b0c00015 	stw	r3,0(r22)
10007538:	9824d43a 	srli	r18,r19,16
1000753c:	b5800104 	addi	r22,r22,4
10007540:	ad3fe836 	bltu	r21,r20,100074e4 <__alt_data_end+0xf80074e4>
10007544:	d8c00017 	ldw	r3,0(sp)
10007548:	14800115 	stw	r18,4(r2)
1000754c:	1c800017 	ldw	r18,0(r3)
10007550:	9024d43a 	srli	r18,r18,16
10007554:	90002226 	beq	r18,zero,100075e0 <__multiply+0x1e8>
10007558:	d8c00117 	ldw	r3,4(sp)
1000755c:	dd800417 	ldw	r22,16(sp)
10007560:	002f883a 	mov	r23,zero
10007564:	1f000017 	ldw	fp,0(r3)
10007568:	1823883a 	mov	r17,r3
1000756c:	182b883a 	mov	r21,r3
10007570:	e021883a 	mov	r16,fp
10007574:	00000106 	br	1000757c <__multiply+0x184>
10007578:	982b883a 	mov	r21,r19
1000757c:	b100000b 	ldhu	r4,0(r22)
10007580:	8020d43a 	srli	r16,r16,16
10007584:	900b883a 	mov	r5,r18
10007588:	000b4540 	call	1000b454 <__mulsi3>
1000758c:	1405883a 	add	r2,r2,r16
10007590:	15ef883a 	add	r23,r2,r23
10007594:	b804943a 	slli	r2,r23,16
10007598:	e0ffffcc 	andi	r3,fp,65535
1000759c:	8c400104 	addi	r17,r17,4
100075a0:	10c6b03a 	or	r3,r2,r3
100075a4:	88ffff15 	stw	r3,-4(r17)
100075a8:	b5800104 	addi	r22,r22,4
100075ac:	b13fff17 	ldw	r4,-4(r22)
100075b0:	acc00104 	addi	r19,r21,4
100075b4:	900b883a 	mov	r5,r18
100075b8:	2008d43a 	srli	r4,r4,16
100075bc:	9c000017 	ldw	r16,0(r19)
100075c0:	000b4540 	call	1000b454 <__mulsi3>
100075c4:	b806d43a 	srli	r3,r23,16
100075c8:	813fffcc 	andi	r4,r16,65535
100075cc:	1105883a 	add	r2,r2,r4
100075d0:	10f9883a 	add	fp,r2,r3
100075d4:	e02ed43a 	srli	r23,fp,16
100075d8:	b53fe736 	bltu	r22,r20,10007578 <__alt_data_end+0xf8007578>
100075dc:	af000115 	stw	fp,4(r21)
100075e0:	d8c00017 	ldw	r3,0(sp)
100075e4:	d9000517 	ldw	r4,20(sp)
100075e8:	18c00104 	addi	r3,r3,4
100075ec:	d8c00015 	stw	r3,0(sp)
100075f0:	d8c00117 	ldw	r3,4(sp)
100075f4:	18c00104 	addi	r3,r3,4
100075f8:	d8c00115 	stw	r3,4(sp)
100075fc:	d8c00017 	ldw	r3,0(sp)
10007600:	193fb136 	bltu	r3,r4,100074c8 <__alt_data_end+0xf80074c8>
10007604:	d8c00217 	ldw	r3,8(sp)
10007608:	00c00c0e 	bge	zero,r3,1000763c <__multiply+0x244>
1000760c:	d8c00317 	ldw	r3,12(sp)
10007610:	18bfff17 	ldw	r2,-4(r3)
10007614:	1d7fff04 	addi	r21,r3,-4
10007618:	10000326 	beq	r2,zero,10007628 <__multiply+0x230>
1000761c:	00000706 	br	1000763c <__multiply+0x244>
10007620:	a8800017 	ldw	r2,0(r21)
10007624:	1000051e 	bne	r2,zero,1000763c <__multiply+0x244>
10007628:	d8c00217 	ldw	r3,8(sp)
1000762c:	ad7fff04 	addi	r21,r21,-4
10007630:	18ffffc4 	addi	r3,r3,-1
10007634:	d8c00215 	stw	r3,8(sp)
10007638:	183ff91e 	bne	r3,zero,10007620 <__alt_data_end+0xf8007620>
1000763c:	d8c00617 	ldw	r3,24(sp)
10007640:	d9000217 	ldw	r4,8(sp)
10007644:	1805883a 	mov	r2,r3
10007648:	19000415 	stw	r4,16(r3)
1000764c:	dfc01017 	ldw	ra,64(sp)
10007650:	df000f17 	ldw	fp,60(sp)
10007654:	ddc00e17 	ldw	r23,56(sp)
10007658:	dd800d17 	ldw	r22,52(sp)
1000765c:	dd400c17 	ldw	r21,48(sp)
10007660:	dd000b17 	ldw	r20,44(sp)
10007664:	dcc00a17 	ldw	r19,40(sp)
10007668:	dc800917 	ldw	r18,36(sp)
1000766c:	dc400817 	ldw	r17,32(sp)
10007670:	dc000717 	ldw	r16,28(sp)
10007674:	dec01104 	addi	sp,sp,68
10007678:	f800283a 	ret
1000767c:	3025883a 	mov	r18,r6
10007680:	282d883a 	mov	r22,r5
10007684:	003f6f06 	br	10007444 <__alt_data_end+0xf8007444>

10007688 <__pow5mult>:
10007688:	defffa04 	addi	sp,sp,-24
1000768c:	dcc00315 	stw	r19,12(sp)
10007690:	dc800215 	stw	r18,8(sp)
10007694:	dc000015 	stw	r16,0(sp)
10007698:	dfc00515 	stw	ra,20(sp)
1000769c:	dd000415 	stw	r20,16(sp)
100076a0:	dc400115 	stw	r17,4(sp)
100076a4:	308000cc 	andi	r2,r6,3
100076a8:	3021883a 	mov	r16,r6
100076ac:	2027883a 	mov	r19,r4
100076b0:	2825883a 	mov	r18,r5
100076b4:	10002e1e 	bne	r2,zero,10007770 <__pow5mult+0xe8>
100076b8:	8021d0ba 	srai	r16,r16,2
100076bc:	80001a26 	beq	r16,zero,10007728 <__pow5mult+0xa0>
100076c0:	9c401217 	ldw	r17,72(r19)
100076c4:	8800061e 	bne	r17,zero,100076e0 <__pow5mult+0x58>
100076c8:	00003406 	br	1000779c <__pow5mult+0x114>
100076cc:	8021d07a 	srai	r16,r16,1
100076d0:	80001526 	beq	r16,zero,10007728 <__pow5mult+0xa0>
100076d4:	88800017 	ldw	r2,0(r17)
100076d8:	10001c26 	beq	r2,zero,1000774c <__pow5mult+0xc4>
100076dc:	1023883a 	mov	r17,r2
100076e0:	80c0004c 	andi	r3,r16,1
100076e4:	183ff926 	beq	r3,zero,100076cc <__alt_data_end+0xf80076cc>
100076e8:	900b883a 	mov	r5,r18
100076ec:	880d883a 	mov	r6,r17
100076f0:	9809883a 	mov	r4,r19
100076f4:	00073f80 	call	100073f8 <__multiply>
100076f8:	90001b26 	beq	r18,zero,10007768 <__pow5mult+0xe0>
100076fc:	91c00117 	ldw	r7,4(r18)
10007700:	98c01317 	ldw	r3,76(r19)
10007704:	8021d07a 	srai	r16,r16,1
10007708:	39cf883a 	add	r7,r7,r7
1000770c:	39cf883a 	add	r7,r7,r7
10007710:	19c7883a 	add	r3,r3,r7
10007714:	19000017 	ldw	r4,0(r3)
10007718:	91000015 	stw	r4,0(r18)
1000771c:	1c800015 	stw	r18,0(r3)
10007720:	1025883a 	mov	r18,r2
10007724:	803feb1e 	bne	r16,zero,100076d4 <__alt_data_end+0xf80076d4>
10007728:	9005883a 	mov	r2,r18
1000772c:	dfc00517 	ldw	ra,20(sp)
10007730:	dd000417 	ldw	r20,16(sp)
10007734:	dcc00317 	ldw	r19,12(sp)
10007738:	dc800217 	ldw	r18,8(sp)
1000773c:	dc400117 	ldw	r17,4(sp)
10007740:	dc000017 	ldw	r16,0(sp)
10007744:	dec00604 	addi	sp,sp,24
10007748:	f800283a 	ret
1000774c:	9809883a 	mov	r4,r19
10007750:	880b883a 	mov	r5,r17
10007754:	880d883a 	mov	r6,r17
10007758:	00073f80 	call	100073f8 <__multiply>
1000775c:	88800015 	stw	r2,0(r17)
10007760:	10000015 	stw	zero,0(r2)
10007764:	003fdd06 	br	100076dc <__alt_data_end+0xf80076dc>
10007768:	1025883a 	mov	r18,r2
1000776c:	003fd706 	br	100076cc <__alt_data_end+0xf80076cc>
10007770:	10bfffc4 	addi	r2,r2,-1
10007774:	1085883a 	add	r2,r2,r2
10007778:	00c40074 	movhi	r3,4097
1000777c:	18c1c004 	addi	r3,r3,1792
10007780:	1085883a 	add	r2,r2,r2
10007784:	1885883a 	add	r2,r3,r2
10007788:	11800017 	ldw	r6,0(r2)
1000778c:	000f883a 	mov	r7,zero
10007790:	00070640 	call	10007064 <__multadd>
10007794:	1025883a 	mov	r18,r2
10007798:	003fc706 	br	100076b8 <__alt_data_end+0xf80076b8>
1000779c:	05000044 	movi	r20,1
100077a0:	9809883a 	mov	r4,r19
100077a4:	a00b883a 	mov	r5,r20
100077a8:	0006f940 	call	10006f94 <_Balloc>
100077ac:	1023883a 	mov	r17,r2
100077b0:	00809c44 	movi	r2,625
100077b4:	88800515 	stw	r2,20(r17)
100077b8:	8d000415 	stw	r20,16(r17)
100077bc:	9c401215 	stw	r17,72(r19)
100077c0:	88000015 	stw	zero,0(r17)
100077c4:	003fc606 	br	100076e0 <__alt_data_end+0xf80076e0>

100077c8 <__lshift>:
100077c8:	defff904 	addi	sp,sp,-28
100077cc:	dd000415 	stw	r20,16(sp)
100077d0:	dcc00315 	stw	r19,12(sp)
100077d4:	3029d17a 	srai	r20,r6,5
100077d8:	2cc00417 	ldw	r19,16(r5)
100077dc:	28800217 	ldw	r2,8(r5)
100077e0:	dd400515 	stw	r21,20(sp)
100077e4:	a4e7883a 	add	r19,r20,r19
100077e8:	dc800215 	stw	r18,8(sp)
100077ec:	dc400115 	stw	r17,4(sp)
100077f0:	dc000015 	stw	r16,0(sp)
100077f4:	dfc00615 	stw	ra,24(sp)
100077f8:	9c000044 	addi	r16,r19,1
100077fc:	2823883a 	mov	r17,r5
10007800:	302b883a 	mov	r21,r6
10007804:	2025883a 	mov	r18,r4
10007808:	29400117 	ldw	r5,4(r5)
1000780c:	1400030e 	bge	r2,r16,1000781c <__lshift+0x54>
10007810:	1085883a 	add	r2,r2,r2
10007814:	29400044 	addi	r5,r5,1
10007818:	143ffd16 	blt	r2,r16,10007810 <__alt_data_end+0xf8007810>
1000781c:	9009883a 	mov	r4,r18
10007820:	0006f940 	call	10006f94 <_Balloc>
10007824:	11c00504 	addi	r7,r2,20
10007828:	0500090e 	bge	zero,r20,10007850 <__lshift+0x88>
1000782c:	3811883a 	mov	r8,r7
10007830:	0007883a 	mov	r3,zero
10007834:	40000015 	stw	zero,0(r8)
10007838:	18c00044 	addi	r3,r3,1
1000783c:	42000104 	addi	r8,r8,4
10007840:	1d3ffc1e 	bne	r3,r20,10007834 <__alt_data_end+0xf8007834>
10007844:	18c7883a 	add	r3,r3,r3
10007848:	18c7883a 	add	r3,r3,r3
1000784c:	38cf883a 	add	r7,r7,r3
10007850:	89000417 	ldw	r4,16(r17)
10007854:	88c00504 	addi	r3,r17,20
10007858:	a98007cc 	andi	r6,r21,31
1000785c:	2109883a 	add	r4,r4,r4
10007860:	2109883a 	add	r4,r4,r4
10007864:	1909883a 	add	r4,r3,r4
10007868:	30002326 	beq	r6,zero,100078f8 <__lshift+0x130>
1000786c:	01400804 	movi	r5,32
10007870:	298bc83a 	sub	r5,r5,r6
10007874:	0013883a 	mov	r9,zero
10007878:	1a000017 	ldw	r8,0(r3)
1000787c:	3815883a 	mov	r10,r7
10007880:	39c00104 	addi	r7,r7,4
10007884:	4190983a 	sll	r8,r8,r6
10007888:	18c00104 	addi	r3,r3,4
1000788c:	4a10b03a 	or	r8,r9,r8
10007890:	3a3fff15 	stw	r8,-4(r7)
10007894:	1a3fff17 	ldw	r8,-4(r3)
10007898:	4152d83a 	srl	r9,r8,r5
1000789c:	193ff636 	bltu	r3,r4,10007878 <__alt_data_end+0xf8007878>
100078a0:	52400115 	stw	r9,4(r10)
100078a4:	48000126 	beq	r9,zero,100078ac <__lshift+0xe4>
100078a8:	9c000084 	addi	r16,r19,2
100078ac:	89000117 	ldw	r4,4(r17)
100078b0:	90c01317 	ldw	r3,76(r18)
100078b4:	843fffc4 	addi	r16,r16,-1
100078b8:	2109883a 	add	r4,r4,r4
100078bc:	2109883a 	add	r4,r4,r4
100078c0:	1907883a 	add	r3,r3,r4
100078c4:	19000017 	ldw	r4,0(r3)
100078c8:	14000415 	stw	r16,16(r2)
100078cc:	89000015 	stw	r4,0(r17)
100078d0:	1c400015 	stw	r17,0(r3)
100078d4:	dfc00617 	ldw	ra,24(sp)
100078d8:	dd400517 	ldw	r21,20(sp)
100078dc:	dd000417 	ldw	r20,16(sp)
100078e0:	dcc00317 	ldw	r19,12(sp)
100078e4:	dc800217 	ldw	r18,8(sp)
100078e8:	dc400117 	ldw	r17,4(sp)
100078ec:	dc000017 	ldw	r16,0(sp)
100078f0:	dec00704 	addi	sp,sp,28
100078f4:	f800283a 	ret
100078f8:	19400017 	ldw	r5,0(r3)
100078fc:	39c00104 	addi	r7,r7,4
10007900:	18c00104 	addi	r3,r3,4
10007904:	397fff15 	stw	r5,-4(r7)
10007908:	193ffb36 	bltu	r3,r4,100078f8 <__alt_data_end+0xf80078f8>
1000790c:	003fe706 	br	100078ac <__alt_data_end+0xf80078ac>

10007910 <__mcmp>:
10007910:	20800417 	ldw	r2,16(r4)
10007914:	28c00417 	ldw	r3,16(r5)
10007918:	10c5c83a 	sub	r2,r2,r3
1000791c:	1000111e 	bne	r2,zero,10007964 <__mcmp+0x54>
10007920:	18c7883a 	add	r3,r3,r3
10007924:	18c7883a 	add	r3,r3,r3
10007928:	21000504 	addi	r4,r4,20
1000792c:	29400504 	addi	r5,r5,20
10007930:	20c5883a 	add	r2,r4,r3
10007934:	28cb883a 	add	r5,r5,r3
10007938:	00000106 	br	10007940 <__mcmp+0x30>
1000793c:	20800a2e 	bgeu	r4,r2,10007968 <__mcmp+0x58>
10007940:	10bfff04 	addi	r2,r2,-4
10007944:	297fff04 	addi	r5,r5,-4
10007948:	11800017 	ldw	r6,0(r2)
1000794c:	28c00017 	ldw	r3,0(r5)
10007950:	30fffa26 	beq	r6,r3,1000793c <__alt_data_end+0xf800793c>
10007954:	30c00236 	bltu	r6,r3,10007960 <__mcmp+0x50>
10007958:	00800044 	movi	r2,1
1000795c:	f800283a 	ret
10007960:	00bfffc4 	movi	r2,-1
10007964:	f800283a 	ret
10007968:	0005883a 	mov	r2,zero
1000796c:	f800283a 	ret

10007970 <__mdiff>:
10007970:	defffb04 	addi	sp,sp,-20
10007974:	dc000015 	stw	r16,0(sp)
10007978:	2821883a 	mov	r16,r5
1000797c:	dcc00315 	stw	r19,12(sp)
10007980:	300b883a 	mov	r5,r6
10007984:	2027883a 	mov	r19,r4
10007988:	8009883a 	mov	r4,r16
1000798c:	dc800215 	stw	r18,8(sp)
10007990:	dfc00415 	stw	ra,16(sp)
10007994:	dc400115 	stw	r17,4(sp)
10007998:	3025883a 	mov	r18,r6
1000799c:	00079100 	call	10007910 <__mcmp>
100079a0:	10005226 	beq	r2,zero,10007aec <__mdiff+0x17c>
100079a4:	10004c16 	blt	r2,zero,10007ad8 <__mdiff+0x168>
100079a8:	0023883a 	mov	r17,zero
100079ac:	81400117 	ldw	r5,4(r16)
100079b0:	9809883a 	mov	r4,r19
100079b4:	0006f940 	call	10006f94 <_Balloc>
100079b8:	83400417 	ldw	r13,16(r16)
100079bc:	93800417 	ldw	r14,16(r18)
100079c0:	81000504 	addi	r4,r16,20
100079c4:	6b59883a 	add	r12,r13,r13
100079c8:	739d883a 	add	r14,r14,r14
100079cc:	6319883a 	add	r12,r12,r12
100079d0:	91800504 	addi	r6,r18,20
100079d4:	739d883a 	add	r14,r14,r14
100079d8:	14400315 	stw	r17,12(r2)
100079dc:	2319883a 	add	r12,r4,r12
100079e0:	339d883a 	add	r14,r6,r14
100079e4:	12400504 	addi	r9,r2,20
100079e8:	0007883a 	mov	r3,zero
100079ec:	22000017 	ldw	r8,0(r4)
100079f0:	32800017 	ldw	r10,0(r6)
100079f4:	4ac00104 	addi	r11,r9,4
100079f8:	41ffffcc 	andi	r7,r8,65535
100079fc:	38c7883a 	add	r3,r7,r3
10007a00:	51ffffcc 	andi	r7,r10,65535
10007a04:	19cfc83a 	sub	r7,r3,r7
10007a08:	4010d43a 	srli	r8,r8,16
10007a0c:	5014d43a 	srli	r10,r10,16
10007a10:	3807d43a 	srai	r3,r7,16
10007a14:	39ffffcc 	andi	r7,r7,65535
10007a18:	4291c83a 	sub	r8,r8,r10
10007a1c:	40c7883a 	add	r3,r8,r3
10007a20:	1810943a 	slli	r8,r3,16
10007a24:	31800104 	addi	r6,r6,4
10007a28:	21000104 	addi	r4,r4,4
10007a2c:	41ceb03a 	or	r7,r8,r7
10007a30:	49c00015 	stw	r7,0(r9)
10007a34:	1807d43a 	srai	r3,r3,16
10007a38:	580b883a 	mov	r5,r11
10007a3c:	5813883a 	mov	r9,r11
10007a40:	33bfea36 	bltu	r6,r14,100079ec <__alt_data_end+0xf80079ec>
10007a44:	2011883a 	mov	r8,r4
10007a48:	2300152e 	bgeu	r4,r12,10007aa0 <__mdiff+0x130>
10007a4c:	21400017 	ldw	r5,0(r4)
10007a50:	4a400104 	addi	r9,r9,4
10007a54:	21000104 	addi	r4,r4,4
10007a58:	29ffffcc 	andi	r7,r5,65535
10007a5c:	38c7883a 	add	r3,r7,r3
10007a60:	280ad43a 	srli	r5,r5,16
10007a64:	180dd43a 	srai	r6,r3,16
10007a68:	19ffffcc 	andi	r7,r3,65535
10007a6c:	3147883a 	add	r3,r6,r5
10007a70:	180a943a 	slli	r5,r3,16
10007a74:	1807d43a 	srai	r3,r3,16
10007a78:	29ceb03a 	or	r7,r5,r7
10007a7c:	49ffff15 	stw	r7,-4(r9)
10007a80:	233ff236 	bltu	r4,r12,10007a4c <__alt_data_end+0xf8007a4c>
10007a84:	0206303a 	nor	r3,zero,r8
10007a88:	1b07883a 	add	r3,r3,r12
10007a8c:	1806d0ba 	srli	r3,r3,2
10007a90:	18c00044 	addi	r3,r3,1
10007a94:	18c7883a 	add	r3,r3,r3
10007a98:	18c7883a 	add	r3,r3,r3
10007a9c:	58cb883a 	add	r5,r11,r3
10007aa0:	28ffff04 	addi	r3,r5,-4
10007aa4:	3800041e 	bne	r7,zero,10007ab8 <__mdiff+0x148>
10007aa8:	18ffff04 	addi	r3,r3,-4
10007aac:	19000017 	ldw	r4,0(r3)
10007ab0:	6b7fffc4 	addi	r13,r13,-1
10007ab4:	203ffc26 	beq	r4,zero,10007aa8 <__alt_data_end+0xf8007aa8>
10007ab8:	13400415 	stw	r13,16(r2)
10007abc:	dfc00417 	ldw	ra,16(sp)
10007ac0:	dcc00317 	ldw	r19,12(sp)
10007ac4:	dc800217 	ldw	r18,8(sp)
10007ac8:	dc400117 	ldw	r17,4(sp)
10007acc:	dc000017 	ldw	r16,0(sp)
10007ad0:	dec00504 	addi	sp,sp,20
10007ad4:	f800283a 	ret
10007ad8:	8005883a 	mov	r2,r16
10007adc:	04400044 	movi	r17,1
10007ae0:	9021883a 	mov	r16,r18
10007ae4:	1025883a 	mov	r18,r2
10007ae8:	003fb006 	br	100079ac <__alt_data_end+0xf80079ac>
10007aec:	9809883a 	mov	r4,r19
10007af0:	000b883a 	mov	r5,zero
10007af4:	0006f940 	call	10006f94 <_Balloc>
10007af8:	00c00044 	movi	r3,1
10007afc:	10c00415 	stw	r3,16(r2)
10007b00:	10000515 	stw	zero,20(r2)
10007b04:	003fed06 	br	10007abc <__alt_data_end+0xf8007abc>

10007b08 <__ulp>:
10007b08:	295ffc2c 	andhi	r5,r5,32752
10007b0c:	00bf3034 	movhi	r2,64704
10007b10:	2887883a 	add	r3,r5,r2
10007b14:	00c0020e 	bge	zero,r3,10007b20 <__ulp+0x18>
10007b18:	0005883a 	mov	r2,zero
10007b1c:	f800283a 	ret
10007b20:	00c7c83a 	sub	r3,zero,r3
10007b24:	180bd53a 	srai	r5,r3,20
10007b28:	008004c4 	movi	r2,19
10007b2c:	11400a0e 	bge	r2,r5,10007b58 <__ulp+0x50>
10007b30:	00800c84 	movi	r2,50
10007b34:	0007883a 	mov	r3,zero
10007b38:	11400516 	blt	r2,r5,10007b50 <__ulp+0x48>
10007b3c:	00800cc4 	movi	r2,51
10007b40:	114bc83a 	sub	r5,r2,r5
10007b44:	00800044 	movi	r2,1
10007b48:	1144983a 	sll	r2,r2,r5
10007b4c:	f800283a 	ret
10007b50:	00800044 	movi	r2,1
10007b54:	f800283a 	ret
10007b58:	00800234 	movhi	r2,8
10007b5c:	1147d83a 	sra	r3,r2,r5
10007b60:	0005883a 	mov	r2,zero
10007b64:	f800283a 	ret

10007b68 <__b2d>:
10007b68:	defffa04 	addi	sp,sp,-24
10007b6c:	dc000015 	stw	r16,0(sp)
10007b70:	24000417 	ldw	r16,16(r4)
10007b74:	dc400115 	stw	r17,4(sp)
10007b78:	24400504 	addi	r17,r4,20
10007b7c:	8421883a 	add	r16,r16,r16
10007b80:	8421883a 	add	r16,r16,r16
10007b84:	8c21883a 	add	r16,r17,r16
10007b88:	dc800215 	stw	r18,8(sp)
10007b8c:	84bfff17 	ldw	r18,-4(r16)
10007b90:	dd000415 	stw	r20,16(sp)
10007b94:	dcc00315 	stw	r19,12(sp)
10007b98:	9009883a 	mov	r4,r18
10007b9c:	2829883a 	mov	r20,r5
10007ba0:	dfc00515 	stw	ra,20(sp)
10007ba4:	00072a40 	call	100072a4 <__hi0bits>
10007ba8:	00c00804 	movi	r3,32
10007bac:	1887c83a 	sub	r3,r3,r2
10007bb0:	a0c00015 	stw	r3,0(r20)
10007bb4:	00c00284 	movi	r3,10
10007bb8:	84ffff04 	addi	r19,r16,-4
10007bbc:	18801216 	blt	r3,r2,10007c08 <__b2d+0xa0>
10007bc0:	014002c4 	movi	r5,11
10007bc4:	2889c83a 	sub	r4,r5,r2
10007bc8:	9106d83a 	srl	r3,r18,r4
10007bcc:	18cffc34 	orhi	r3,r3,16368
10007bd0:	8cc0282e 	bgeu	r17,r19,10007c74 <__b2d+0x10c>
10007bd4:	817ffe17 	ldw	r5,-8(r16)
10007bd8:	290ad83a 	srl	r5,r5,r4
10007bdc:	10800544 	addi	r2,r2,21
10007be0:	9084983a 	sll	r2,r18,r2
10007be4:	2884b03a 	or	r2,r5,r2
10007be8:	dfc00517 	ldw	ra,20(sp)
10007bec:	dd000417 	ldw	r20,16(sp)
10007bf0:	dcc00317 	ldw	r19,12(sp)
10007bf4:	dc800217 	ldw	r18,8(sp)
10007bf8:	dc400117 	ldw	r17,4(sp)
10007bfc:	dc000017 	ldw	r16,0(sp)
10007c00:	dec00604 	addi	sp,sp,24
10007c04:	f800283a 	ret
10007c08:	113ffd44 	addi	r4,r2,-11
10007c0c:	8cc00f2e 	bgeu	r17,r19,10007c4c <__b2d+0xe4>
10007c10:	81bffe04 	addi	r6,r16,-8
10007c14:	817ffe17 	ldw	r5,-8(r16)
10007c18:	20001326 	beq	r4,zero,10007c68 <__b2d+0x100>
10007c1c:	00c00ac4 	movi	r3,43
10007c20:	1885c83a 	sub	r2,r3,r2
10007c24:	2886d83a 	srl	r3,r5,r2
10007c28:	9124983a 	sll	r18,r18,r4
10007c2c:	90e4b03a 	or	r18,r18,r3
10007c30:	90cffc34 	orhi	r3,r18,16368
10007c34:	8980112e 	bgeu	r17,r6,10007c7c <__b2d+0x114>
10007c38:	81bffd17 	ldw	r6,-12(r16)
10007c3c:	308cd83a 	srl	r6,r6,r2
10007c40:	2904983a 	sll	r2,r5,r4
10007c44:	1184b03a 	or	r2,r2,r6
10007c48:	003fe706 	br	10007be8 <__alt_data_end+0xf8007be8>
10007c4c:	20000526 	beq	r4,zero,10007c64 <__b2d+0xfc>
10007c50:	9124983a 	sll	r18,r18,r4
10007c54:	000d883a 	mov	r6,zero
10007c58:	000b883a 	mov	r5,zero
10007c5c:	90cffc34 	orhi	r3,r18,16368
10007c60:	003ff706 	br	10007c40 <__alt_data_end+0xf8007c40>
10007c64:	000b883a 	mov	r5,zero
10007c68:	90cffc34 	orhi	r3,r18,16368
10007c6c:	2805883a 	mov	r2,r5
10007c70:	003fdd06 	br	10007be8 <__alt_data_end+0xf8007be8>
10007c74:	000b883a 	mov	r5,zero
10007c78:	003fd806 	br	10007bdc <__alt_data_end+0xf8007bdc>
10007c7c:	000d883a 	mov	r6,zero
10007c80:	003fef06 	br	10007c40 <__alt_data_end+0xf8007c40>

10007c84 <__d2b>:
10007c84:	defff704 	addi	sp,sp,-36
10007c88:	dc000215 	stw	r16,8(sp)
10007c8c:	3021883a 	mov	r16,r6
10007c90:	dc400315 	stw	r17,12(sp)
10007c94:	8022907a 	slli	r17,r16,1
10007c98:	dd400715 	stw	r21,28(sp)
10007c9c:	282b883a 	mov	r21,r5
10007ca0:	01400044 	movi	r5,1
10007ca4:	dd000615 	stw	r20,24(sp)
10007ca8:	dcc00515 	stw	r19,20(sp)
10007cac:	dc800415 	stw	r18,16(sp)
10007cb0:	dfc00815 	stw	ra,32(sp)
10007cb4:	3829883a 	mov	r20,r7
10007cb8:	dc800917 	ldw	r18,36(sp)
10007cbc:	8822d57a 	srli	r17,r17,21
10007cc0:	0006f940 	call	10006f94 <_Balloc>
10007cc4:	1027883a 	mov	r19,r2
10007cc8:	00800434 	movhi	r2,16
10007ccc:	10bfffc4 	addi	r2,r2,-1
10007cd0:	808c703a 	and	r6,r16,r2
10007cd4:	88000126 	beq	r17,zero,10007cdc <__d2b+0x58>
10007cd8:	31800434 	orhi	r6,r6,16
10007cdc:	d9800015 	stw	r6,0(sp)
10007ce0:	a8001f26 	beq	r21,zero,10007d60 <__d2b+0xdc>
10007ce4:	d9000104 	addi	r4,sp,4
10007ce8:	dd400115 	stw	r21,4(sp)
10007cec:	000730c0 	call	1000730c <__lo0bits>
10007cf0:	d8c00017 	ldw	r3,0(sp)
10007cf4:	1000291e 	bne	r2,zero,10007d9c <__d2b+0x118>
10007cf8:	d9000117 	ldw	r4,4(sp)
10007cfc:	99000515 	stw	r4,20(r19)
10007d00:	1820c03a 	cmpne	r16,r3,zero
10007d04:	84000044 	addi	r16,r16,1
10007d08:	98c00615 	stw	r3,24(r19)
10007d0c:	9c000415 	stw	r16,16(r19)
10007d10:	88001b1e 	bne	r17,zero,10007d80 <__d2b+0xfc>
10007d14:	800690ba 	slli	r3,r16,2
10007d18:	10bef384 	addi	r2,r2,-1074
10007d1c:	a0800015 	stw	r2,0(r20)
10007d20:	98c5883a 	add	r2,r19,r3
10007d24:	11000417 	ldw	r4,16(r2)
10007d28:	8020917a 	slli	r16,r16,5
10007d2c:	00072a40 	call	100072a4 <__hi0bits>
10007d30:	8085c83a 	sub	r2,r16,r2
10007d34:	90800015 	stw	r2,0(r18)
10007d38:	9805883a 	mov	r2,r19
10007d3c:	dfc00817 	ldw	ra,32(sp)
10007d40:	dd400717 	ldw	r21,28(sp)
10007d44:	dd000617 	ldw	r20,24(sp)
10007d48:	dcc00517 	ldw	r19,20(sp)
10007d4c:	dc800417 	ldw	r18,16(sp)
10007d50:	dc400317 	ldw	r17,12(sp)
10007d54:	dc000217 	ldw	r16,8(sp)
10007d58:	dec00904 	addi	sp,sp,36
10007d5c:	f800283a 	ret
10007d60:	d809883a 	mov	r4,sp
10007d64:	000730c0 	call	1000730c <__lo0bits>
10007d68:	d8c00017 	ldw	r3,0(sp)
10007d6c:	04000044 	movi	r16,1
10007d70:	9c000415 	stw	r16,16(r19)
10007d74:	98c00515 	stw	r3,20(r19)
10007d78:	10800804 	addi	r2,r2,32
10007d7c:	883fe526 	beq	r17,zero,10007d14 <__alt_data_end+0xf8007d14>
10007d80:	8c7ef344 	addi	r17,r17,-1075
10007d84:	88a3883a 	add	r17,r17,r2
10007d88:	00c00d44 	movi	r3,53
10007d8c:	a4400015 	stw	r17,0(r20)
10007d90:	1885c83a 	sub	r2,r3,r2
10007d94:	90800015 	stw	r2,0(r18)
10007d98:	003fe706 	br	10007d38 <__alt_data_end+0xf8007d38>
10007d9c:	01000804 	movi	r4,32
10007da0:	2089c83a 	sub	r4,r4,r2
10007da4:	1908983a 	sll	r4,r3,r4
10007da8:	d9400117 	ldw	r5,4(sp)
10007dac:	1886d83a 	srl	r3,r3,r2
10007db0:	2148b03a 	or	r4,r4,r5
10007db4:	99000515 	stw	r4,20(r19)
10007db8:	d8c00015 	stw	r3,0(sp)
10007dbc:	003fd006 	br	10007d00 <__alt_data_end+0xf8007d00>

10007dc0 <__ratio>:
10007dc0:	defff904 	addi	sp,sp,-28
10007dc4:	dc400315 	stw	r17,12(sp)
10007dc8:	2823883a 	mov	r17,r5
10007dcc:	d9400104 	addi	r5,sp,4
10007dd0:	dfc00615 	stw	ra,24(sp)
10007dd4:	dcc00515 	stw	r19,20(sp)
10007dd8:	dc800415 	stw	r18,16(sp)
10007ddc:	2027883a 	mov	r19,r4
10007de0:	dc000215 	stw	r16,8(sp)
10007de4:	0007b680 	call	10007b68 <__b2d>
10007de8:	8809883a 	mov	r4,r17
10007dec:	d80b883a 	mov	r5,sp
10007df0:	1025883a 	mov	r18,r2
10007df4:	1821883a 	mov	r16,r3
10007df8:	0007b680 	call	10007b68 <__b2d>
10007dfc:	8a400417 	ldw	r9,16(r17)
10007e00:	9a000417 	ldw	r8,16(r19)
10007e04:	100d883a 	mov	r6,r2
10007e08:	d8800017 	ldw	r2,0(sp)
10007e0c:	4251c83a 	sub	r8,r8,r9
10007e10:	4012917a 	slli	r9,r8,5
10007e14:	da000117 	ldw	r8,4(sp)
10007e18:	4091c83a 	sub	r8,r8,r2
10007e1c:	4251883a 	add	r8,r8,r9
10007e20:	02000d0e 	bge	zero,r8,10007e58 <__ratio+0x98>
10007e24:	4010953a 	slli	r8,r8,20
10007e28:	4421883a 	add	r16,r8,r16
10007e2c:	9009883a 	mov	r4,r18
10007e30:	800b883a 	mov	r5,r16
10007e34:	180f883a 	mov	r7,r3
10007e38:	000bd180 	call	1000bd18 <__divdf3>
10007e3c:	dfc00617 	ldw	ra,24(sp)
10007e40:	dcc00517 	ldw	r19,20(sp)
10007e44:	dc800417 	ldw	r18,16(sp)
10007e48:	dc400317 	ldw	r17,12(sp)
10007e4c:	dc000217 	ldw	r16,8(sp)
10007e50:	dec00704 	addi	sp,sp,28
10007e54:	f800283a 	ret
10007e58:	4010953a 	slli	r8,r8,20
10007e5c:	1a07c83a 	sub	r3,r3,r8
10007e60:	003ff206 	br	10007e2c <__alt_data_end+0xf8007e2c>

10007e64 <_mprec_log10>:
10007e64:	defffe04 	addi	sp,sp,-8
10007e68:	dc000015 	stw	r16,0(sp)
10007e6c:	dfc00115 	stw	ra,4(sp)
10007e70:	008005c4 	movi	r2,23
10007e74:	2021883a 	mov	r16,r4
10007e78:	11000d0e 	bge	r2,r4,10007eb0 <_mprec_log10+0x4c>
10007e7c:	0005883a 	mov	r2,zero
10007e80:	00cffc34 	movhi	r3,16368
10007e84:	843fffc4 	addi	r16,r16,-1
10007e88:	1009883a 	mov	r4,r2
10007e8c:	180b883a 	mov	r5,r3
10007e90:	000d883a 	mov	r6,zero
10007e94:	01d00934 	movhi	r7,16420
10007e98:	000c8dc0 	call	1000c8dc <__muldf3>
10007e9c:	803ff91e 	bne	r16,zero,10007e84 <__alt_data_end+0xf8007e84>
10007ea0:	dfc00117 	ldw	ra,4(sp)
10007ea4:	dc000017 	ldw	r16,0(sp)
10007ea8:	dec00204 	addi	sp,sp,8
10007eac:	f800283a 	ret
10007eb0:	202090fa 	slli	r16,r4,3
10007eb4:	00840074 	movhi	r2,4097
10007eb8:	1081d704 	addi	r2,r2,1884
10007ebc:	1421883a 	add	r16,r2,r16
10007ec0:	80800017 	ldw	r2,0(r16)
10007ec4:	80c00117 	ldw	r3,4(r16)
10007ec8:	dfc00117 	ldw	ra,4(sp)
10007ecc:	dc000017 	ldw	r16,0(sp)
10007ed0:	dec00204 	addi	sp,sp,8
10007ed4:	f800283a 	ret

10007ed8 <__copybits>:
10007ed8:	297fffc4 	addi	r5,r5,-1
10007edc:	280fd17a 	srai	r7,r5,5
10007ee0:	30c00417 	ldw	r3,16(r6)
10007ee4:	30800504 	addi	r2,r6,20
10007ee8:	39c00044 	addi	r7,r7,1
10007eec:	18c7883a 	add	r3,r3,r3
10007ef0:	39cf883a 	add	r7,r7,r7
10007ef4:	18c7883a 	add	r3,r3,r3
10007ef8:	39cf883a 	add	r7,r7,r7
10007efc:	10c7883a 	add	r3,r2,r3
10007f00:	21cf883a 	add	r7,r4,r7
10007f04:	10c00d2e 	bgeu	r2,r3,10007f3c <__copybits+0x64>
10007f08:	200b883a 	mov	r5,r4
10007f0c:	12000017 	ldw	r8,0(r2)
10007f10:	29400104 	addi	r5,r5,4
10007f14:	10800104 	addi	r2,r2,4
10007f18:	2a3fff15 	stw	r8,-4(r5)
10007f1c:	10fffb36 	bltu	r2,r3,10007f0c <__alt_data_end+0xf8007f0c>
10007f20:	1985c83a 	sub	r2,r3,r6
10007f24:	10bffac4 	addi	r2,r2,-21
10007f28:	1004d0ba 	srli	r2,r2,2
10007f2c:	10800044 	addi	r2,r2,1
10007f30:	1085883a 	add	r2,r2,r2
10007f34:	1085883a 	add	r2,r2,r2
10007f38:	2089883a 	add	r4,r4,r2
10007f3c:	21c0032e 	bgeu	r4,r7,10007f4c <__copybits+0x74>
10007f40:	20000015 	stw	zero,0(r4)
10007f44:	21000104 	addi	r4,r4,4
10007f48:	21fffd36 	bltu	r4,r7,10007f40 <__alt_data_end+0xf8007f40>
10007f4c:	f800283a 	ret

10007f50 <__any_on>:
10007f50:	20c00417 	ldw	r3,16(r4)
10007f54:	2805d17a 	srai	r2,r5,5
10007f58:	21000504 	addi	r4,r4,20
10007f5c:	18800d0e 	bge	r3,r2,10007f94 <__any_on+0x44>
10007f60:	18c7883a 	add	r3,r3,r3
10007f64:	18c7883a 	add	r3,r3,r3
10007f68:	20c7883a 	add	r3,r4,r3
10007f6c:	20c0192e 	bgeu	r4,r3,10007fd4 <__any_on+0x84>
10007f70:	18bfff17 	ldw	r2,-4(r3)
10007f74:	18ffff04 	addi	r3,r3,-4
10007f78:	1000041e 	bne	r2,zero,10007f8c <__any_on+0x3c>
10007f7c:	20c0142e 	bgeu	r4,r3,10007fd0 <__any_on+0x80>
10007f80:	18ffff04 	addi	r3,r3,-4
10007f84:	19400017 	ldw	r5,0(r3)
10007f88:	283ffc26 	beq	r5,zero,10007f7c <__alt_data_end+0xf8007f7c>
10007f8c:	00800044 	movi	r2,1
10007f90:	f800283a 	ret
10007f94:	10c00a0e 	bge	r2,r3,10007fc0 <__any_on+0x70>
10007f98:	1085883a 	add	r2,r2,r2
10007f9c:	1085883a 	add	r2,r2,r2
10007fa0:	294007cc 	andi	r5,r5,31
10007fa4:	2087883a 	add	r3,r4,r2
10007fa8:	283ff026 	beq	r5,zero,10007f6c <__alt_data_end+0xf8007f6c>
10007fac:	19800017 	ldw	r6,0(r3)
10007fb0:	3144d83a 	srl	r2,r6,r5
10007fb4:	114a983a 	sll	r5,r2,r5
10007fb8:	29bff41e 	bne	r5,r6,10007f8c <__alt_data_end+0xf8007f8c>
10007fbc:	003feb06 	br	10007f6c <__alt_data_end+0xf8007f6c>
10007fc0:	1085883a 	add	r2,r2,r2
10007fc4:	1085883a 	add	r2,r2,r2
10007fc8:	2087883a 	add	r3,r4,r2
10007fcc:	003fe706 	br	10007f6c <__alt_data_end+0xf8007f6c>
10007fd0:	f800283a 	ret
10007fd4:	0005883a 	mov	r2,zero
10007fd8:	f800283a 	ret

10007fdc <_realloc_r>:
10007fdc:	defff604 	addi	sp,sp,-40
10007fe0:	dcc00315 	stw	r19,12(sp)
10007fe4:	dc400115 	stw	r17,4(sp)
10007fe8:	dfc00915 	stw	ra,36(sp)
10007fec:	df000815 	stw	fp,32(sp)
10007ff0:	ddc00715 	stw	r23,28(sp)
10007ff4:	dd800615 	stw	r22,24(sp)
10007ff8:	dd400515 	stw	r21,20(sp)
10007ffc:	dd000415 	stw	r20,16(sp)
10008000:	dc800215 	stw	r18,8(sp)
10008004:	dc000015 	stw	r16,0(sp)
10008008:	2827883a 	mov	r19,r5
1000800c:	3023883a 	mov	r17,r6
10008010:	2800bf26 	beq	r5,zero,10008310 <_realloc_r+0x334>
10008014:	2025883a 	mov	r18,r4
10008018:	000e2580 	call	1000e258 <__malloc_lock>
1000801c:	98ffff17 	ldw	r3,-4(r19)
10008020:	01bfff04 	movi	r6,-4
10008024:	890002c4 	addi	r4,r17,11
10008028:	01c00584 	movi	r7,22
1000802c:	9d7ffe04 	addi	r21,r19,-8
10008030:	19a0703a 	and	r16,r3,r6
10008034:	39003f2e 	bgeu	r7,r4,10008134 <_realloc_r+0x158>
10008038:	053ffe04 	movi	r20,-8
1000803c:	2528703a 	and	r20,r4,r20
10008040:	a00f883a 	mov	r7,r20
10008044:	a0008216 	blt	r20,zero,10008250 <_realloc_r+0x274>
10008048:	a4408136 	bltu	r20,r17,10008250 <_realloc_r+0x274>
1000804c:	81c03c0e 	bge	r16,r7,10008140 <_realloc_r+0x164>
10008050:	07040074 	movhi	fp,4097
10008054:	e7051404 	addi	fp,fp,5200
10008058:	e1000217 	ldw	r4,8(fp)
1000805c:	ac05883a 	add	r2,r21,r16
10008060:	2080bf26 	beq	r4,r2,10008360 <_realloc_r+0x384>
10008064:	11000117 	ldw	r4,4(r2)
10008068:	023fff84 	movi	r8,-2
1000806c:	2210703a 	and	r8,r4,r8
10008070:	1211883a 	add	r8,r2,r8
10008074:	41400117 	ldw	r5,4(r8)
10008078:	2940004c 	andi	r5,r5,1
1000807c:	28004a1e 	bne	r5,zero,100081a8 <_realloc_r+0x1cc>
10008080:	017fff04 	movi	r5,-4
10008084:	2148703a 	and	r4,r4,r5
10008088:	2409883a 	add	r4,r4,r16
1000808c:	21c0ad0e 	bge	r4,r7,10008344 <_realloc_r+0x368>
10008090:	18c0004c 	andi	r3,r3,1
10008094:	18007f1e 	bne	r3,zero,10008294 <_realloc_r+0x2b8>
10008098:	9dfffe17 	ldw	r23,-8(r19)
1000809c:	adefc83a 	sub	r23,r21,r23
100080a0:	bd800117 	ldw	r22,4(r23)
100080a4:	b14a703a 	and	r5,r22,r5
100080a8:	216d883a 	add	r22,r4,r5
100080ac:	b1c04516 	blt	r22,r7,100081c4 <_realloc_r+0x1e8>
100080b0:	10c00317 	ldw	r3,12(r2)
100080b4:	10800217 	ldw	r2,8(r2)
100080b8:	81bfff04 	addi	r6,r16,-4
100080bc:	bc400204 	addi	r17,r23,8
100080c0:	10c00315 	stw	r3,12(r2)
100080c4:	18800215 	stw	r2,8(r3)
100080c8:	b9400217 	ldw	r5,8(r23)
100080cc:	b8c00317 	ldw	r3,12(r23)
100080d0:	00800904 	movi	r2,36
100080d4:	28c00315 	stw	r3,12(r5)
100080d8:	19400215 	stw	r5,8(r3)
100080dc:	1180ef36 	bltu	r2,r6,1000849c <_realloc_r+0x4c0>
100080e0:	008004c4 	movi	r2,19
100080e4:	1180da2e 	bgeu	r2,r6,10008450 <_realloc_r+0x474>
100080e8:	98800017 	ldw	r2,0(r19)
100080ec:	b8800215 	stw	r2,8(r23)
100080f0:	98800117 	ldw	r2,4(r19)
100080f4:	b8800315 	stw	r2,12(r23)
100080f8:	008006c4 	movi	r2,27
100080fc:	1180fc2e 	bgeu	r2,r6,100084f0 <_realloc_r+0x514>
10008100:	98800217 	ldw	r2,8(r19)
10008104:	b8800415 	stw	r2,16(r23)
10008108:	98800317 	ldw	r2,12(r19)
1000810c:	b8800515 	stw	r2,20(r23)
10008110:	00800904 	movi	r2,36
10008114:	3080421e 	bne	r6,r2,10008220 <_realloc_r+0x244>
10008118:	98800417 	ldw	r2,16(r19)
1000811c:	9cc00604 	addi	r19,r19,24
10008120:	b8c00804 	addi	r3,r23,32
10008124:	b8800615 	stw	r2,24(r23)
10008128:	98bfff17 	ldw	r2,-4(r19)
1000812c:	b8800715 	stw	r2,28(r23)
10008130:	00003d06 	br	10008228 <_realloc_r+0x24c>
10008134:	01c00404 	movi	r7,16
10008138:	3829883a 	mov	r20,r7
1000813c:	003fc206 	br	10008048 <__alt_data_end+0xf8008048>
10008140:	9823883a 	mov	r17,r19
10008144:	850fc83a 	sub	r7,r16,r20
10008148:	008003c4 	movi	r2,15
1000814c:	18c0004c 	andi	r3,r3,1
10008150:	11c04336 	bltu	r2,r7,10008260 <_realloc_r+0x284>
10008154:	1c06b03a 	or	r3,r3,r16
10008158:	a8c00115 	stw	r3,4(r21)
1000815c:	ac21883a 	add	r16,r21,r16
10008160:	80c00117 	ldw	r3,4(r16)
10008164:	18c00054 	ori	r3,r3,1
10008168:	80c00115 	stw	r3,4(r16)
1000816c:	9009883a 	mov	r4,r18
10008170:	000e2780 	call	1000e278 <__malloc_unlock>
10008174:	8805883a 	mov	r2,r17
10008178:	dfc00917 	ldw	ra,36(sp)
1000817c:	df000817 	ldw	fp,32(sp)
10008180:	ddc00717 	ldw	r23,28(sp)
10008184:	dd800617 	ldw	r22,24(sp)
10008188:	dd400517 	ldw	r21,20(sp)
1000818c:	dd000417 	ldw	r20,16(sp)
10008190:	dcc00317 	ldw	r19,12(sp)
10008194:	dc800217 	ldw	r18,8(sp)
10008198:	dc400117 	ldw	r17,4(sp)
1000819c:	dc000017 	ldw	r16,0(sp)
100081a0:	dec00a04 	addi	sp,sp,40
100081a4:	f800283a 	ret
100081a8:	18c0004c 	andi	r3,r3,1
100081ac:	1800391e 	bne	r3,zero,10008294 <_realloc_r+0x2b8>
100081b0:	9dfffe17 	ldw	r23,-8(r19)
100081b4:	00bfff04 	movi	r2,-4
100081b8:	adefc83a 	sub	r23,r21,r23
100081bc:	b9400117 	ldw	r5,4(r23)
100081c0:	288a703a 	and	r5,r5,r2
100081c4:	2c2d883a 	add	r22,r5,r16
100081c8:	b1c03216 	blt	r22,r7,10008294 <_realloc_r+0x2b8>
100081cc:	b8800317 	ldw	r2,12(r23)
100081d0:	b8c00217 	ldw	r3,8(r23)
100081d4:	81bfff04 	addi	r6,r16,-4
100081d8:	01000904 	movi	r4,36
100081dc:	18800315 	stw	r2,12(r3)
100081e0:	10c00215 	stw	r3,8(r2)
100081e4:	bc400204 	addi	r17,r23,8
100081e8:	2180ac36 	bltu	r4,r6,1000849c <_realloc_r+0x4c0>
100081ec:	008004c4 	movi	r2,19
100081f0:	1180972e 	bgeu	r2,r6,10008450 <_realloc_r+0x474>
100081f4:	98800017 	ldw	r2,0(r19)
100081f8:	b8800215 	stw	r2,8(r23)
100081fc:	98800117 	ldw	r2,4(r19)
10008200:	b8800315 	stw	r2,12(r23)
10008204:	008006c4 	movi	r2,27
10008208:	1180b92e 	bgeu	r2,r6,100084f0 <_realloc_r+0x514>
1000820c:	98800217 	ldw	r2,8(r19)
10008210:	b8800415 	stw	r2,16(r23)
10008214:	98800317 	ldw	r2,12(r19)
10008218:	b8800515 	stw	r2,20(r23)
1000821c:	313fbe26 	beq	r6,r4,10008118 <__alt_data_end+0xf8008118>
10008220:	b8c00604 	addi	r3,r23,24
10008224:	9cc00404 	addi	r19,r19,16
10008228:	98800017 	ldw	r2,0(r19)
1000822c:	b021883a 	mov	r16,r22
10008230:	b82b883a 	mov	r21,r23
10008234:	18800015 	stw	r2,0(r3)
10008238:	98800117 	ldw	r2,4(r19)
1000823c:	18800115 	stw	r2,4(r3)
10008240:	98800217 	ldw	r2,8(r19)
10008244:	18800215 	stw	r2,8(r3)
10008248:	b8c00117 	ldw	r3,4(r23)
1000824c:	003fbd06 	br	10008144 <__alt_data_end+0xf8008144>
10008250:	00800304 	movi	r2,12
10008254:	90800015 	stw	r2,0(r18)
10008258:	0005883a 	mov	r2,zero
1000825c:	003fc606 	br	10008178 <__alt_data_end+0xf8008178>
10008260:	1d06b03a 	or	r3,r3,r20
10008264:	ad0b883a 	add	r5,r21,r20
10008268:	a8c00115 	stw	r3,4(r21)
1000826c:	38800054 	ori	r2,r7,1
10008270:	28800115 	stw	r2,4(r5)
10008274:	29cf883a 	add	r7,r5,r7
10008278:	38800117 	ldw	r2,4(r7)
1000827c:	9009883a 	mov	r4,r18
10008280:	29400204 	addi	r5,r5,8
10008284:	10800054 	ori	r2,r2,1
10008288:	38800115 	stw	r2,4(r7)
1000828c:	00058e80 	call	100058e8 <_free_r>
10008290:	003fb606 	br	1000816c <__alt_data_end+0xf800816c>
10008294:	880b883a 	mov	r5,r17
10008298:	9009883a 	mov	r4,r18
1000829c:	00064840 	call	10006484 <_malloc_r>
100082a0:	1023883a 	mov	r17,r2
100082a4:	1000aa26 	beq	r2,zero,10008550 <_realloc_r+0x574>
100082a8:	98ffff17 	ldw	r3,-4(r19)
100082ac:	113ffe04 	addi	r4,r2,-8
100082b0:	00bfff84 	movi	r2,-2
100082b4:	1884703a 	and	r2,r3,r2
100082b8:	a885883a 	add	r2,r21,r2
100082bc:	20808626 	beq	r4,r2,100084d8 <_realloc_r+0x4fc>
100082c0:	81bfff04 	addi	r6,r16,-4
100082c4:	00800904 	movi	r2,36
100082c8:	11807036 	bltu	r2,r6,1000848c <_realloc_r+0x4b0>
100082cc:	00c004c4 	movi	r3,19
100082d0:	19805636 	bltu	r3,r6,1000842c <_realloc_r+0x450>
100082d4:	8805883a 	mov	r2,r17
100082d8:	9807883a 	mov	r3,r19
100082dc:	19000017 	ldw	r4,0(r3)
100082e0:	11000015 	stw	r4,0(r2)
100082e4:	19000117 	ldw	r4,4(r3)
100082e8:	11000115 	stw	r4,4(r2)
100082ec:	18c00217 	ldw	r3,8(r3)
100082f0:	10c00215 	stw	r3,8(r2)
100082f4:	980b883a 	mov	r5,r19
100082f8:	9009883a 	mov	r4,r18
100082fc:	00058e80 	call	100058e8 <_free_r>
10008300:	9009883a 	mov	r4,r18
10008304:	000e2780 	call	1000e278 <__malloc_unlock>
10008308:	8805883a 	mov	r2,r17
1000830c:	003f9a06 	br	10008178 <__alt_data_end+0xf8008178>
10008310:	300b883a 	mov	r5,r6
10008314:	dfc00917 	ldw	ra,36(sp)
10008318:	df000817 	ldw	fp,32(sp)
1000831c:	ddc00717 	ldw	r23,28(sp)
10008320:	dd800617 	ldw	r22,24(sp)
10008324:	dd400517 	ldw	r21,20(sp)
10008328:	dd000417 	ldw	r20,16(sp)
1000832c:	dcc00317 	ldw	r19,12(sp)
10008330:	dc800217 	ldw	r18,8(sp)
10008334:	dc400117 	ldw	r17,4(sp)
10008338:	dc000017 	ldw	r16,0(sp)
1000833c:	dec00a04 	addi	sp,sp,40
10008340:	00064841 	jmpi	10006484 <_malloc_r>
10008344:	11400317 	ldw	r5,12(r2)
10008348:	10800217 	ldw	r2,8(r2)
1000834c:	9823883a 	mov	r17,r19
10008350:	2021883a 	mov	r16,r4
10008354:	11400315 	stw	r5,12(r2)
10008358:	28800215 	stw	r2,8(r5)
1000835c:	003f7906 	br	10008144 <__alt_data_end+0xf8008144>
10008360:	21000117 	ldw	r4,4(r4)
10008364:	00bfff04 	movi	r2,-4
10008368:	a1800404 	addi	r6,r20,16
1000836c:	2088703a 	and	r4,r4,r2
10008370:	2409883a 	add	r4,r4,r16
10008374:	2180380e 	bge	r4,r6,10008458 <_realloc_r+0x47c>
10008378:	18c0004c 	andi	r3,r3,1
1000837c:	183fc51e 	bne	r3,zero,10008294 <__alt_data_end+0xf8008294>
10008380:	9dfffe17 	ldw	r23,-8(r19)
10008384:	adefc83a 	sub	r23,r21,r23
10008388:	b9400117 	ldw	r5,4(r23)
1000838c:	288a703a 	and	r5,r5,r2
10008390:	216d883a 	add	r22,r4,r5
10008394:	b1bf8b16 	blt	r22,r6,100081c4 <__alt_data_end+0xf80081c4>
10008398:	b8800317 	ldw	r2,12(r23)
1000839c:	b8c00217 	ldw	r3,8(r23)
100083a0:	81bfff04 	addi	r6,r16,-4
100083a4:	01000904 	movi	r4,36
100083a8:	18800315 	stw	r2,12(r3)
100083ac:	10c00215 	stw	r3,8(r2)
100083b0:	bc400204 	addi	r17,r23,8
100083b4:	21805a36 	bltu	r4,r6,10008520 <_realloc_r+0x544>
100083b8:	008004c4 	movi	r2,19
100083bc:	1180562e 	bgeu	r2,r6,10008518 <_realloc_r+0x53c>
100083c0:	98800017 	ldw	r2,0(r19)
100083c4:	b8800215 	stw	r2,8(r23)
100083c8:	98800117 	ldw	r2,4(r19)
100083cc:	b8800315 	stw	r2,12(r23)
100083d0:	008006c4 	movi	r2,27
100083d4:	11805636 	bltu	r2,r6,10008530 <_realloc_r+0x554>
100083d8:	b8800404 	addi	r2,r23,16
100083dc:	9cc00204 	addi	r19,r19,8
100083e0:	98c00017 	ldw	r3,0(r19)
100083e4:	10c00015 	stw	r3,0(r2)
100083e8:	98c00117 	ldw	r3,4(r19)
100083ec:	10c00115 	stw	r3,4(r2)
100083f0:	98c00217 	ldw	r3,8(r19)
100083f4:	10c00215 	stw	r3,8(r2)
100083f8:	bd07883a 	add	r3,r23,r20
100083fc:	b505c83a 	sub	r2,r22,r20
10008400:	e0c00215 	stw	r3,8(fp)
10008404:	10800054 	ori	r2,r2,1
10008408:	18800115 	stw	r2,4(r3)
1000840c:	b8800117 	ldw	r2,4(r23)
10008410:	9009883a 	mov	r4,r18
10008414:	1080004c 	andi	r2,r2,1
10008418:	a0a8b03a 	or	r20,r20,r2
1000841c:	bd000115 	stw	r20,4(r23)
10008420:	000e2780 	call	1000e278 <__malloc_unlock>
10008424:	8805883a 	mov	r2,r17
10008428:	003f5306 	br	10008178 <__alt_data_end+0xf8008178>
1000842c:	98c00017 	ldw	r3,0(r19)
10008430:	88c00015 	stw	r3,0(r17)
10008434:	98c00117 	ldw	r3,4(r19)
10008438:	88c00115 	stw	r3,4(r17)
1000843c:	00c006c4 	movi	r3,27
10008440:	19801d36 	bltu	r3,r6,100084b8 <_realloc_r+0x4dc>
10008444:	88800204 	addi	r2,r17,8
10008448:	98c00204 	addi	r3,r19,8
1000844c:	003fa306 	br	100082dc <__alt_data_end+0xf80082dc>
10008450:	8807883a 	mov	r3,r17
10008454:	003f7406 	br	10008228 <__alt_data_end+0xf8008228>
10008458:	ad2b883a 	add	r21,r21,r20
1000845c:	2505c83a 	sub	r2,r4,r20
10008460:	e5400215 	stw	r21,8(fp)
10008464:	10800054 	ori	r2,r2,1
10008468:	a8800115 	stw	r2,4(r21)
1000846c:	98bfff17 	ldw	r2,-4(r19)
10008470:	9009883a 	mov	r4,r18
10008474:	1080004c 	andi	r2,r2,1
10008478:	a0a8b03a 	or	r20,r20,r2
1000847c:	9d3fff15 	stw	r20,-4(r19)
10008480:	000e2780 	call	1000e278 <__malloc_unlock>
10008484:	9805883a 	mov	r2,r19
10008488:	003f3b06 	br	10008178 <__alt_data_end+0xf8008178>
1000848c:	8809883a 	mov	r4,r17
10008490:	980b883a 	mov	r5,r19
10008494:	0006d140 	call	10006d14 <memmove>
10008498:	003f9606 	br	100082f4 <__alt_data_end+0xf80082f4>
1000849c:	8809883a 	mov	r4,r17
100084a0:	980b883a 	mov	r5,r19
100084a4:	0006d140 	call	10006d14 <memmove>
100084a8:	b8c00117 	ldw	r3,4(r23)
100084ac:	b021883a 	mov	r16,r22
100084b0:	b82b883a 	mov	r21,r23
100084b4:	003f2306 	br	10008144 <__alt_data_end+0xf8008144>
100084b8:	98c00217 	ldw	r3,8(r19)
100084bc:	88c00215 	stw	r3,8(r17)
100084c0:	98c00317 	ldw	r3,12(r19)
100084c4:	88c00315 	stw	r3,12(r17)
100084c8:	30800c26 	beq	r6,r2,100084fc <_realloc_r+0x520>
100084cc:	88800404 	addi	r2,r17,16
100084d0:	98c00404 	addi	r3,r19,16
100084d4:	003f8106 	br	100082dc <__alt_data_end+0xf80082dc>
100084d8:	893fff17 	ldw	r4,-4(r17)
100084dc:	00bfff04 	movi	r2,-4
100084e0:	9823883a 	mov	r17,r19
100084e4:	2084703a 	and	r2,r4,r2
100084e8:	80a1883a 	add	r16,r16,r2
100084ec:	003f1506 	br	10008144 <__alt_data_end+0xf8008144>
100084f0:	b8c00404 	addi	r3,r23,16
100084f4:	9cc00204 	addi	r19,r19,8
100084f8:	003f4b06 	br	10008228 <__alt_data_end+0xf8008228>
100084fc:	99000417 	ldw	r4,16(r19)
10008500:	88800604 	addi	r2,r17,24
10008504:	98c00604 	addi	r3,r19,24
10008508:	89000415 	stw	r4,16(r17)
1000850c:	99000517 	ldw	r4,20(r19)
10008510:	89000515 	stw	r4,20(r17)
10008514:	003f7106 	br	100082dc <__alt_data_end+0xf80082dc>
10008518:	8805883a 	mov	r2,r17
1000851c:	003fb006 	br	100083e0 <__alt_data_end+0xf80083e0>
10008520:	8809883a 	mov	r4,r17
10008524:	980b883a 	mov	r5,r19
10008528:	0006d140 	call	10006d14 <memmove>
1000852c:	003fb206 	br	100083f8 <__alt_data_end+0xf80083f8>
10008530:	98800217 	ldw	r2,8(r19)
10008534:	b8800415 	stw	r2,16(r23)
10008538:	98800317 	ldw	r2,12(r19)
1000853c:	b8800515 	stw	r2,20(r23)
10008540:	31000726 	beq	r6,r4,10008560 <_realloc_r+0x584>
10008544:	b8800604 	addi	r2,r23,24
10008548:	9cc00404 	addi	r19,r19,16
1000854c:	003fa406 	br	100083e0 <__alt_data_end+0xf80083e0>
10008550:	9009883a 	mov	r4,r18
10008554:	000e2780 	call	1000e278 <__malloc_unlock>
10008558:	0005883a 	mov	r2,zero
1000855c:	003f0606 	br	10008178 <__alt_data_end+0xf8008178>
10008560:	98c00417 	ldw	r3,16(r19)
10008564:	9cc00604 	addi	r19,r19,24
10008568:	b8800804 	addi	r2,r23,32
1000856c:	b8c00615 	stw	r3,24(r23)
10008570:	98ffff17 	ldw	r3,-4(r19)
10008574:	b8c00715 	stw	r3,28(r23)
10008578:	003f9906 	br	100083e0 <__alt_data_end+0xf80083e0>

1000857c <__fpclassifyd>:
1000857c:	00a00034 	movhi	r2,32768
10008580:	10bfffc4 	addi	r2,r2,-1
10008584:	2884703a 	and	r2,r5,r2
10008588:	10000726 	beq	r2,zero,100085a8 <__fpclassifyd+0x2c>
1000858c:	00fffc34 	movhi	r3,65520
10008590:	019ff834 	movhi	r6,32736
10008594:	28c7883a 	add	r3,r5,r3
10008598:	31bfffc4 	addi	r6,r6,-1
1000859c:	30c00536 	bltu	r6,r3,100085b4 <__fpclassifyd+0x38>
100085a0:	00800104 	movi	r2,4
100085a4:	f800283a 	ret
100085a8:	2000021e 	bne	r4,zero,100085b4 <__fpclassifyd+0x38>
100085ac:	00800084 	movi	r2,2
100085b0:	f800283a 	ret
100085b4:	00dffc34 	movhi	r3,32752
100085b8:	019ff834 	movhi	r6,32736
100085bc:	28cb883a 	add	r5,r5,r3
100085c0:	31bfffc4 	addi	r6,r6,-1
100085c4:	317ff62e 	bgeu	r6,r5,100085a0 <__alt_data_end+0xf80085a0>
100085c8:	01400434 	movhi	r5,16
100085cc:	297fffc4 	addi	r5,r5,-1
100085d0:	28800236 	bltu	r5,r2,100085dc <__fpclassifyd+0x60>
100085d4:	008000c4 	movi	r2,3
100085d8:	f800283a 	ret
100085dc:	10c00226 	beq	r2,r3,100085e8 <__fpclassifyd+0x6c>
100085e0:	0005883a 	mov	r2,zero
100085e4:	f800283a 	ret
100085e8:	2005003a 	cmpeq	r2,r4,zero
100085ec:	f800283a 	ret

100085f0 <_sbrk_r>:
100085f0:	defffd04 	addi	sp,sp,-12
100085f4:	dc000015 	stw	r16,0(sp)
100085f8:	04040074 	movhi	r16,4097
100085fc:	dc400115 	stw	r17,4(sp)
10008600:	8412f804 	addi	r16,r16,19424
10008604:	2023883a 	mov	r17,r4
10008608:	2809883a 	mov	r4,r5
1000860c:	dfc00215 	stw	ra,8(sp)
10008610:	80000015 	stw	zero,0(r16)
10008614:	000e46c0 	call	1000e46c <sbrk>
10008618:	00ffffc4 	movi	r3,-1
1000861c:	10c00526 	beq	r2,r3,10008634 <_sbrk_r+0x44>
10008620:	dfc00217 	ldw	ra,8(sp)
10008624:	dc400117 	ldw	r17,4(sp)
10008628:	dc000017 	ldw	r16,0(sp)
1000862c:	dec00304 	addi	sp,sp,12
10008630:	f800283a 	ret
10008634:	80c00017 	ldw	r3,0(r16)
10008638:	183ff926 	beq	r3,zero,10008620 <__alt_data_end+0xf8008620>
1000863c:	88c00015 	stw	r3,0(r17)
10008640:	003ff706 	br	10008620 <__alt_data_end+0xf8008620>

10008644 <__sread>:
10008644:	defffe04 	addi	sp,sp,-8
10008648:	dc000015 	stw	r16,0(sp)
1000864c:	2821883a 	mov	r16,r5
10008650:	2940038f 	ldh	r5,14(r5)
10008654:	dfc00115 	stw	ra,4(sp)
10008658:	000a3000 	call	1000a300 <_read_r>
1000865c:	10000716 	blt	r2,zero,1000867c <__sread+0x38>
10008660:	80c01417 	ldw	r3,80(r16)
10008664:	1887883a 	add	r3,r3,r2
10008668:	80c01415 	stw	r3,80(r16)
1000866c:	dfc00117 	ldw	ra,4(sp)
10008670:	dc000017 	ldw	r16,0(sp)
10008674:	dec00204 	addi	sp,sp,8
10008678:	f800283a 	ret
1000867c:	80c0030b 	ldhu	r3,12(r16)
10008680:	18fbffcc 	andi	r3,r3,61439
10008684:	80c0030d 	sth	r3,12(r16)
10008688:	dfc00117 	ldw	ra,4(sp)
1000868c:	dc000017 	ldw	r16,0(sp)
10008690:	dec00204 	addi	sp,sp,8
10008694:	f800283a 	ret

10008698 <__seofread>:
10008698:	0005883a 	mov	r2,zero
1000869c:	f800283a 	ret

100086a0 <__swrite>:
100086a0:	2880030b 	ldhu	r2,12(r5)
100086a4:	defffb04 	addi	sp,sp,-20
100086a8:	dcc00315 	stw	r19,12(sp)
100086ac:	dc800215 	stw	r18,8(sp)
100086b0:	dc400115 	stw	r17,4(sp)
100086b4:	dc000015 	stw	r16,0(sp)
100086b8:	dfc00415 	stw	ra,16(sp)
100086bc:	10c0400c 	andi	r3,r2,256
100086c0:	2821883a 	mov	r16,r5
100086c4:	2027883a 	mov	r19,r4
100086c8:	3025883a 	mov	r18,r6
100086cc:	3823883a 	mov	r17,r7
100086d0:	18000526 	beq	r3,zero,100086e8 <__swrite+0x48>
100086d4:	2940038f 	ldh	r5,14(r5)
100086d8:	000d883a 	mov	r6,zero
100086dc:	01c00084 	movi	r7,2
100086e0:	000a2a40 	call	1000a2a4 <_lseek_r>
100086e4:	8080030b 	ldhu	r2,12(r16)
100086e8:	8140038f 	ldh	r5,14(r16)
100086ec:	10bbffcc 	andi	r2,r2,61439
100086f0:	9809883a 	mov	r4,r19
100086f4:	900d883a 	mov	r6,r18
100086f8:	880f883a 	mov	r7,r17
100086fc:	8080030d 	sth	r2,12(r16)
10008700:	dfc00417 	ldw	ra,16(sp)
10008704:	dcc00317 	ldw	r19,12(sp)
10008708:	dc800217 	ldw	r18,8(sp)
1000870c:	dc400117 	ldw	r17,4(sp)
10008710:	dc000017 	ldw	r16,0(sp)
10008714:	dec00504 	addi	sp,sp,20
10008718:	0009d801 	jmpi	10009d80 <_write_r>

1000871c <__sseek>:
1000871c:	defffe04 	addi	sp,sp,-8
10008720:	dc000015 	stw	r16,0(sp)
10008724:	2821883a 	mov	r16,r5
10008728:	2940038f 	ldh	r5,14(r5)
1000872c:	dfc00115 	stw	ra,4(sp)
10008730:	000a2a40 	call	1000a2a4 <_lseek_r>
10008734:	00ffffc4 	movi	r3,-1
10008738:	10c00826 	beq	r2,r3,1000875c <__sseek+0x40>
1000873c:	80c0030b 	ldhu	r3,12(r16)
10008740:	80801415 	stw	r2,80(r16)
10008744:	18c40014 	ori	r3,r3,4096
10008748:	80c0030d 	sth	r3,12(r16)
1000874c:	dfc00117 	ldw	ra,4(sp)
10008750:	dc000017 	ldw	r16,0(sp)
10008754:	dec00204 	addi	sp,sp,8
10008758:	f800283a 	ret
1000875c:	80c0030b 	ldhu	r3,12(r16)
10008760:	18fbffcc 	andi	r3,r3,61439
10008764:	80c0030d 	sth	r3,12(r16)
10008768:	dfc00117 	ldw	ra,4(sp)
1000876c:	dc000017 	ldw	r16,0(sp)
10008770:	dec00204 	addi	sp,sp,8
10008774:	f800283a 	ret

10008778 <__sclose>:
10008778:	2940038f 	ldh	r5,14(r5)
1000877c:	0009ddc1 	jmpi	10009ddc <_close_r>

10008780 <strcmp>:
10008780:	2144b03a 	or	r2,r4,r5
10008784:	108000cc 	andi	r2,r2,3
10008788:	1000171e 	bne	r2,zero,100087e8 <strcmp+0x68>
1000878c:	20800017 	ldw	r2,0(r4)
10008790:	28c00017 	ldw	r3,0(r5)
10008794:	10c0141e 	bne	r2,r3,100087e8 <strcmp+0x68>
10008798:	027fbff4 	movhi	r9,65279
1000879c:	4a7fbfc4 	addi	r9,r9,-257
100087a0:	0086303a 	nor	r3,zero,r2
100087a4:	02202074 	movhi	r8,32897
100087a8:	1245883a 	add	r2,r2,r9
100087ac:	42202004 	addi	r8,r8,-32640
100087b0:	10c4703a 	and	r2,r2,r3
100087b4:	1204703a 	and	r2,r2,r8
100087b8:	10000226 	beq	r2,zero,100087c4 <strcmp+0x44>
100087bc:	00001706 	br	1000881c <strcmp+0x9c>
100087c0:	1000161e 	bne	r2,zero,1000881c <strcmp+0x9c>
100087c4:	21000104 	addi	r4,r4,4
100087c8:	20c00017 	ldw	r3,0(r4)
100087cc:	29400104 	addi	r5,r5,4
100087d0:	29800017 	ldw	r6,0(r5)
100087d4:	1a4f883a 	add	r7,r3,r9
100087d8:	00c4303a 	nor	r2,zero,r3
100087dc:	3884703a 	and	r2,r7,r2
100087e0:	1204703a 	and	r2,r2,r8
100087e4:	19bff626 	beq	r3,r6,100087c0 <__alt_data_end+0xf80087c0>
100087e8:	20800007 	ldb	r2,0(r4)
100087ec:	1000051e 	bne	r2,zero,10008804 <strcmp+0x84>
100087f0:	00000606 	br	1000880c <strcmp+0x8c>
100087f4:	21000044 	addi	r4,r4,1
100087f8:	20800007 	ldb	r2,0(r4)
100087fc:	29400044 	addi	r5,r5,1
10008800:	10000226 	beq	r2,zero,1000880c <strcmp+0x8c>
10008804:	28c00007 	ldb	r3,0(r5)
10008808:	10fffa26 	beq	r2,r3,100087f4 <__alt_data_end+0xf80087f4>
1000880c:	20800003 	ldbu	r2,0(r4)
10008810:	28c00003 	ldbu	r3,0(r5)
10008814:	10c5c83a 	sub	r2,r2,r3
10008818:	f800283a 	ret
1000881c:	0005883a 	mov	r2,zero
10008820:	f800283a 	ret

10008824 <__sprint_r.part.0>:
10008824:	28801917 	ldw	r2,100(r5)
10008828:	defff604 	addi	sp,sp,-40
1000882c:	dd400515 	stw	r21,20(sp)
10008830:	dcc00315 	stw	r19,12(sp)
10008834:	dfc00915 	stw	ra,36(sp)
10008838:	df000815 	stw	fp,32(sp)
1000883c:	ddc00715 	stw	r23,28(sp)
10008840:	dd800615 	stw	r22,24(sp)
10008844:	dd000415 	stw	r20,16(sp)
10008848:	dc800215 	stw	r18,8(sp)
1000884c:	dc400115 	stw	r17,4(sp)
10008850:	dc000015 	stw	r16,0(sp)
10008854:	1088000c 	andi	r2,r2,8192
10008858:	2827883a 	mov	r19,r5
1000885c:	302b883a 	mov	r21,r6
10008860:	10002d26 	beq	r2,zero,10008918 <__sprint_r.part.0+0xf4>
10008864:	30800217 	ldw	r2,8(r6)
10008868:	35800017 	ldw	r22,0(r6)
1000886c:	10002826 	beq	r2,zero,10008910 <__sprint_r.part.0+0xec>
10008870:	2029883a 	mov	r20,r4
10008874:	b5c00104 	addi	r23,r22,4
10008878:	04bfffc4 	movi	r18,-1
1000887c:	bc400017 	ldw	r17,0(r23)
10008880:	b4000017 	ldw	r16,0(r22)
10008884:	0039883a 	mov	fp,zero
10008888:	8822d0ba 	srli	r17,r17,2
1000888c:	04400316 	blt	zero,r17,1000889c <__sprint_r.part.0+0x78>
10008890:	00001706 	br	100088f0 <__sprint_r.part.0+0xcc>
10008894:	84000104 	addi	r16,r16,4
10008898:	8f001526 	beq	r17,fp,100088f0 <__sprint_r.part.0+0xcc>
1000889c:	81400017 	ldw	r5,0(r16)
100088a0:	a009883a 	mov	r4,r20
100088a4:	980d883a 	mov	r6,r19
100088a8:	000a01c0 	call	1000a01c <_fputwc_r>
100088ac:	e7000044 	addi	fp,fp,1
100088b0:	14bff81e 	bne	r2,r18,10008894 <__alt_data_end+0xf8008894>
100088b4:	9005883a 	mov	r2,r18
100088b8:	a8000215 	stw	zero,8(r21)
100088bc:	a8000115 	stw	zero,4(r21)
100088c0:	dfc00917 	ldw	ra,36(sp)
100088c4:	df000817 	ldw	fp,32(sp)
100088c8:	ddc00717 	ldw	r23,28(sp)
100088cc:	dd800617 	ldw	r22,24(sp)
100088d0:	dd400517 	ldw	r21,20(sp)
100088d4:	dd000417 	ldw	r20,16(sp)
100088d8:	dcc00317 	ldw	r19,12(sp)
100088dc:	dc800217 	ldw	r18,8(sp)
100088e0:	dc400117 	ldw	r17,4(sp)
100088e4:	dc000017 	ldw	r16,0(sp)
100088e8:	dec00a04 	addi	sp,sp,40
100088ec:	f800283a 	ret
100088f0:	a8c00217 	ldw	r3,8(r21)
100088f4:	8c63883a 	add	r17,r17,r17
100088f8:	8c63883a 	add	r17,r17,r17
100088fc:	1c45c83a 	sub	r2,r3,r17
10008900:	a8800215 	stw	r2,8(r21)
10008904:	b5800204 	addi	r22,r22,8
10008908:	bdc00204 	addi	r23,r23,8
1000890c:	103fdb1e 	bne	r2,zero,1000887c <__alt_data_end+0xf800887c>
10008910:	0005883a 	mov	r2,zero
10008914:	003fe806 	br	100088b8 <__alt_data_end+0xf80088b8>
10008918:	0005bd80 	call	10005bd8 <__sfvwrite_r>
1000891c:	003fe606 	br	100088b8 <__alt_data_end+0xf80088b8>

10008920 <__sprint_r>:
10008920:	30c00217 	ldw	r3,8(r6)
10008924:	18000126 	beq	r3,zero,1000892c <__sprint_r+0xc>
10008928:	00088241 	jmpi	10008824 <__sprint_r.part.0>
1000892c:	30000115 	stw	zero,4(r6)
10008930:	0005883a 	mov	r2,zero
10008934:	f800283a 	ret

10008938 <___vfiprintf_internal_r>:
10008938:	defeca04 	addi	sp,sp,-1240
1000893c:	dcc12f15 	stw	r19,1212(sp)
10008940:	dfc13515 	stw	ra,1236(sp)
10008944:	df013415 	stw	fp,1232(sp)
10008948:	ddc13315 	stw	r23,1228(sp)
1000894c:	dd813215 	stw	r22,1224(sp)
10008950:	dd413115 	stw	r21,1220(sp)
10008954:	dd013015 	stw	r20,1216(sp)
10008958:	dc812e15 	stw	r18,1208(sp)
1000895c:	dc412d15 	stw	r17,1204(sp)
10008960:	dc012c15 	stw	r16,1200(sp)
10008964:	d9012115 	stw	r4,1156(sp)
10008968:	d9412015 	stw	r5,1152(sp)
1000896c:	d9c12315 	stw	r7,1164(sp)
10008970:	3027883a 	mov	r19,r6
10008974:	20000226 	beq	r4,zero,10008980 <___vfiprintf_internal_r+0x48>
10008978:	20800e17 	ldw	r2,56(r4)
1000897c:	1000f726 	beq	r2,zero,10008d5c <___vfiprintf_internal_r+0x424>
10008980:	d8812017 	ldw	r2,1152(sp)
10008984:	10c0030b 	ldhu	r3,12(r2)
10008988:	1908000c 	andi	r4,r3,8192
1000898c:	1805883a 	mov	r2,r3
10008990:	2000081e 	bne	r4,zero,100089b4 <___vfiprintf_internal_r+0x7c>
10008994:	d9412017 	ldw	r5,1152(sp)
10008998:	18880014 	ori	r2,r3,8192
1000899c:	00f7ffc4 	movi	r3,-8193
100089a0:	29001917 	ldw	r4,100(r5)
100089a4:	2880030d 	sth	r2,12(r5)
100089a8:	20c8703a 	and	r4,r4,r3
100089ac:	29001915 	stw	r4,100(r5)
100089b0:	1007883a 	mov	r3,r2
100089b4:	1100020c 	andi	r4,r2,8
100089b8:	2000a726 	beq	r4,zero,10008c58 <___vfiprintf_internal_r+0x320>
100089bc:	d9412017 	ldw	r5,1152(sp)
100089c0:	29000417 	ldw	r4,16(r5)
100089c4:	2000a426 	beq	r4,zero,10008c58 <___vfiprintf_internal_r+0x320>
100089c8:	1080068c 	andi	r2,r2,26
100089cc:	01000284 	movi	r4,10
100089d0:	1100ab26 	beq	r2,r4,10008c80 <___vfiprintf_internal_r+0x348>
100089d4:	d9010a04 	addi	r4,sp,1064
100089d8:	d94109c4 	addi	r5,sp,1063
100089dc:	07040074 	movhi	fp,4097
100089e0:	04440074 	movhi	r17,4097
100089e4:	2145c83a 	sub	r2,r4,r5
100089e8:	e7020d04 	addi	fp,fp,2100
100089ec:	8c420904 	addi	r17,r17,2084
100089f0:	d9011e15 	stw	r4,1144(sp)
100089f4:	d9411f15 	stw	r5,1148(sp)
100089f8:	dec11a15 	stw	sp,1128(sp)
100089fc:	d8011c15 	stw	zero,1136(sp)
10008a00:	d8011b15 	stw	zero,1132(sp)
10008a04:	d8012715 	stw	zero,1180(sp)
10008a08:	d8012515 	stw	zero,1172(sp)
10008a0c:	d811883a 	mov	r8,sp
10008a10:	d8812815 	stw	r2,1184(sp)
10008a14:	982f883a 	mov	r23,r19
10008a18:	b8800007 	ldb	r2,0(r23)
10008a1c:	1003b026 	beq	r2,zero,100098e0 <___vfiprintf_internal_r+0xfa8>
10008a20:	01000944 	movi	r4,37
10008a24:	1103ae26 	beq	r2,r4,100098e0 <___vfiprintf_internal_r+0xfa8>
10008a28:	b805883a 	mov	r2,r23
10008a2c:	00000106 	br	10008a34 <___vfiprintf_internal_r+0xfc>
10008a30:	19000326 	beq	r3,r4,10008a40 <___vfiprintf_internal_r+0x108>
10008a34:	10800044 	addi	r2,r2,1
10008a38:	10c00007 	ldb	r3,0(r2)
10008a3c:	183ffc1e 	bne	r3,zero,10008a30 <__alt_data_end+0xf8008a30>
10008a40:	15e1c83a 	sub	r16,r2,r23
10008a44:	1029883a 	mov	r20,r2
10008a48:	80001026 	beq	r16,zero,10008a8c <___vfiprintf_internal_r+0x154>
10008a4c:	d8c11c17 	ldw	r3,1136(sp)
10008a50:	d8811b17 	ldw	r2,1132(sp)
10008a54:	45c00015 	stw	r23,0(r8)
10008a58:	80c7883a 	add	r3,r16,r3
10008a5c:	10800044 	addi	r2,r2,1
10008a60:	44000115 	stw	r16,4(r8)
10008a64:	d8c11c15 	stw	r3,1136(sp)
10008a68:	d8811b15 	stw	r2,1132(sp)
10008a6c:	010001c4 	movi	r4,7
10008a70:	2080740e 	bge	r4,r2,10008c44 <___vfiprintf_internal_r+0x30c>
10008a74:	1803a71e 	bne	r3,zero,10009914 <___vfiprintf_internal_r+0xfdc>
10008a78:	d8c12517 	ldw	r3,1172(sp)
10008a7c:	d8011b15 	stw	zero,1132(sp)
10008a80:	d811883a 	mov	r8,sp
10008a84:	1c07883a 	add	r3,r3,r16
10008a88:	d8c12515 	stw	r3,1172(sp)
10008a8c:	a0800007 	ldb	r2,0(r20)
10008a90:	1002bf26 	beq	r2,zero,10009590 <___vfiprintf_internal_r+0xc58>
10008a94:	a5c00044 	addi	r23,r20,1
10008a98:	a1800047 	ldb	r6,1(r20)
10008a9c:	d8011d85 	stb	zero,1142(sp)
10008aa0:	d8012205 	stb	zero,1160(sp)
10008aa4:	043fffc4 	movi	r16,-1
10008aa8:	d8012415 	stw	zero,1168(sp)
10008aac:	0025883a 	mov	r18,zero
10008ab0:	05001604 	movi	r20,88
10008ab4:	05400244 	movi	r21,9
10008ab8:	4027883a 	mov	r19,r8
10008abc:	bdc00044 	addi	r23,r23,1
10008ac0:	30bff804 	addi	r2,r6,-32
10008ac4:	a0825636 	bltu	r20,r2,10009420 <___vfiprintf_internal_r+0xae8>
10008ac8:	100490ba 	slli	r2,r2,2
10008acc:	01040074 	movhi	r4,4097
10008ad0:	2122b804 	addi	r4,r4,-29984
10008ad4:	1105883a 	add	r2,r2,r4
10008ad8:	10800017 	ldw	r2,0(r2)
10008adc:	1000683a 	jmp	r2
10008ae0:	100093b0 	cmpltui	zero,r2,590
10008ae4:	10009420 	cmpeqi	zero,r2,592
10008ae8:	10009420 	cmpeqi	zero,r2,592
10008aec:	10009414 	ori	zero,r2,592
10008af0:	10009420 	cmpeqi	zero,r2,592
10008af4:	10009420 	cmpeqi	zero,r2,592
10008af8:	10009420 	cmpeqi	zero,r2,592
10008afc:	10009420 	cmpeqi	zero,r2,592
10008b00:	10009420 	cmpeqi	zero,r2,592
10008b04:	10009420 	cmpeqi	zero,r2,592
10008b08:	100091a0 	cmpeqi	zero,r2,582
10008b0c:	100093c8 	cmpgei	zero,r2,591
10008b10:	10009420 	cmpeqi	zero,r2,592
10008b14:	10008d74 	orhi	zero,r2,565
10008b18:	100091c4 	addi	zero,r2,583
10008b1c:	10009420 	cmpeqi	zero,r2,592
10008b20:	10008d80 	call	110008d8 <_gp+0xfe5e78>
10008b24:	10008d8c 	andi	zero,r2,566
10008b28:	10008d8c 	andi	zero,r2,566
10008b2c:	10008d8c 	andi	zero,r2,566
10008b30:	10008d8c 	andi	zero,r2,566
10008b34:	10008d8c 	andi	zero,r2,566
10008b38:	10008d8c 	andi	zero,r2,566
10008b3c:	10008d8c 	andi	zero,r2,566
10008b40:	10008d8c 	andi	zero,r2,566
10008b44:	10008d8c 	andi	zero,r2,566
10008b48:	10009420 	cmpeqi	zero,r2,592
10008b4c:	10009420 	cmpeqi	zero,r2,592
10008b50:	10009420 	cmpeqi	zero,r2,592
10008b54:	10009420 	cmpeqi	zero,r2,592
10008b58:	10009420 	cmpeqi	zero,r2,592
10008b5c:	10009420 	cmpeqi	zero,r2,592
10008b60:	10009420 	cmpeqi	zero,r2,592
10008b64:	10009420 	cmpeqi	zero,r2,592
10008b68:	10009420 	cmpeqi	zero,r2,592
10008b6c:	10009420 	cmpeqi	zero,r2,592
10008b70:	10008dcc 	andi	zero,r2,567
10008b74:	10009420 	cmpeqi	zero,r2,592
10008b78:	10009420 	cmpeqi	zero,r2,592
10008b7c:	10009420 	cmpeqi	zero,r2,592
10008b80:	10009420 	cmpeqi	zero,r2,592
10008b84:	10009420 	cmpeqi	zero,r2,592
10008b88:	10009420 	cmpeqi	zero,r2,592
10008b8c:	10009420 	cmpeqi	zero,r2,592
10008b90:	10009420 	cmpeqi	zero,r2,592
10008b94:	10009420 	cmpeqi	zero,r2,592
10008b98:	10009420 	cmpeqi	zero,r2,592
10008b9c:	100090bc 	xorhi	zero,r2,578
10008ba0:	10009420 	cmpeqi	zero,r2,592
10008ba4:	10009420 	cmpeqi	zero,r2,592
10008ba8:	10009420 	cmpeqi	zero,r2,592
10008bac:	10009420 	cmpeqi	zero,r2,592
10008bb0:	10009420 	cmpeqi	zero,r2,592
10008bb4:	100090fc 	xorhi	zero,r2,579
10008bb8:	10009420 	cmpeqi	zero,r2,592
10008bbc:	10009420 	cmpeqi	zero,r2,592
10008bc0:	10009140 	call	11000914 <_gp+0xfe5eb4>
10008bc4:	10009420 	cmpeqi	zero,r2,592
10008bc8:	10009420 	cmpeqi	zero,r2,592
10008bcc:	10009420 	cmpeqi	zero,r2,592
10008bd0:	10009420 	cmpeqi	zero,r2,592
10008bd4:	10009420 	cmpeqi	zero,r2,592
10008bd8:	10009420 	cmpeqi	zero,r2,592
10008bdc:	10009420 	cmpeqi	zero,r2,592
10008be0:	10009420 	cmpeqi	zero,r2,592
10008be4:	10009420 	cmpeqi	zero,r2,592
10008be8:	10009420 	cmpeqi	zero,r2,592
10008bec:	10009088 	cmpgei	zero,r2,578
10008bf0:	100093d8 	cmpnei	zero,r2,591
10008bf4:	10009420 	cmpeqi	zero,r2,592
10008bf8:	10009420 	cmpeqi	zero,r2,592
10008bfc:	10009420 	cmpeqi	zero,r2,592
10008c00:	10009214 	ori	zero,r2,584
10008c04:	100093d8 	cmpnei	zero,r2,591
10008c08:	10009420 	cmpeqi	zero,r2,592
10008c0c:	10009420 	cmpeqi	zero,r2,592
10008c10:	1000912c 	andhi	zero,r2,580
10008c14:	10009420 	cmpeqi	zero,r2,592
10008c18:	10009378 	rdprs	zero,r2,589
10008c1c:	10009300 	call	11000930 <_gp+0xfe5ed0>
10008c20:	10009334 	orhi	zero,r2,588
10008c24:	10009220 	cmpeqi	zero,r2,584
10008c28:	10009420 	cmpeqi	zero,r2,592
10008c2c:	1000922c 	andhi	zero,r2,584
10008c30:	10009420 	cmpeqi	zero,r2,592
10008c34:	10009288 	cmpgei	zero,r2,586
10008c38:	10009420 	cmpeqi	zero,r2,592
10008c3c:	10009420 	cmpeqi	zero,r2,592
10008c40:	100092bc 	xorhi	zero,r2,586
10008c44:	42000204 	addi	r8,r8,8
10008c48:	d8c12517 	ldw	r3,1172(sp)
10008c4c:	1c07883a 	add	r3,r3,r16
10008c50:	d8c12515 	stw	r3,1172(sp)
10008c54:	003f8d06 	br	10008a8c <__alt_data_end+0xf8008a8c>
10008c58:	d9012117 	ldw	r4,1156(sp)
10008c5c:	d9412017 	ldw	r5,1152(sp)
10008c60:	00037380 	call	10003738 <__swsetup_r>
10008c64:	1000301e 	bne	r2,zero,10008d28 <___vfiprintf_internal_r+0x3f0>
10008c68:	d8812017 	ldw	r2,1152(sp)
10008c6c:	01000284 	movi	r4,10
10008c70:	10c0030b 	ldhu	r3,12(r2)
10008c74:	1805883a 	mov	r2,r3
10008c78:	1080068c 	andi	r2,r2,26
10008c7c:	113f551e 	bne	r2,r4,100089d4 <__alt_data_end+0xf80089d4>
10008c80:	d9012017 	ldw	r4,1152(sp)
10008c84:	2080038b 	ldhu	r2,14(r4)
10008c88:	113fffcc 	andi	r4,r2,65535
10008c8c:	2120001c 	xori	r4,r4,32768
10008c90:	21200004 	addi	r4,r4,-32768
10008c94:	203f4f16 	blt	r4,zero,100089d4 <__alt_data_end+0xf80089d4>
10008c98:	d9412017 	ldw	r5,1152(sp)
10008c9c:	d9012117 	ldw	r4,1156(sp)
10008ca0:	d9c12317 	ldw	r7,1164(sp)
10008ca4:	2b001917 	ldw	r12,100(r5)
10008ca8:	2ac00717 	ldw	r11,28(r5)
10008cac:	2a800917 	ldw	r10,36(r5)
10008cb0:	02010004 	movi	r8,1024
10008cb4:	18ffff4c 	andi	r3,r3,65533
10008cb8:	da0b883a 	add	r5,sp,r8
10008cbc:	980d883a 	mov	r6,r19
10008cc0:	d8c1030d 	sth	r3,1036(sp)
10008cc4:	db011915 	stw	r12,1124(sp)
10008cc8:	d881038d 	sth	r2,1038(sp)
10008ccc:	dac10715 	stw	r11,1052(sp)
10008cd0:	da810915 	stw	r10,1060(sp)
10008cd4:	dec10015 	stw	sp,1024(sp)
10008cd8:	dec10415 	stw	sp,1040(sp)
10008cdc:	da010215 	stw	r8,1032(sp)
10008ce0:	da010515 	stw	r8,1044(sp)
10008ce4:	d8010615 	stw	zero,1048(sp)
10008ce8:	00089380 	call	10008938 <___vfiprintf_internal_r>
10008cec:	1021883a 	mov	r16,r2
10008cf0:	10000416 	blt	r2,zero,10008d04 <___vfiprintf_internal_r+0x3cc>
10008cf4:	d9012117 	ldw	r4,1156(sp)
10008cf8:	d9410004 	addi	r5,sp,1024
10008cfc:	00051b80 	call	100051b8 <_fflush_r>
10008d00:	10040f1e 	bne	r2,zero,10009d40 <___vfiprintf_internal_r+0x1408>
10008d04:	d881030b 	ldhu	r2,1036(sp)
10008d08:	1080100c 	andi	r2,r2,64
10008d0c:	10000426 	beq	r2,zero,10008d20 <___vfiprintf_internal_r+0x3e8>
10008d10:	d8c12017 	ldw	r3,1152(sp)
10008d14:	1880030b 	ldhu	r2,12(r3)
10008d18:	10801014 	ori	r2,r2,64
10008d1c:	1880030d 	sth	r2,12(r3)
10008d20:	8005883a 	mov	r2,r16
10008d24:	00000106 	br	10008d2c <___vfiprintf_internal_r+0x3f4>
10008d28:	00bfffc4 	movi	r2,-1
10008d2c:	dfc13517 	ldw	ra,1236(sp)
10008d30:	df013417 	ldw	fp,1232(sp)
10008d34:	ddc13317 	ldw	r23,1228(sp)
10008d38:	dd813217 	ldw	r22,1224(sp)
10008d3c:	dd413117 	ldw	r21,1220(sp)
10008d40:	dd013017 	ldw	r20,1216(sp)
10008d44:	dcc12f17 	ldw	r19,1212(sp)
10008d48:	dc812e17 	ldw	r18,1208(sp)
10008d4c:	dc412d17 	ldw	r17,1204(sp)
10008d50:	dc012c17 	ldw	r16,1200(sp)
10008d54:	dec13604 	addi	sp,sp,1240
10008d58:	f800283a 	ret
10008d5c:	00057740 	call	10005774 <__sinit>
10008d60:	003f0706 	br	10008980 <__alt_data_end+0xf8008980>
10008d64:	d8c12417 	ldw	r3,1168(sp)
10008d68:	d8812315 	stw	r2,1164(sp)
10008d6c:	00c7c83a 	sub	r3,zero,r3
10008d70:	d8c12415 	stw	r3,1168(sp)
10008d74:	94800114 	ori	r18,r18,4
10008d78:	b9800007 	ldb	r6,0(r23)
10008d7c:	003f4f06 	br	10008abc <__alt_data_end+0xf8008abc>
10008d80:	94802014 	ori	r18,r18,128
10008d84:	b9800007 	ldb	r6,0(r23)
10008d88:	003f4c06 	br	10008abc <__alt_data_end+0xf8008abc>
10008d8c:	dc012615 	stw	r16,1176(sp)
10008d90:	d8012415 	stw	zero,1168(sp)
10008d94:	35bff404 	addi	r22,r6,-48
10008d98:	0009883a 	mov	r4,zero
10008d9c:	b821883a 	mov	r16,r23
10008da0:	01400284 	movi	r5,10
10008da4:	000b4540 	call	1000b454 <__mulsi3>
10008da8:	81800007 	ldb	r6,0(r16)
10008dac:	1589883a 	add	r4,r2,r22
10008db0:	bdc00044 	addi	r23,r23,1
10008db4:	35bff404 	addi	r22,r6,-48
10008db8:	b821883a 	mov	r16,r23
10008dbc:	adbff82e 	bgeu	r21,r22,10008da0 <__alt_data_end+0xf8008da0>
10008dc0:	d9012415 	stw	r4,1168(sp)
10008dc4:	dc012617 	ldw	r16,1176(sp)
10008dc8:	003f3d06 	br	10008ac0 <__alt_data_end+0xf8008ac0>
10008dcc:	d8c12203 	ldbu	r3,1160(sp)
10008dd0:	94800414 	ori	r18,r18,16
10008dd4:	9080080c 	andi	r2,r18,32
10008dd8:	d8c11d85 	stb	r3,1142(sp)
10008ddc:	9811883a 	mov	r8,r19
10008de0:	d8c12317 	ldw	r3,1164(sp)
10008de4:	10018226 	beq	r2,zero,100093f0 <___vfiprintf_internal_r+0xab8>
10008de8:	d9012317 	ldw	r4,1164(sp)
10008dec:	18800117 	ldw	r2,4(r3)
10008df0:	1cc00017 	ldw	r19,0(r3)
10008df4:	21000204 	addi	r4,r4,8
10008df8:	d9012315 	stw	r4,1164(sp)
10008dfc:	102b883a 	mov	r21,r2
10008e00:	10030016 	blt	r2,zero,10009a04 <___vfiprintf_internal_r+0x10cc>
10008e04:	dd811d83 	ldbu	r22,1142(sp)
10008e08:	8029883a 	mov	r20,r16
10008e0c:	00800044 	movi	r2,1
10008e10:	9d46b03a 	or	r3,r19,r21
10008e14:	80000216 	blt	r16,zero,10008e20 <___vfiprintf_internal_r+0x4e8>
10008e18:	013fdfc4 	movi	r4,-129
10008e1c:	9124703a 	and	r18,r18,r4
10008e20:	1801b41e 	bne	r3,zero,100094f4 <___vfiprintf_internal_r+0xbbc>
10008e24:	80028126 	beq	r16,zero,1000982c <___vfiprintf_internal_r+0xef4>
10008e28:	10803fcc 	andi	r2,r2,255
10008e2c:	00c00044 	movi	r3,1
10008e30:	10c1d126 	beq	r2,r3,10009578 <___vfiprintf_internal_r+0xc40>
10008e34:	00c00084 	movi	r3,2
10008e38:	10c28626 	beq	r2,r3,10009854 <___vfiprintf_internal_r+0xf1c>
10008e3c:	d8c10a04 	addi	r3,sp,1064
10008e40:	9808d0fa 	srli	r4,r19,3
10008e44:	a80a977a 	slli	r5,r21,29
10008e48:	a82ad0fa 	srli	r21,r21,3
10008e4c:	9cc001cc 	andi	r19,r19,7
10008e50:	98800c04 	addi	r2,r19,48
10008e54:	18ffffc4 	addi	r3,r3,-1
10008e58:	2926b03a 	or	r19,r5,r4
10008e5c:	18800005 	stb	r2,0(r3)
10008e60:	9d48b03a 	or	r4,r19,r21
10008e64:	203ff61e 	bne	r4,zero,10008e40 <__alt_data_end+0xf8008e40>
10008e68:	9100004c 	andi	r4,r18,1
10008e6c:	d8c12215 	stw	r3,1160(sp)
10008e70:	2002b31e 	bne	r4,zero,10009940 <___vfiprintf_internal_r+0x1008>
10008e74:	d9411e17 	ldw	r5,1144(sp)
10008e78:	28e9c83a 	sub	r20,r5,r3
10008e7c:	a02b883a 	mov	r21,r20
10008e80:	a400010e 	bge	r20,r16,10008e88 <___vfiprintf_internal_r+0x550>
10008e84:	802b883a 	mov	r21,r16
10008e88:	b5803fcc 	andi	r22,r22,255
10008e8c:	b580201c 	xori	r22,r22,128
10008e90:	b5bfe004 	addi	r22,r22,-128
10008e94:	b0000126 	beq	r22,zero,10008e9c <___vfiprintf_internal_r+0x564>
10008e98:	ad400044 	addi	r21,r21,1
10008e9c:	9280008c 	andi	r10,r18,2
10008ea0:	50000126 	beq	r10,zero,10008ea8 <___vfiprintf_internal_r+0x570>
10008ea4:	ad400084 	addi	r21,r21,2
10008ea8:	9580210c 	andi	r22,r18,132
10008eac:	b001751e 	bne	r22,zero,10009484 <___vfiprintf_internal_r+0xb4c>
10008eb0:	d9012417 	ldw	r4,1168(sp)
10008eb4:	2567c83a 	sub	r19,r4,r21
10008eb8:	04c1720e 	bge	zero,r19,10009484 <___vfiprintf_internal_r+0xb4c>
10008ebc:	01c00404 	movi	r7,16
10008ec0:	d8c11c17 	ldw	r3,1136(sp)
10008ec4:	3cc36b0e 	bge	r7,r19,10009c74 <___vfiprintf_internal_r+0x133c>
10008ec8:	00840074 	movhi	r2,4097
10008ecc:	10820d04 	addi	r2,r2,2100
10008ed0:	dc012915 	stw	r16,1188(sp)
10008ed4:	d9011b17 	ldw	r4,1132(sp)
10008ed8:	9821883a 	mov	r16,r19
10008edc:	d8812615 	stw	r2,1176(sp)
10008ee0:	030001c4 	movi	r12,7
10008ee4:	5027883a 	mov	r19,r10
10008ee8:	00000506 	br	10008f00 <___vfiprintf_internal_r+0x5c8>
10008eec:	21400084 	addi	r5,r4,2
10008ef0:	42000204 	addi	r8,r8,8
10008ef4:	1009883a 	mov	r4,r2
10008ef8:	843ffc04 	addi	r16,r16,-16
10008efc:	3c000d0e 	bge	r7,r16,10008f34 <___vfiprintf_internal_r+0x5fc>
10008f00:	18c00404 	addi	r3,r3,16
10008f04:	20800044 	addi	r2,r4,1
10008f08:	47000015 	stw	fp,0(r8)
10008f0c:	41c00115 	stw	r7,4(r8)
10008f10:	d8c11c15 	stw	r3,1136(sp)
10008f14:	d8811b15 	stw	r2,1132(sp)
10008f18:	60bff40e 	bge	r12,r2,10008eec <__alt_data_end+0xf8008eec>
10008f1c:	18014b1e 	bne	r3,zero,1000944c <___vfiprintf_internal_r+0xb14>
10008f20:	843ffc04 	addi	r16,r16,-16
10008f24:	0009883a 	mov	r4,zero
10008f28:	01400044 	movi	r5,1
10008f2c:	d811883a 	mov	r8,sp
10008f30:	3c3ff316 	blt	r7,r16,10008f00 <__alt_data_end+0xf8008f00>
10008f34:	9815883a 	mov	r10,r19
10008f38:	8027883a 	mov	r19,r16
10008f3c:	dc012917 	ldw	r16,1188(sp)
10008f40:	d9012617 	ldw	r4,1176(sp)
10008f44:	98c7883a 	add	r3,r19,r3
10008f48:	44c00115 	stw	r19,4(r8)
10008f4c:	41000015 	stw	r4,0(r8)
10008f50:	d8c11c15 	stw	r3,1136(sp)
10008f54:	d9411b15 	stw	r5,1132(sp)
10008f58:	008001c4 	movi	r2,7
10008f5c:	11425116 	blt	r2,r5,100098a4 <___vfiprintf_internal_r+0xf6c>
10008f60:	d9011d87 	ldb	r4,1142(sp)
10008f64:	42000204 	addi	r8,r8,8
10008f68:	28800044 	addi	r2,r5,1
10008f6c:	20014a1e 	bne	r4,zero,10009498 <___vfiprintf_internal_r+0xb60>
10008f70:	50000c26 	beq	r10,zero,10008fa4 <___vfiprintf_internal_r+0x66c>
10008f74:	d9011d04 	addi	r4,sp,1140
10008f78:	18c00084 	addi	r3,r3,2
10008f7c:	41000015 	stw	r4,0(r8)
10008f80:	01000084 	movi	r4,2
10008f84:	41000115 	stw	r4,4(r8)
10008f88:	d8c11c15 	stw	r3,1136(sp)
10008f8c:	d8811b15 	stw	r2,1132(sp)
10008f90:	010001c4 	movi	r4,7
10008f94:	20822016 	blt	r4,r2,10009818 <___vfiprintf_internal_r+0xee0>
10008f98:	100b883a 	mov	r5,r2
10008f9c:	42000204 	addi	r8,r8,8
10008fa0:	10800044 	addi	r2,r2,1
10008fa4:	01002004 	movi	r4,128
10008fa8:	b101de26 	beq	r22,r4,10009724 <___vfiprintf_internal_r+0xdec>
10008fac:	8521c83a 	sub	r16,r16,r20
10008fb0:	0400230e 	bge	zero,r16,10009040 <___vfiprintf_internal_r+0x708>
10008fb4:	04c00404 	movi	r19,16
10008fb8:	9c030d0e 	bge	r19,r16,10009bf0 <___vfiprintf_internal_r+0x12b8>
10008fbc:	00840074 	movhi	r2,4097
10008fc0:	10820904 	addi	r2,r2,2084
10008fc4:	d8812615 	stw	r2,1176(sp)
10008fc8:	058001c4 	movi	r22,7
10008fcc:	00000506 	br	10008fe4 <___vfiprintf_internal_r+0x6ac>
10008fd0:	28800084 	addi	r2,r5,2
10008fd4:	42000204 	addi	r8,r8,8
10008fd8:	200b883a 	mov	r5,r4
10008fdc:	843ffc04 	addi	r16,r16,-16
10008fe0:	9c000d0e 	bge	r19,r16,10009018 <___vfiprintf_internal_r+0x6e0>
10008fe4:	18c00404 	addi	r3,r3,16
10008fe8:	29000044 	addi	r4,r5,1
10008fec:	44400015 	stw	r17,0(r8)
10008ff0:	44c00115 	stw	r19,4(r8)
10008ff4:	d8c11c15 	stw	r3,1136(sp)
10008ff8:	d9011b15 	stw	r4,1132(sp)
10008ffc:	b13ff40e 	bge	r22,r4,10008fd0 <__alt_data_end+0xf8008fd0>
10009000:	1801321e 	bne	r3,zero,100094cc <___vfiprintf_internal_r+0xb94>
10009004:	843ffc04 	addi	r16,r16,-16
10009008:	000b883a 	mov	r5,zero
1000900c:	00800044 	movi	r2,1
10009010:	d811883a 	mov	r8,sp
10009014:	9c3ff316 	blt	r19,r16,10008fe4 <__alt_data_end+0xf8008fe4>
10009018:	d9012617 	ldw	r4,1176(sp)
1000901c:	1c07883a 	add	r3,r3,r16
10009020:	44000115 	stw	r16,4(r8)
10009024:	41000015 	stw	r4,0(r8)
10009028:	d8c11c15 	stw	r3,1136(sp)
1000902c:	d8811b15 	stw	r2,1132(sp)
10009030:	010001c4 	movi	r4,7
10009034:	20816216 	blt	r4,r2,100095c0 <___vfiprintf_internal_r+0xc88>
10009038:	42000204 	addi	r8,r8,8
1000903c:	10800044 	addi	r2,r2,1
10009040:	d9012217 	ldw	r4,1160(sp)
10009044:	1d07883a 	add	r3,r3,r20
10009048:	45000115 	stw	r20,4(r8)
1000904c:	41000015 	stw	r4,0(r8)
10009050:	d8c11c15 	stw	r3,1136(sp)
10009054:	d8811b15 	stw	r2,1132(sp)
10009058:	010001c4 	movi	r4,7
1000905c:	2081610e 	bge	r4,r2,100095e4 <___vfiprintf_internal_r+0xcac>
10009060:	1802211e 	bne	r3,zero,100098e8 <___vfiprintf_internal_r+0xfb0>
10009064:	d8011b15 	stw	zero,1132(sp)
10009068:	9480010c 	andi	r18,r18,4
1000906c:	9002171e 	bne	r18,zero,100098cc <___vfiprintf_internal_r+0xf94>
10009070:	d9412417 	ldw	r5,1168(sp)
10009074:	a9433716 	blt	r21,r5,10009d54 <___vfiprintf_internal_r+0x141c>
10009078:	d8812517 	ldw	r2,1172(sp)
1000907c:	1545883a 	add	r2,r2,r21
10009080:	d8812515 	stw	r2,1172(sp)
10009084:	00019a06 	br	100096f0 <___vfiprintf_internal_r+0xdb8>
10009088:	d8c12317 	ldw	r3,1164(sp)
1000908c:	05400044 	movi	r21,1
10009090:	9811883a 	mov	r8,r19
10009094:	18800017 	ldw	r2,0(r3)
10009098:	18c00104 	addi	r3,r3,4
1000909c:	d8c12315 	stw	r3,1164(sp)
100090a0:	d8c10004 	addi	r3,sp,1024
100090a4:	d8011d85 	stb	zero,1142(sp)
100090a8:	d8810005 	stb	r2,1024(sp)
100090ac:	a829883a 	mov	r20,r21
100090b0:	d8c12215 	stw	r3,1160(sp)
100090b4:	0021883a 	mov	r16,zero
100090b8:	003f7806 	br	10008e9c <__alt_data_end+0xf8008e9c>
100090bc:	94800414 	ori	r18,r18,16
100090c0:	9080080c 	andi	r2,r18,32
100090c4:	9811883a 	mov	r8,r19
100090c8:	10009026 	beq	r2,zero,1000930c <___vfiprintf_internal_r+0x9d4>
100090cc:	d8812317 	ldw	r2,1164(sp)
100090d0:	d8c12317 	ldw	r3,1164(sp)
100090d4:	14c00017 	ldw	r19,0(r2)
100090d8:	15400117 	ldw	r21,4(r2)
100090dc:	18c00204 	addi	r3,r3,8
100090e0:	d8c12315 	stw	r3,1164(sp)
100090e4:	0005883a 	mov	r2,zero
100090e8:	9d46b03a 	or	r3,r19,r21
100090ec:	d8011d85 	stb	zero,1142(sp)
100090f0:	8029883a 	mov	r20,r16
100090f4:	002d883a 	mov	r22,zero
100090f8:	003f4606 	br	10008e14 <__alt_data_end+0xf8008e14>
100090fc:	94800414 	ori	r18,r18,16
10009100:	9080080c 	andi	r2,r18,32
10009104:	9811883a 	mov	r8,r19
10009108:	10006226 	beq	r2,zero,10009294 <___vfiprintf_internal_r+0x95c>
1000910c:	d9012317 	ldw	r4,1164(sp)
10009110:	00800044 	movi	r2,1
10009114:	24c00017 	ldw	r19,0(r4)
10009118:	25400117 	ldw	r21,4(r4)
1000911c:	21000204 	addi	r4,r4,8
10009120:	d9012315 	stw	r4,1164(sp)
10009124:	9d46b03a 	or	r3,r19,r21
10009128:	003ff006 	br	100090ec <__alt_data_end+0xf80090ec>
1000912c:	b9800007 	ldb	r6,0(r23)
10009130:	00801b04 	movi	r2,108
10009134:	3082b226 	beq	r6,r2,10009c00 <___vfiprintf_internal_r+0x12c8>
10009138:	94800414 	ori	r18,r18,16
1000913c:	003e5f06 	br	10008abc <__alt_data_end+0xf8008abc>
10009140:	d8c12203 	ldbu	r3,1160(sp)
10009144:	01040074 	movhi	r4,4097
10009148:	2101a304 	addi	r4,r4,1676
1000914c:	d8c11d85 	stb	r3,1142(sp)
10009150:	d9012715 	stw	r4,1180(sp)
10009154:	90c0080c 	andi	r3,r18,32
10009158:	9811883a 	mov	r8,r19
1000915c:	d8812317 	ldw	r2,1164(sp)
10009160:	18005f26 	beq	r3,zero,100092e0 <___vfiprintf_internal_r+0x9a8>
10009164:	d9012317 	ldw	r4,1164(sp)
10009168:	14c00017 	ldw	r19,0(r2)
1000916c:	15400117 	ldw	r21,4(r2)
10009170:	21000204 	addi	r4,r4,8
10009174:	d9012315 	stw	r4,1164(sp)
10009178:	9080004c 	andi	r2,r18,1
1000917c:	1001e226 	beq	r2,zero,10009908 <___vfiprintf_internal_r+0xfd0>
10009180:	9d46b03a 	or	r3,r19,r21
10009184:	18024e26 	beq	r3,zero,10009ac0 <___vfiprintf_internal_r+0x1188>
10009188:	00800c04 	movi	r2,48
1000918c:	d8811d05 	stb	r2,1140(sp)
10009190:	d9811d45 	stb	r6,1141(sp)
10009194:	94800094 	ori	r18,r18,2
10009198:	00800084 	movi	r2,2
1000919c:	003fd306 	br	100090ec <__alt_data_end+0xf80090ec>
100091a0:	d9012317 	ldw	r4,1164(sp)
100091a4:	d9412317 	ldw	r5,1164(sp)
100091a8:	21000017 	ldw	r4,0(r4)
100091ac:	28800104 	addi	r2,r5,4
100091b0:	d9012415 	stw	r4,1168(sp)
100091b4:	203eeb16 	blt	r4,zero,10008d64 <__alt_data_end+0xf8008d64>
100091b8:	d8812315 	stw	r2,1164(sp)
100091bc:	b9800007 	ldb	r6,0(r23)
100091c0:	003e3e06 	br	10008abc <__alt_data_end+0xf8008abc>
100091c4:	b9800007 	ldb	r6,0(r23)
100091c8:	01000a84 	movi	r4,42
100091cc:	b8800044 	addi	r2,r23,1
100091d0:	3102d226 	beq	r6,r4,10009d1c <___vfiprintf_internal_r+0x13e4>
100091d4:	35bff404 	addi	r22,r6,-48
100091d8:	102f883a 	mov	r23,r2
100091dc:	0021883a 	mov	r16,zero
100091e0:	adbe3736 	bltu	r21,r22,10008ac0 <__alt_data_end+0xf8008ac0>
100091e4:	0009883a 	mov	r4,zero
100091e8:	01400284 	movi	r5,10
100091ec:	000b4540 	call	1000b454 <__mulsi3>
100091f0:	b9800007 	ldb	r6,0(r23)
100091f4:	b089883a 	add	r4,r22,r2
100091f8:	bdc00044 	addi	r23,r23,1
100091fc:	35bff404 	addi	r22,r6,-48
10009200:	adbff92e 	bgeu	r21,r22,100091e8 <__alt_data_end+0xf80091e8>
10009204:	2021883a 	mov	r16,r4
10009208:	203e2d0e 	bge	r4,zero,10008ac0 <__alt_data_end+0xf8008ac0>
1000920c:	043fffc4 	movi	r16,-1
10009210:	003e2b06 	br	10008ac0 <__alt_data_end+0xf8008ac0>
10009214:	94801014 	ori	r18,r18,64
10009218:	b9800007 	ldb	r6,0(r23)
1000921c:	003e2706 	br	10008abc <__alt_data_end+0xf8008abc>
10009220:	94800814 	ori	r18,r18,32
10009224:	b9800007 	ldb	r6,0(r23)
10009228:	003e2406 	br	10008abc <__alt_data_end+0xf8008abc>
1000922c:	d9412317 	ldw	r5,1164(sp)
10009230:	d8812317 	ldw	r2,1164(sp)
10009234:	d8011d85 	stb	zero,1142(sp)
10009238:	29400017 	ldw	r5,0(r5)
1000923c:	9811883a 	mov	r8,r19
10009240:	14c00104 	addi	r19,r2,4
10009244:	d9412215 	stw	r5,1160(sp)
10009248:	28029026 	beq	r5,zero,10009c8c <___vfiprintf_internal_r+0x1354>
1000924c:	d9012217 	ldw	r4,1160(sp)
10009250:	80027616 	blt	r16,zero,10009c2c <___vfiprintf_internal_r+0x12f4>
10009254:	000b883a 	mov	r5,zero
10009258:	800d883a 	mov	r6,r16
1000925c:	da012a15 	stw	r8,1192(sp)
10009260:	0006c2c0 	call	10006c2c <memchr>
10009264:	da012a17 	ldw	r8,1192(sp)
10009268:	1002a026 	beq	r2,zero,10009cec <___vfiprintf_internal_r+0x13b4>
1000926c:	d8c12217 	ldw	r3,1160(sp)
10009270:	10e9c83a 	sub	r20,r2,r3
10009274:	85023816 	blt	r16,r20,10009b58 <___vfiprintf_internal_r+0x1220>
10009278:	dd811d83 	ldbu	r22,1142(sp)
1000927c:	dcc12315 	stw	r19,1164(sp)
10009280:	0021883a 	mov	r16,zero
10009284:	003efd06 	br	10008e7c <__alt_data_end+0xf8008e7c>
10009288:	9080080c 	andi	r2,r18,32
1000928c:	9811883a 	mov	r8,r19
10009290:	103f9e1e 	bne	r2,zero,1000910c <__alt_data_end+0xf800910c>
10009294:	9080040c 	andi	r2,r18,16
10009298:	10021726 	beq	r2,zero,10009af8 <___vfiprintf_internal_r+0x11c0>
1000929c:	d9412317 	ldw	r5,1164(sp)
100092a0:	002b883a 	mov	r21,zero
100092a4:	00800044 	movi	r2,1
100092a8:	2cc00017 	ldw	r19,0(r5)
100092ac:	29400104 	addi	r5,r5,4
100092b0:	d9412315 	stw	r5,1164(sp)
100092b4:	9807883a 	mov	r3,r19
100092b8:	003f8c06 	br	100090ec <__alt_data_end+0xf80090ec>
100092bc:	d8c12203 	ldbu	r3,1160(sp)
100092c0:	01040074 	movhi	r4,4097
100092c4:	2101a804 	addi	r4,r4,1696
100092c8:	d8c11d85 	stb	r3,1142(sp)
100092cc:	d9012715 	stw	r4,1180(sp)
100092d0:	90c0080c 	andi	r3,r18,32
100092d4:	9811883a 	mov	r8,r19
100092d8:	d8812317 	ldw	r2,1164(sp)
100092dc:	183fa11e 	bne	r3,zero,10009164 <__alt_data_end+0xf8009164>
100092e0:	90c0040c 	andi	r3,r18,16
100092e4:	1801e526 	beq	r3,zero,10009a7c <___vfiprintf_internal_r+0x1144>
100092e8:	d9412317 	ldw	r5,1164(sp)
100092ec:	14c00017 	ldw	r19,0(r2)
100092f0:	002b883a 	mov	r21,zero
100092f4:	29400104 	addi	r5,r5,4
100092f8:	d9412315 	stw	r5,1164(sp)
100092fc:	003f9e06 	br	10009178 <__alt_data_end+0xf8009178>
10009300:	9080080c 	andi	r2,r18,32
10009304:	9811883a 	mov	r8,r19
10009308:	103f701e 	bne	r2,zero,100090cc <__alt_data_end+0xf80090cc>
1000930c:	9080040c 	andi	r2,r18,16
10009310:	1001ef26 	beq	r2,zero,10009ad0 <___vfiprintf_internal_r+0x1198>
10009314:	d9012317 	ldw	r4,1164(sp)
10009318:	002b883a 	mov	r21,zero
1000931c:	0005883a 	mov	r2,zero
10009320:	24c00017 	ldw	r19,0(r4)
10009324:	21000104 	addi	r4,r4,4
10009328:	d9012315 	stw	r4,1164(sp)
1000932c:	9807883a 	mov	r3,r19
10009330:	003f6e06 	br	100090ec <__alt_data_end+0xf80090ec>
10009334:	d8c12317 	ldw	r3,1164(sp)
10009338:	9811883a 	mov	r8,r19
1000933c:	00800c04 	movi	r2,48
10009340:	1cc00017 	ldw	r19,0(r3)
10009344:	01040074 	movhi	r4,4097
10009348:	18c00104 	addi	r3,r3,4
1000934c:	d8811d05 	stb	r2,1140(sp)
10009350:	2101a804 	addi	r4,r4,1696
10009354:	00801e04 	movi	r2,120
10009358:	d8811d45 	stb	r2,1141(sp)
1000935c:	d8c12315 	stw	r3,1164(sp)
10009360:	002b883a 	mov	r21,zero
10009364:	94800094 	ori	r18,r18,2
10009368:	d9012715 	stw	r4,1180(sp)
1000936c:	00800084 	movi	r2,2
10009370:	9807883a 	mov	r3,r19
10009374:	003f5d06 	br	100090ec <__alt_data_end+0xf80090ec>
10009378:	d8c12203 	ldbu	r3,1160(sp)
1000937c:	9080080c 	andi	r2,r18,32
10009380:	9811883a 	mov	r8,r19
10009384:	d8c11d85 	stb	r3,1142(sp)
10009388:	1001b126 	beq	r2,zero,10009a50 <___vfiprintf_internal_r+0x1118>
1000938c:	d9012317 	ldw	r4,1164(sp)
10009390:	d9412517 	ldw	r5,1172(sp)
10009394:	20800017 	ldw	r2,0(r4)
10009398:	2807d7fa 	srai	r3,r5,31
1000939c:	21000104 	addi	r4,r4,4
100093a0:	d9012315 	stw	r4,1164(sp)
100093a4:	11400015 	stw	r5,0(r2)
100093a8:	10c00115 	stw	r3,4(r2)
100093ac:	003d9a06 	br	10008a18 <__alt_data_end+0xf8008a18>
100093b0:	d8812207 	ldb	r2,1160(sp)
100093b4:	1001c41e 	bne	r2,zero,10009ac8 <___vfiprintf_internal_r+0x1190>
100093b8:	00c00804 	movi	r3,32
100093bc:	d8c12205 	stb	r3,1160(sp)
100093c0:	b9800007 	ldb	r6,0(r23)
100093c4:	003dbd06 	br	10008abc <__alt_data_end+0xf8008abc>
100093c8:	00c00ac4 	movi	r3,43
100093cc:	d8c12205 	stb	r3,1160(sp)
100093d0:	b9800007 	ldb	r6,0(r23)
100093d4:	003db906 	br	10008abc <__alt_data_end+0xf8008abc>
100093d8:	d8c12203 	ldbu	r3,1160(sp)
100093dc:	9080080c 	andi	r2,r18,32
100093e0:	9811883a 	mov	r8,r19
100093e4:	d8c11d85 	stb	r3,1142(sp)
100093e8:	d8c12317 	ldw	r3,1164(sp)
100093ec:	103e7e1e 	bne	r2,zero,10008de8 <__alt_data_end+0xf8008de8>
100093f0:	9080040c 	andi	r2,r18,16
100093f4:	1001a926 	beq	r2,zero,10009a9c <___vfiprintf_internal_r+0x1164>
100093f8:	1cc00017 	ldw	r19,0(r3)
100093fc:	d9412317 	ldw	r5,1164(sp)
10009400:	982bd7fa 	srai	r21,r19,31
10009404:	29400104 	addi	r5,r5,4
10009408:	d9412315 	stw	r5,1164(sp)
1000940c:	a805883a 	mov	r2,r21
10009410:	003e7b06 	br	10008e00 <__alt_data_end+0xf8008e00>
10009414:	94800054 	ori	r18,r18,1
10009418:	b9800007 	ldb	r6,0(r23)
1000941c:	003da706 	br	10008abc <__alt_data_end+0xf8008abc>
10009420:	d8c12203 	ldbu	r3,1160(sp)
10009424:	9811883a 	mov	r8,r19
10009428:	d8c11d85 	stb	r3,1142(sp)
1000942c:	30005826 	beq	r6,zero,10009590 <___vfiprintf_internal_r+0xc58>
10009430:	05400044 	movi	r21,1
10009434:	d8c10004 	addi	r3,sp,1024
10009438:	d9810005 	stb	r6,1024(sp)
1000943c:	d8011d85 	stb	zero,1142(sp)
10009440:	a829883a 	mov	r20,r21
10009444:	d8c12215 	stw	r3,1160(sp)
10009448:	003f1a06 	br	100090b4 <__alt_data_end+0xf80090b4>
1000944c:	d9012117 	ldw	r4,1156(sp)
10009450:	d9412017 	ldw	r5,1152(sp)
10009454:	d9811a04 	addi	r6,sp,1128
10009458:	d9c12a15 	stw	r7,1192(sp)
1000945c:	db012b15 	stw	r12,1196(sp)
10009460:	00088240 	call	10008824 <__sprint_r.part.0>
10009464:	d9c12a17 	ldw	r7,1192(sp)
10009468:	db012b17 	ldw	r12,1196(sp)
1000946c:	10004e1e 	bne	r2,zero,100095a8 <___vfiprintf_internal_r+0xc70>
10009470:	d9011b17 	ldw	r4,1132(sp)
10009474:	d8c11c17 	ldw	r3,1136(sp)
10009478:	d811883a 	mov	r8,sp
1000947c:	21400044 	addi	r5,r4,1
10009480:	003e9d06 	br	10008ef8 <__alt_data_end+0xf8008ef8>
10009484:	d9411b17 	ldw	r5,1132(sp)
10009488:	d8c11c17 	ldw	r3,1136(sp)
1000948c:	28800044 	addi	r2,r5,1
10009490:	d9011d87 	ldb	r4,1142(sp)
10009494:	203eb626 	beq	r4,zero,10008f70 <__alt_data_end+0xf8008f70>
10009498:	01000044 	movi	r4,1
1000949c:	d9411d84 	addi	r5,sp,1142
100094a0:	1907883a 	add	r3,r3,r4
100094a4:	41400015 	stw	r5,0(r8)
100094a8:	41000115 	stw	r4,4(r8)
100094ac:	d8c11c15 	stw	r3,1136(sp)
100094b0:	d8811b15 	stw	r2,1132(sp)
100094b4:	014001c4 	movi	r5,7
100094b8:	2880ce16 	blt	r5,r2,100097f4 <___vfiprintf_internal_r+0xebc>
100094bc:	100b883a 	mov	r5,r2
100094c0:	42000204 	addi	r8,r8,8
100094c4:	10800044 	addi	r2,r2,1
100094c8:	003ea906 	br	10008f70 <__alt_data_end+0xf8008f70>
100094cc:	d9012117 	ldw	r4,1156(sp)
100094d0:	d9412017 	ldw	r5,1152(sp)
100094d4:	d9811a04 	addi	r6,sp,1128
100094d8:	00088240 	call	10008824 <__sprint_r.part.0>
100094dc:	1000321e 	bne	r2,zero,100095a8 <___vfiprintf_internal_r+0xc70>
100094e0:	d9411b17 	ldw	r5,1132(sp)
100094e4:	d8c11c17 	ldw	r3,1136(sp)
100094e8:	d811883a 	mov	r8,sp
100094ec:	28800044 	addi	r2,r5,1
100094f0:	003eba06 	br	10008fdc <__alt_data_end+0xf8008fdc>
100094f4:	10803fcc 	andi	r2,r2,255
100094f8:	00c00044 	movi	r3,1
100094fc:	10fe4d1e 	bne	r2,r3,10008e34 <__alt_data_end+0xf8008e34>
10009500:	a800021e 	bne	r21,zero,1000950c <___vfiprintf_internal_r+0xbd4>
10009504:	00800244 	movi	r2,9
10009508:	14c01b2e 	bgeu	r2,r19,10009578 <___vfiprintf_internal_r+0xc40>
1000950c:	dc012215 	stw	r16,1160(sp)
10009510:	dd010a04 	addi	r20,sp,1064
10009514:	a821883a 	mov	r16,r21
10009518:	402b883a 	mov	r21,r8
1000951c:	9809883a 	mov	r4,r19
10009520:	800b883a 	mov	r5,r16
10009524:	01800284 	movi	r6,10
10009528:	000f883a 	mov	r7,zero
1000952c:	000ad0c0 	call	1000ad0c <__umoddi3>
10009530:	10800c04 	addi	r2,r2,48
10009534:	a53fffc4 	addi	r20,r20,-1
10009538:	9809883a 	mov	r4,r19
1000953c:	800b883a 	mov	r5,r16
10009540:	01800284 	movi	r6,10
10009544:	000f883a 	mov	r7,zero
10009548:	a0800005 	stb	r2,0(r20)
1000954c:	000a6cc0 	call	1000a6cc <__udivdi3>
10009550:	1027883a 	mov	r19,r2
10009554:	10c4b03a 	or	r2,r2,r3
10009558:	1821883a 	mov	r16,r3
1000955c:	103fef1e 	bne	r2,zero,1000951c <__alt_data_end+0xf800951c>
10009560:	d9011e17 	ldw	r4,1144(sp)
10009564:	dc012217 	ldw	r16,1160(sp)
10009568:	a811883a 	mov	r8,r21
1000956c:	dd012215 	stw	r20,1160(sp)
10009570:	2529c83a 	sub	r20,r4,r20
10009574:	003e4106 	br	10008e7c <__alt_data_end+0xf8008e7c>
10009578:	9cc00c04 	addi	r19,r19,48
1000957c:	d8c109c4 	addi	r3,sp,1063
10009580:	dcc109c5 	stb	r19,1063(sp)
10009584:	dd012817 	ldw	r20,1184(sp)
10009588:	d8c12215 	stw	r3,1160(sp)
1000958c:	003e3b06 	br	10008e7c <__alt_data_end+0xf8008e7c>
10009590:	d8811c17 	ldw	r2,1136(sp)
10009594:	10000426 	beq	r2,zero,100095a8 <___vfiprintf_internal_r+0xc70>
10009598:	d9012117 	ldw	r4,1156(sp)
1000959c:	d9412017 	ldw	r5,1152(sp)
100095a0:	d9811a04 	addi	r6,sp,1128
100095a4:	00088240 	call	10008824 <__sprint_r.part.0>
100095a8:	d9412017 	ldw	r5,1152(sp)
100095ac:	2880030b 	ldhu	r2,12(r5)
100095b0:	1080100c 	andi	r2,r2,64
100095b4:	103ddc1e 	bne	r2,zero,10008d28 <__alt_data_end+0xf8008d28>
100095b8:	d8812517 	ldw	r2,1172(sp)
100095bc:	003ddb06 	br	10008d2c <__alt_data_end+0xf8008d2c>
100095c0:	1801061e 	bne	r3,zero,100099dc <___vfiprintf_internal_r+0x10a4>
100095c4:	d8c12217 	ldw	r3,1160(sp)
100095c8:	00800044 	movi	r2,1
100095cc:	dd000115 	stw	r20,4(sp)
100095d0:	d8c00015 	stw	r3,0(sp)
100095d4:	dd011c15 	stw	r20,1136(sp)
100095d8:	d8811b15 	stw	r2,1132(sp)
100095dc:	a007883a 	mov	r3,r20
100095e0:	d811883a 	mov	r8,sp
100095e4:	42000204 	addi	r8,r8,8
100095e8:	9480010c 	andi	r18,r18,4
100095ec:	90003426 	beq	r18,zero,100096c0 <___vfiprintf_internal_r+0xd88>
100095f0:	d9412417 	ldw	r5,1168(sp)
100095f4:	2d65c83a 	sub	r18,r5,r21
100095f8:	0480310e 	bge	zero,r18,100096c0 <___vfiprintf_internal_r+0xd88>
100095fc:	04000404 	movi	r16,16
10009600:	8481ad0e 	bge	r16,r18,10009cb8 <___vfiprintf_internal_r+0x1380>
10009604:	01440074 	movhi	r5,4097
10009608:	29420d04 	addi	r5,r5,2100
1000960c:	d9011b17 	ldw	r4,1132(sp)
10009610:	d9412615 	stw	r5,1176(sp)
10009614:	04c001c4 	movi	r19,7
10009618:	dd012117 	ldw	r20,1156(sp)
1000961c:	dd812017 	ldw	r22,1152(sp)
10009620:	00000506 	br	10009638 <___vfiprintf_internal_r+0xd00>
10009624:	21400084 	addi	r5,r4,2
10009628:	42000204 	addi	r8,r8,8
1000962c:	1009883a 	mov	r4,r2
10009630:	94bffc04 	addi	r18,r18,-16
10009634:	84800d0e 	bge	r16,r18,1000966c <___vfiprintf_internal_r+0xd34>
10009638:	18c00404 	addi	r3,r3,16
1000963c:	20800044 	addi	r2,r4,1
10009640:	47000015 	stw	fp,0(r8)
10009644:	44000115 	stw	r16,4(r8)
10009648:	d8c11c15 	stw	r3,1136(sp)
1000964c:	d8811b15 	stw	r2,1132(sp)
10009650:	98bff40e 	bge	r19,r2,10009624 <__alt_data_end+0xf8009624>
10009654:	1800291e 	bne	r3,zero,100096fc <___vfiprintf_internal_r+0xdc4>
10009658:	94bffc04 	addi	r18,r18,-16
1000965c:	0009883a 	mov	r4,zero
10009660:	01400044 	movi	r5,1
10009664:	d811883a 	mov	r8,sp
10009668:	84bff316 	blt	r16,r18,10009638 <__alt_data_end+0xf8009638>
1000966c:	d8812617 	ldw	r2,1176(sp)
10009670:	1c87883a 	add	r3,r3,r18
10009674:	44800115 	stw	r18,4(r8)
10009678:	40800015 	stw	r2,0(r8)
1000967c:	d8c11c15 	stw	r3,1136(sp)
10009680:	d9411b15 	stw	r5,1132(sp)
10009684:	008001c4 	movi	r2,7
10009688:	11400d0e 	bge	r2,r5,100096c0 <___vfiprintf_internal_r+0xd88>
1000968c:	1800061e 	bne	r3,zero,100096a8 <___vfiprintf_internal_r+0xd70>
10009690:	d8c12417 	ldw	r3,1168(sp)
10009694:	a8c12e16 	blt	r21,r3,10009b50 <___vfiprintf_internal_r+0x1218>
10009698:	d9012517 	ldw	r4,1172(sp)
1000969c:	2549883a 	add	r4,r4,r21
100096a0:	d9012515 	stw	r4,1172(sp)
100096a4:	00001206 	br	100096f0 <___vfiprintf_internal_r+0xdb8>
100096a8:	d9012117 	ldw	r4,1156(sp)
100096ac:	d9412017 	ldw	r5,1152(sp)
100096b0:	d9811a04 	addi	r6,sp,1128
100096b4:	00088240 	call	10008824 <__sprint_r.part.0>
100096b8:	103fbb1e 	bne	r2,zero,100095a8 <__alt_data_end+0xf80095a8>
100096bc:	d8c11c17 	ldw	r3,1136(sp)
100096c0:	d8812417 	ldw	r2,1168(sp)
100096c4:	a880010e 	bge	r21,r2,100096cc <___vfiprintf_internal_r+0xd94>
100096c8:	102b883a 	mov	r21,r2
100096cc:	d9012517 	ldw	r4,1172(sp)
100096d0:	2549883a 	add	r4,r4,r21
100096d4:	d9012515 	stw	r4,1172(sp)
100096d8:	18000526 	beq	r3,zero,100096f0 <___vfiprintf_internal_r+0xdb8>
100096dc:	d9012117 	ldw	r4,1156(sp)
100096e0:	d9412017 	ldw	r5,1152(sp)
100096e4:	d9811a04 	addi	r6,sp,1128
100096e8:	00088240 	call	10008824 <__sprint_r.part.0>
100096ec:	103fae1e 	bne	r2,zero,100095a8 <__alt_data_end+0xf80095a8>
100096f0:	d8011b15 	stw	zero,1132(sp)
100096f4:	d811883a 	mov	r8,sp
100096f8:	003cc706 	br	10008a18 <__alt_data_end+0xf8008a18>
100096fc:	a009883a 	mov	r4,r20
10009700:	b00b883a 	mov	r5,r22
10009704:	d9811a04 	addi	r6,sp,1128
10009708:	00088240 	call	10008824 <__sprint_r.part.0>
1000970c:	103fa61e 	bne	r2,zero,100095a8 <__alt_data_end+0xf80095a8>
10009710:	d9011b17 	ldw	r4,1132(sp)
10009714:	d8c11c17 	ldw	r3,1136(sp)
10009718:	d811883a 	mov	r8,sp
1000971c:	21400044 	addi	r5,r4,1
10009720:	003fc306 	br	10009630 <__alt_data_end+0xf8009630>
10009724:	d9012417 	ldw	r4,1168(sp)
10009728:	256dc83a 	sub	r22,r4,r21
1000972c:	05be1f0e 	bge	zero,r22,10008fac <__alt_data_end+0xf8008fac>
10009730:	04c00404 	movi	r19,16
10009734:	9d81720e 	bge	r19,r22,10009d00 <___vfiprintf_internal_r+0x13c8>
10009738:	00840074 	movhi	r2,4097
1000973c:	10820904 	addi	r2,r2,2084
10009740:	d8812615 	stw	r2,1176(sp)
10009744:	028001c4 	movi	r10,7
10009748:	00000506 	br	10009760 <___vfiprintf_internal_r+0xe28>
1000974c:	29000084 	addi	r4,r5,2
10009750:	42000204 	addi	r8,r8,8
10009754:	100b883a 	mov	r5,r2
10009758:	b5bffc04 	addi	r22,r22,-16
1000975c:	9d800d0e 	bge	r19,r22,10009794 <___vfiprintf_internal_r+0xe5c>
10009760:	18c00404 	addi	r3,r3,16
10009764:	28800044 	addi	r2,r5,1
10009768:	44400015 	stw	r17,0(r8)
1000976c:	44c00115 	stw	r19,4(r8)
10009770:	d8c11c15 	stw	r3,1136(sp)
10009774:	d8811b15 	stw	r2,1132(sp)
10009778:	50bff40e 	bge	r10,r2,1000974c <__alt_data_end+0xf800974c>
1000977c:	1800111e 	bne	r3,zero,100097c4 <___vfiprintf_internal_r+0xe8c>
10009780:	b5bffc04 	addi	r22,r22,-16
10009784:	000b883a 	mov	r5,zero
10009788:	01000044 	movi	r4,1
1000978c:	d811883a 	mov	r8,sp
10009790:	9dbff316 	blt	r19,r22,10009760 <__alt_data_end+0xf8009760>
10009794:	d9412617 	ldw	r5,1176(sp)
10009798:	1d87883a 	add	r3,r3,r22
1000979c:	45800115 	stw	r22,4(r8)
100097a0:	41400015 	stw	r5,0(r8)
100097a4:	d8c11c15 	stw	r3,1136(sp)
100097a8:	d9011b15 	stw	r4,1132(sp)
100097ac:	008001c4 	movi	r2,7
100097b0:	11008516 	blt	r2,r4,100099c8 <___vfiprintf_internal_r+0x1090>
100097b4:	42000204 	addi	r8,r8,8
100097b8:	20800044 	addi	r2,r4,1
100097bc:	200b883a 	mov	r5,r4
100097c0:	003dfa06 	br	10008fac <__alt_data_end+0xf8008fac>
100097c4:	d9012117 	ldw	r4,1156(sp)
100097c8:	d9412017 	ldw	r5,1152(sp)
100097cc:	d9811a04 	addi	r6,sp,1128
100097d0:	da812a15 	stw	r10,1192(sp)
100097d4:	00088240 	call	10008824 <__sprint_r.part.0>
100097d8:	da812a17 	ldw	r10,1192(sp)
100097dc:	103f721e 	bne	r2,zero,100095a8 <__alt_data_end+0xf80095a8>
100097e0:	d9411b17 	ldw	r5,1132(sp)
100097e4:	d8c11c17 	ldw	r3,1136(sp)
100097e8:	d811883a 	mov	r8,sp
100097ec:	29000044 	addi	r4,r5,1
100097f0:	003fd906 	br	10009758 <__alt_data_end+0xf8009758>
100097f4:	1800681e 	bne	r3,zero,10009998 <___vfiprintf_internal_r+0x1060>
100097f8:	50004d26 	beq	r10,zero,10009930 <___vfiprintf_internal_r+0xff8>
100097fc:	d8811d04 	addi	r2,sp,1140
10009800:	00c00084 	movi	r3,2
10009804:	d8800015 	stw	r2,0(sp)
10009808:	d8c00115 	stw	r3,4(sp)
1000980c:	2005883a 	mov	r2,r4
10009810:	d811883a 	mov	r8,sp
10009814:	003de006 	br	10008f98 <__alt_data_end+0xf8008f98>
10009818:	1800551e 	bne	r3,zero,10009970 <___vfiprintf_internal_r+0x1038>
1000981c:	000b883a 	mov	r5,zero
10009820:	00800044 	movi	r2,1
10009824:	d811883a 	mov	r8,sp
10009828:	003dde06 	br	10008fa4 <__alt_data_end+0xf8008fa4>
1000982c:	10803fcc 	andi	r2,r2,255
10009830:	1000191e 	bne	r2,zero,10009898 <___vfiprintf_internal_r+0xf60>
10009834:	9080004c 	andi	r2,r18,1
10009838:	10001726 	beq	r2,zero,10009898 <___vfiprintf_internal_r+0xf60>
1000983c:	00800c04 	movi	r2,48
10009840:	d8c109c4 	addi	r3,sp,1063
10009844:	d88109c5 	stb	r2,1063(sp)
10009848:	dd012817 	ldw	r20,1184(sp)
1000984c:	d8c12215 	stw	r3,1160(sp)
10009850:	003d8a06 	br	10008e7c <__alt_data_end+0xf8008e7c>
10009854:	d9012717 	ldw	r4,1180(sp)
10009858:	dd010a04 	addi	r20,sp,1064
1000985c:	988003cc 	andi	r2,r19,15
10009860:	a806973a 	slli	r3,r21,28
10009864:	2085883a 	add	r2,r4,r2
10009868:	9826d13a 	srli	r19,r19,4
1000986c:	10800003 	ldbu	r2,0(r2)
10009870:	a82ad13a 	srli	r21,r21,4
10009874:	a53fffc4 	addi	r20,r20,-1
10009878:	1ce6b03a 	or	r19,r3,r19
1000987c:	a0800005 	stb	r2,0(r20)
10009880:	9d44b03a 	or	r2,r19,r21
10009884:	103ff51e 	bne	r2,zero,1000985c <__alt_data_end+0xf800985c>
10009888:	d9411e17 	ldw	r5,1144(sp)
1000988c:	dd012215 	stw	r20,1160(sp)
10009890:	2d29c83a 	sub	r20,r5,r20
10009894:	003d7906 	br	10008e7c <__alt_data_end+0xf8008e7c>
10009898:	d8c10a04 	addi	r3,sp,1064
1000989c:	d8c12215 	stw	r3,1160(sp)
100098a0:	003d7606 	br	10008e7c <__alt_data_end+0xf8008e7c>
100098a4:	18009e1e 	bne	r3,zero,10009b20 <___vfiprintf_internal_r+0x11e8>
100098a8:	d8811d87 	ldb	r2,1142(sp)
100098ac:	10005f26 	beq	r2,zero,10009a2c <___vfiprintf_internal_r+0x10f4>
100098b0:	00c00044 	movi	r3,1
100098b4:	d9011d84 	addi	r4,sp,1142
100098b8:	1805883a 	mov	r2,r3
100098bc:	d9000015 	stw	r4,0(sp)
100098c0:	d8c00115 	stw	r3,4(sp)
100098c4:	d811883a 	mov	r8,sp
100098c8:	003efc06 	br	100094bc <__alt_data_end+0xf80094bc>
100098cc:	d9412417 	ldw	r5,1168(sp)
100098d0:	d811883a 	mov	r8,sp
100098d4:	2d65c83a 	sub	r18,r5,r21
100098d8:	04bf4816 	blt	zero,r18,100095fc <__alt_data_end+0xf80095fc>
100098dc:	003f6c06 	br	10009690 <__alt_data_end+0xf8009690>
100098e0:	b829883a 	mov	r20,r23
100098e4:	003c6906 	br	10008a8c <__alt_data_end+0xf8008a8c>
100098e8:	d9012117 	ldw	r4,1156(sp)
100098ec:	d9412017 	ldw	r5,1152(sp)
100098f0:	d9811a04 	addi	r6,sp,1128
100098f4:	00088240 	call	10008824 <__sprint_r.part.0>
100098f8:	103f2b1e 	bne	r2,zero,100095a8 <__alt_data_end+0xf80095a8>
100098fc:	d8c11c17 	ldw	r3,1136(sp)
10009900:	d811883a 	mov	r8,sp
10009904:	003f3806 	br	100095e8 <__alt_data_end+0xf80095e8>
10009908:	00800084 	movi	r2,2
1000990c:	9d46b03a 	or	r3,r19,r21
10009910:	003df606 	br	100090ec <__alt_data_end+0xf80090ec>
10009914:	d9012117 	ldw	r4,1156(sp)
10009918:	d9412017 	ldw	r5,1152(sp)
1000991c:	d9811a04 	addi	r6,sp,1128
10009920:	00088240 	call	10008824 <__sprint_r.part.0>
10009924:	103f201e 	bne	r2,zero,100095a8 <__alt_data_end+0xf80095a8>
10009928:	d811883a 	mov	r8,sp
1000992c:	003cc606 	br	10008c48 <__alt_data_end+0xf8008c48>
10009930:	000b883a 	mov	r5,zero
10009934:	2005883a 	mov	r2,r4
10009938:	d811883a 	mov	r8,sp
1000993c:	003d9906 	br	10008fa4 <__alt_data_end+0xf8008fa4>
10009940:	10803fcc 	andi	r2,r2,255
10009944:	1080201c 	xori	r2,r2,128
10009948:	10bfe004 	addi	r2,r2,-128
1000994c:	01000c04 	movi	r4,48
10009950:	1100b226 	beq	r2,r4,10009c1c <___vfiprintf_internal_r+0x12e4>
10009954:	d9412217 	ldw	r5,1160(sp)
10009958:	d8811e17 	ldw	r2,1144(sp)
1000995c:	193fffc5 	stb	r4,-1(r3)
10009960:	297fffc4 	addi	r5,r5,-1
10009964:	d9412215 	stw	r5,1160(sp)
10009968:	1169c83a 	sub	r20,r2,r5
1000996c:	003d4306 	br	10008e7c <__alt_data_end+0xf8008e7c>
10009970:	d9012117 	ldw	r4,1156(sp)
10009974:	d9412017 	ldw	r5,1152(sp)
10009978:	d9811a04 	addi	r6,sp,1128
1000997c:	00088240 	call	10008824 <__sprint_r.part.0>
10009980:	103f091e 	bne	r2,zero,100095a8 <__alt_data_end+0xf80095a8>
10009984:	d9411b17 	ldw	r5,1132(sp)
10009988:	d8c11c17 	ldw	r3,1136(sp)
1000998c:	d811883a 	mov	r8,sp
10009990:	28800044 	addi	r2,r5,1
10009994:	003d8306 	br	10008fa4 <__alt_data_end+0xf8008fa4>
10009998:	d9012117 	ldw	r4,1156(sp)
1000999c:	d9412017 	ldw	r5,1152(sp)
100099a0:	d9811a04 	addi	r6,sp,1128
100099a4:	da812a15 	stw	r10,1192(sp)
100099a8:	00088240 	call	10008824 <__sprint_r.part.0>
100099ac:	da812a17 	ldw	r10,1192(sp)
100099b0:	103efd1e 	bne	r2,zero,100095a8 <__alt_data_end+0xf80095a8>
100099b4:	d9411b17 	ldw	r5,1132(sp)
100099b8:	d8c11c17 	ldw	r3,1136(sp)
100099bc:	d811883a 	mov	r8,sp
100099c0:	28800044 	addi	r2,r5,1
100099c4:	003d6a06 	br	10008f70 <__alt_data_end+0xf8008f70>
100099c8:	1800a01e 	bne	r3,zero,10009c4c <___vfiprintf_internal_r+0x1314>
100099cc:	000b883a 	mov	r5,zero
100099d0:	00800044 	movi	r2,1
100099d4:	d811883a 	mov	r8,sp
100099d8:	003d7406 	br	10008fac <__alt_data_end+0xf8008fac>
100099dc:	d9012117 	ldw	r4,1156(sp)
100099e0:	d9412017 	ldw	r5,1152(sp)
100099e4:	d9811a04 	addi	r6,sp,1128
100099e8:	00088240 	call	10008824 <__sprint_r.part.0>
100099ec:	103eee1e 	bne	r2,zero,100095a8 <__alt_data_end+0xf80095a8>
100099f0:	d8811b17 	ldw	r2,1132(sp)
100099f4:	d8c11c17 	ldw	r3,1136(sp)
100099f8:	d811883a 	mov	r8,sp
100099fc:	10800044 	addi	r2,r2,1
10009a00:	003d8f06 	br	10009040 <__alt_data_end+0xf8009040>
10009a04:	04e7c83a 	sub	r19,zero,r19
10009a08:	9804c03a 	cmpne	r2,r19,zero
10009a0c:	056bc83a 	sub	r21,zero,r21
10009a10:	a8abc83a 	sub	r21,r21,r2
10009a14:	05800b44 	movi	r22,45
10009a18:	dd811d85 	stb	r22,1142(sp)
10009a1c:	8029883a 	mov	r20,r16
10009a20:	00800044 	movi	r2,1
10009a24:	9d46b03a 	or	r3,r19,r21
10009a28:	003cfa06 	br	10008e14 <__alt_data_end+0xf8008e14>
10009a2c:	000b883a 	mov	r5,zero
10009a30:	00800044 	movi	r2,1
10009a34:	d811883a 	mov	r8,sp
10009a38:	503d5a26 	beq	r10,zero,10008fa4 <__alt_data_end+0xf8008fa4>
10009a3c:	00c00084 	movi	r3,2
10009a40:	d9011d04 	addi	r4,sp,1140
10009a44:	d9000015 	stw	r4,0(sp)
10009a48:	d8c00115 	stw	r3,4(sp)
10009a4c:	003d5206 	br	10008f98 <__alt_data_end+0xf8008f98>
10009a50:	9080040c 	andi	r2,r18,16
10009a54:	1000421e 	bne	r2,zero,10009b60 <___vfiprintf_internal_r+0x1228>
10009a58:	9480100c 	andi	r18,r18,64
10009a5c:	90009c26 	beq	r18,zero,10009cd0 <___vfiprintf_internal_r+0x1398>
10009a60:	d9412317 	ldw	r5,1164(sp)
10009a64:	d8c12517 	ldw	r3,1172(sp)
10009a68:	28800017 	ldw	r2,0(r5)
10009a6c:	29400104 	addi	r5,r5,4
10009a70:	d9412315 	stw	r5,1164(sp)
10009a74:	10c0000d 	sth	r3,0(r2)
10009a78:	003be706 	br	10008a18 <__alt_data_end+0xf8008a18>
10009a7c:	90c0100c 	andi	r3,r18,64
10009a80:	18003e26 	beq	r3,zero,10009b7c <___vfiprintf_internal_r+0x1244>
10009a84:	d8c12317 	ldw	r3,1164(sp)
10009a88:	14c0000b 	ldhu	r19,0(r2)
10009a8c:	002b883a 	mov	r21,zero
10009a90:	18c00104 	addi	r3,r3,4
10009a94:	d8c12315 	stw	r3,1164(sp)
10009a98:	003db706 	br	10009178 <__alt_data_end+0xf8009178>
10009a9c:	9080100c 	andi	r2,r18,64
10009aa0:	10004c26 	beq	r2,zero,10009bd4 <___vfiprintf_internal_r+0x129c>
10009aa4:	1cc0000f 	ldh	r19,0(r3)
10009aa8:	d8812317 	ldw	r2,1164(sp)
10009aac:	982bd7fa 	srai	r21,r19,31
10009ab0:	10800104 	addi	r2,r2,4
10009ab4:	d8812315 	stw	r2,1164(sp)
10009ab8:	a805883a 	mov	r2,r21
10009abc:	003cd006 	br	10008e00 <__alt_data_end+0xf8008e00>
10009ac0:	00800084 	movi	r2,2
10009ac4:	003d8906 	br	100090ec <__alt_data_end+0xf80090ec>
10009ac8:	b9800007 	ldb	r6,0(r23)
10009acc:	003bfb06 	br	10008abc <__alt_data_end+0xf8008abc>
10009ad0:	9080100c 	andi	r2,r18,64
10009ad4:	10003726 	beq	r2,zero,10009bb4 <___vfiprintf_internal_r+0x127c>
10009ad8:	d9412317 	ldw	r5,1164(sp)
10009adc:	002b883a 	mov	r21,zero
10009ae0:	0005883a 	mov	r2,zero
10009ae4:	2cc0000b 	ldhu	r19,0(r5)
10009ae8:	29400104 	addi	r5,r5,4
10009aec:	d9412315 	stw	r5,1164(sp)
10009af0:	9807883a 	mov	r3,r19
10009af4:	003d7d06 	br	100090ec <__alt_data_end+0xf80090ec>
10009af8:	9080100c 	andi	r2,r18,64
10009afc:	10002526 	beq	r2,zero,10009b94 <___vfiprintf_internal_r+0x125c>
10009b00:	d8812317 	ldw	r2,1164(sp)
10009b04:	002b883a 	mov	r21,zero
10009b08:	14c0000b 	ldhu	r19,0(r2)
10009b0c:	10800104 	addi	r2,r2,4
10009b10:	d8812315 	stw	r2,1164(sp)
10009b14:	9807883a 	mov	r3,r19
10009b18:	00800044 	movi	r2,1
10009b1c:	003d7306 	br	100090ec <__alt_data_end+0xf80090ec>
10009b20:	d9012117 	ldw	r4,1156(sp)
10009b24:	d9412017 	ldw	r5,1152(sp)
10009b28:	d9811a04 	addi	r6,sp,1128
10009b2c:	da812a15 	stw	r10,1192(sp)
10009b30:	00088240 	call	10008824 <__sprint_r.part.0>
10009b34:	da812a17 	ldw	r10,1192(sp)
10009b38:	103e9b1e 	bne	r2,zero,100095a8 <__alt_data_end+0xf80095a8>
10009b3c:	d9411b17 	ldw	r5,1132(sp)
10009b40:	d8c11c17 	ldw	r3,1136(sp)
10009b44:	d811883a 	mov	r8,sp
10009b48:	28800044 	addi	r2,r5,1
10009b4c:	003e5006 	br	10009490 <__alt_data_end+0xf8009490>
10009b50:	182b883a 	mov	r21,r3
10009b54:	003ed006 	br	10009698 <__alt_data_end+0xf8009698>
10009b58:	8029883a 	mov	r20,r16
10009b5c:	003dc606 	br	10009278 <__alt_data_end+0xf8009278>
10009b60:	d8c12317 	ldw	r3,1164(sp)
10009b64:	d9012517 	ldw	r4,1172(sp)
10009b68:	18800017 	ldw	r2,0(r3)
10009b6c:	18c00104 	addi	r3,r3,4
10009b70:	d8c12315 	stw	r3,1164(sp)
10009b74:	11000015 	stw	r4,0(r2)
10009b78:	003ba706 	br	10008a18 <__alt_data_end+0xf8008a18>
10009b7c:	d9012317 	ldw	r4,1164(sp)
10009b80:	14c00017 	ldw	r19,0(r2)
10009b84:	002b883a 	mov	r21,zero
10009b88:	21000104 	addi	r4,r4,4
10009b8c:	d9012315 	stw	r4,1164(sp)
10009b90:	003d7906 	br	10009178 <__alt_data_end+0xf8009178>
10009b94:	d8c12317 	ldw	r3,1164(sp)
10009b98:	002b883a 	mov	r21,zero
10009b9c:	00800044 	movi	r2,1
10009ba0:	1cc00017 	ldw	r19,0(r3)
10009ba4:	18c00104 	addi	r3,r3,4
10009ba8:	d8c12315 	stw	r3,1164(sp)
10009bac:	9807883a 	mov	r3,r19
10009bb0:	003d4e06 	br	100090ec <__alt_data_end+0xf80090ec>
10009bb4:	d8812317 	ldw	r2,1164(sp)
10009bb8:	002b883a 	mov	r21,zero
10009bbc:	14c00017 	ldw	r19,0(r2)
10009bc0:	10800104 	addi	r2,r2,4
10009bc4:	d8812315 	stw	r2,1164(sp)
10009bc8:	9807883a 	mov	r3,r19
10009bcc:	0005883a 	mov	r2,zero
10009bd0:	003d4606 	br	100090ec <__alt_data_end+0xf80090ec>
10009bd4:	1cc00017 	ldw	r19,0(r3)
10009bd8:	d8c12317 	ldw	r3,1164(sp)
10009bdc:	982bd7fa 	srai	r21,r19,31
10009be0:	18c00104 	addi	r3,r3,4
10009be4:	d8c12315 	stw	r3,1164(sp)
10009be8:	a805883a 	mov	r2,r21
10009bec:	003c8406 	br	10008e00 <__alt_data_end+0xf8008e00>
10009bf0:	01040074 	movhi	r4,4097
10009bf4:	21020904 	addi	r4,r4,2084
10009bf8:	d9012615 	stw	r4,1176(sp)
10009bfc:	003d0606 	br	10009018 <__alt_data_end+0xf8009018>
10009c00:	b9800043 	ldbu	r6,1(r23)
10009c04:	94800814 	ori	r18,r18,32
10009c08:	bdc00044 	addi	r23,r23,1
10009c0c:	31803fcc 	andi	r6,r6,255
10009c10:	3180201c 	xori	r6,r6,128
10009c14:	31bfe004 	addi	r6,r6,-128
10009c18:	003ba806 	br	10008abc <__alt_data_end+0xf8008abc>
10009c1c:	d8811e17 	ldw	r2,1144(sp)
10009c20:	d8c12217 	ldw	r3,1160(sp)
10009c24:	10e9c83a 	sub	r20,r2,r3
10009c28:	003c9406 	br	10008e7c <__alt_data_end+0xf8008e7c>
10009c2c:	da012a15 	stw	r8,1192(sp)
10009c30:	00015800 	call	10001580 <strlen>
10009c34:	1029883a 	mov	r20,r2
10009c38:	dd811d83 	ldbu	r22,1142(sp)
10009c3c:	dcc12315 	stw	r19,1164(sp)
10009c40:	0021883a 	mov	r16,zero
10009c44:	da012a17 	ldw	r8,1192(sp)
10009c48:	003c8c06 	br	10008e7c <__alt_data_end+0xf8008e7c>
10009c4c:	d9012117 	ldw	r4,1156(sp)
10009c50:	d9412017 	ldw	r5,1152(sp)
10009c54:	d9811a04 	addi	r6,sp,1128
10009c58:	00088240 	call	10008824 <__sprint_r.part.0>
10009c5c:	103e521e 	bne	r2,zero,100095a8 <__alt_data_end+0xf80095a8>
10009c60:	d9411b17 	ldw	r5,1132(sp)
10009c64:	d8c11c17 	ldw	r3,1136(sp)
10009c68:	d811883a 	mov	r8,sp
10009c6c:	28800044 	addi	r2,r5,1
10009c70:	003cce06 	br	10008fac <__alt_data_end+0xf8008fac>
10009c74:	01440074 	movhi	r5,4097
10009c78:	29420d04 	addi	r5,r5,2100
10009c7c:	d9412615 	stw	r5,1176(sp)
10009c80:	d9411b17 	ldw	r5,1132(sp)
10009c84:	29400044 	addi	r5,r5,1
10009c88:	003cad06 	br	10008f40 <__alt_data_end+0xf8008f40>
10009c8c:	00800184 	movi	r2,6
10009c90:	1400012e 	bgeu	r2,r16,10009c98 <___vfiprintf_internal_r+0x1360>
10009c94:	1021883a 	mov	r16,r2
10009c98:	8029883a 	mov	r20,r16
10009c9c:	802b883a 	mov	r21,r16
10009ca0:	80001c16 	blt	r16,zero,10009d14 <___vfiprintf_internal_r+0x13dc>
10009ca4:	00c40074 	movhi	r3,4097
10009ca8:	18c1ad04 	addi	r3,r3,1716
10009cac:	dcc12315 	stw	r19,1164(sp)
10009cb0:	d8c12215 	stw	r3,1160(sp)
10009cb4:	003cff06 	br	100090b4 <__alt_data_end+0xf80090b4>
10009cb8:	d9411b17 	ldw	r5,1132(sp)
10009cbc:	00840074 	movhi	r2,4097
10009cc0:	10820d04 	addi	r2,r2,2100
10009cc4:	d8812615 	stw	r2,1176(sp)
10009cc8:	29400044 	addi	r5,r5,1
10009ccc:	003e6706 	br	1000966c <__alt_data_end+0xf800966c>
10009cd0:	d9012317 	ldw	r4,1164(sp)
10009cd4:	d9412517 	ldw	r5,1172(sp)
10009cd8:	20800017 	ldw	r2,0(r4)
10009cdc:	21000104 	addi	r4,r4,4
10009ce0:	d9012315 	stw	r4,1164(sp)
10009ce4:	11400015 	stw	r5,0(r2)
10009ce8:	003b4b06 	br	10008a18 <__alt_data_end+0xf8008a18>
10009cec:	8029883a 	mov	r20,r16
10009cf0:	dd811d83 	ldbu	r22,1142(sp)
10009cf4:	dcc12315 	stw	r19,1164(sp)
10009cf8:	0021883a 	mov	r16,zero
10009cfc:	003c5f06 	br	10008e7c <__alt_data_end+0xf8008e7c>
10009d00:	01040074 	movhi	r4,4097
10009d04:	21020904 	addi	r4,r4,2084
10009d08:	d9012615 	stw	r4,1176(sp)
10009d0c:	1009883a 	mov	r4,r2
10009d10:	003ea006 	br	10009794 <__alt_data_end+0xf8009794>
10009d14:	002b883a 	mov	r21,zero
10009d18:	003fe206 	br	10009ca4 <__alt_data_end+0xf8009ca4>
10009d1c:	d9412317 	ldw	r5,1164(sp)
10009d20:	b807883a 	mov	r3,r23
10009d24:	102f883a 	mov	r23,r2
10009d28:	2c000017 	ldw	r16,0(r5)
10009d2c:	29000104 	addi	r4,r5,4
10009d30:	d9012315 	stw	r4,1164(sp)
10009d34:	80000416 	blt	r16,zero,10009d48 <___vfiprintf_internal_r+0x1410>
10009d38:	19800047 	ldb	r6,1(r3)
10009d3c:	003b5f06 	br	10008abc <__alt_data_end+0xf8008abc>
10009d40:	043fffc4 	movi	r16,-1
10009d44:	003bef06 	br	10008d04 <__alt_data_end+0xf8008d04>
10009d48:	043fffc4 	movi	r16,-1
10009d4c:	19800047 	ldb	r6,1(r3)
10009d50:	003b5a06 	br	10008abc <__alt_data_end+0xf8008abc>
10009d54:	282b883a 	mov	r21,r5
10009d58:	003cc706 	br	10009078 <__alt_data_end+0xf8009078>

10009d5c <__vfiprintf_internal>:
10009d5c:	2007883a 	mov	r3,r4
10009d60:	01040074 	movhi	r4,4097
10009d64:	210a9904 	addi	r4,r4,10852
10009d68:	21000017 	ldw	r4,0(r4)
10009d6c:	2805883a 	mov	r2,r5
10009d70:	300f883a 	mov	r7,r6
10009d74:	180b883a 	mov	r5,r3
10009d78:	100d883a 	mov	r6,r2
10009d7c:	00089381 	jmpi	10008938 <___vfiprintf_internal_r>

10009d80 <_write_r>:
10009d80:	defffd04 	addi	sp,sp,-12
10009d84:	dc000015 	stw	r16,0(sp)
10009d88:	04040074 	movhi	r16,4097
10009d8c:	dc400115 	stw	r17,4(sp)
10009d90:	8412f804 	addi	r16,r16,19424
10009d94:	2023883a 	mov	r17,r4
10009d98:	2809883a 	mov	r4,r5
10009d9c:	300b883a 	mov	r5,r6
10009da0:	380d883a 	mov	r6,r7
10009da4:	dfc00215 	stw	ra,8(sp)
10009da8:	80000015 	stw	zero,0(r16)
10009dac:	000e56c0 	call	1000e56c <write>
10009db0:	00ffffc4 	movi	r3,-1
10009db4:	10c00526 	beq	r2,r3,10009dcc <_write_r+0x4c>
10009db8:	dfc00217 	ldw	ra,8(sp)
10009dbc:	dc400117 	ldw	r17,4(sp)
10009dc0:	dc000017 	ldw	r16,0(sp)
10009dc4:	dec00304 	addi	sp,sp,12
10009dc8:	f800283a 	ret
10009dcc:	80c00017 	ldw	r3,0(r16)
10009dd0:	183ff926 	beq	r3,zero,10009db8 <__alt_data_end+0xf8009db8>
10009dd4:	88c00015 	stw	r3,0(r17)
10009dd8:	003ff706 	br	10009db8 <__alt_data_end+0xf8009db8>

10009ddc <_close_r>:
10009ddc:	defffd04 	addi	sp,sp,-12
10009de0:	dc000015 	stw	r16,0(sp)
10009de4:	04040074 	movhi	r16,4097
10009de8:	dc400115 	stw	r17,4(sp)
10009dec:	8412f804 	addi	r16,r16,19424
10009df0:	2023883a 	mov	r17,r4
10009df4:	2809883a 	mov	r4,r5
10009df8:	dfc00215 	stw	ra,8(sp)
10009dfc:	80000015 	stw	zero,0(r16)
10009e00:	000dcc80 	call	1000dcc8 <close>
10009e04:	00ffffc4 	movi	r3,-1
10009e08:	10c00526 	beq	r2,r3,10009e20 <_close_r+0x44>
10009e0c:	dfc00217 	ldw	ra,8(sp)
10009e10:	dc400117 	ldw	r17,4(sp)
10009e14:	dc000017 	ldw	r16,0(sp)
10009e18:	dec00304 	addi	sp,sp,12
10009e1c:	f800283a 	ret
10009e20:	80c00017 	ldw	r3,0(r16)
10009e24:	183ff926 	beq	r3,zero,10009e0c <__alt_data_end+0xf8009e0c>
10009e28:	88c00015 	stw	r3,0(r17)
10009e2c:	003ff706 	br	10009e0c <__alt_data_end+0xf8009e0c>

10009e30 <_calloc_r>:
10009e30:	defffe04 	addi	sp,sp,-8
10009e34:	dc000015 	stw	r16,0(sp)
10009e38:	2021883a 	mov	r16,r4
10009e3c:	2809883a 	mov	r4,r5
10009e40:	300b883a 	mov	r5,r6
10009e44:	dfc00115 	stw	ra,4(sp)
10009e48:	000b4540 	call	1000b454 <__mulsi3>
10009e4c:	8009883a 	mov	r4,r16
10009e50:	100b883a 	mov	r5,r2
10009e54:	00064840 	call	10006484 <_malloc_r>
10009e58:	1021883a 	mov	r16,r2
10009e5c:	10002826 	beq	r2,zero,10009f00 <_calloc_r+0xd0>
10009e60:	11bfff17 	ldw	r6,-4(r2)
10009e64:	00bfff04 	movi	r2,-4
10009e68:	00c00904 	movi	r3,36
10009e6c:	308c703a 	and	r6,r6,r2
10009e70:	308d883a 	add	r6,r6,r2
10009e74:	19801436 	bltu	r3,r6,10009ec8 <_calloc_r+0x98>
10009e78:	008004c4 	movi	r2,19
10009e7c:	11800936 	bltu	r2,r6,10009ea4 <_calloc_r+0x74>
10009e80:	8005883a 	mov	r2,r16
10009e84:	10000015 	stw	zero,0(r2)
10009e88:	10000115 	stw	zero,4(r2)
10009e8c:	10000215 	stw	zero,8(r2)
10009e90:	8005883a 	mov	r2,r16
10009e94:	dfc00117 	ldw	ra,4(sp)
10009e98:	dc000017 	ldw	r16,0(sp)
10009e9c:	dec00204 	addi	sp,sp,8
10009ea0:	f800283a 	ret
10009ea4:	80000015 	stw	zero,0(r16)
10009ea8:	80000115 	stw	zero,4(r16)
10009eac:	008006c4 	movi	r2,27
10009eb0:	11800d2e 	bgeu	r2,r6,10009ee8 <_calloc_r+0xb8>
10009eb4:	80000215 	stw	zero,8(r16)
10009eb8:	80000315 	stw	zero,12(r16)
10009ebc:	30c00c26 	beq	r6,r3,10009ef0 <_calloc_r+0xc0>
10009ec0:	80800404 	addi	r2,r16,16
10009ec4:	003fef06 	br	10009e84 <__alt_data_end+0xf8009e84>
10009ec8:	8009883a 	mov	r4,r16
10009ecc:	000b883a 	mov	r5,zero
10009ed0:	0006e700 	call	10006e70 <memset>
10009ed4:	8005883a 	mov	r2,r16
10009ed8:	dfc00117 	ldw	ra,4(sp)
10009edc:	dc000017 	ldw	r16,0(sp)
10009ee0:	dec00204 	addi	sp,sp,8
10009ee4:	f800283a 	ret
10009ee8:	80800204 	addi	r2,r16,8
10009eec:	003fe506 	br	10009e84 <__alt_data_end+0xf8009e84>
10009ef0:	80000415 	stw	zero,16(r16)
10009ef4:	80800604 	addi	r2,r16,24
10009ef8:	80000515 	stw	zero,20(r16)
10009efc:	003fe106 	br	10009e84 <__alt_data_end+0xf8009e84>
10009f00:	0005883a 	mov	r2,zero
10009f04:	003fe306 	br	10009e94 <__alt_data_end+0xf8009e94>

10009f08 <_fclose_r>:
10009f08:	28003226 	beq	r5,zero,10009fd4 <_fclose_r+0xcc>
10009f0c:	defffc04 	addi	sp,sp,-16
10009f10:	dc400115 	stw	r17,4(sp)
10009f14:	2023883a 	mov	r17,r4
10009f18:	dc000015 	stw	r16,0(sp)
10009f1c:	dfc00315 	stw	ra,12(sp)
10009f20:	dc800215 	stw	r18,8(sp)
10009f24:	2821883a 	mov	r16,r5
10009f28:	00057840 	call	10005784 <__sfp_lock_acquire>
10009f2c:	88000226 	beq	r17,zero,10009f38 <_fclose_r+0x30>
10009f30:	88800e17 	ldw	r2,56(r17)
10009f34:	10002926 	beq	r2,zero,10009fdc <_fclose_r+0xd4>
10009f38:	8080030f 	ldh	r2,12(r16)
10009f3c:	10002226 	beq	r2,zero,10009fc8 <_fclose_r+0xc0>
10009f40:	8809883a 	mov	r4,r17
10009f44:	800b883a 	mov	r5,r16
10009f48:	00051b80 	call	100051b8 <_fflush_r>
10009f4c:	1025883a 	mov	r18,r2
10009f50:	80800b17 	ldw	r2,44(r16)
10009f54:	10000426 	beq	r2,zero,10009f68 <_fclose_r+0x60>
10009f58:	81400717 	ldw	r5,28(r16)
10009f5c:	8809883a 	mov	r4,r17
10009f60:	103ee83a 	callr	r2
10009f64:	10002616 	blt	r2,zero,1000a000 <_fclose_r+0xf8>
10009f68:	8080030b 	ldhu	r2,12(r16)
10009f6c:	1080200c 	andi	r2,r2,128
10009f70:	10001f1e 	bne	r2,zero,10009ff0 <_fclose_r+0xe8>
10009f74:	81400c17 	ldw	r5,48(r16)
10009f78:	28000526 	beq	r5,zero,10009f90 <_fclose_r+0x88>
10009f7c:	80801004 	addi	r2,r16,64
10009f80:	28800226 	beq	r5,r2,10009f8c <_fclose_r+0x84>
10009f84:	8809883a 	mov	r4,r17
10009f88:	00058e80 	call	100058e8 <_free_r>
10009f8c:	80000c15 	stw	zero,48(r16)
10009f90:	81401117 	ldw	r5,68(r16)
10009f94:	28000326 	beq	r5,zero,10009fa4 <_fclose_r+0x9c>
10009f98:	8809883a 	mov	r4,r17
10009f9c:	00058e80 	call	100058e8 <_free_r>
10009fa0:	80001115 	stw	zero,68(r16)
10009fa4:	8000030d 	sth	zero,12(r16)
10009fa8:	00057880 	call	10005788 <__sfp_lock_release>
10009fac:	9005883a 	mov	r2,r18
10009fb0:	dfc00317 	ldw	ra,12(sp)
10009fb4:	dc800217 	ldw	r18,8(sp)
10009fb8:	dc400117 	ldw	r17,4(sp)
10009fbc:	dc000017 	ldw	r16,0(sp)
10009fc0:	dec00404 	addi	sp,sp,16
10009fc4:	f800283a 	ret
10009fc8:	00057880 	call	10005788 <__sfp_lock_release>
10009fcc:	0005883a 	mov	r2,zero
10009fd0:	003ff706 	br	10009fb0 <__alt_data_end+0xf8009fb0>
10009fd4:	0005883a 	mov	r2,zero
10009fd8:	f800283a 	ret
10009fdc:	8809883a 	mov	r4,r17
10009fe0:	00057740 	call	10005774 <__sinit>
10009fe4:	8080030f 	ldh	r2,12(r16)
10009fe8:	103fd51e 	bne	r2,zero,10009f40 <__alt_data_end+0xf8009f40>
10009fec:	003ff606 	br	10009fc8 <__alt_data_end+0xf8009fc8>
10009ff0:	81400417 	ldw	r5,16(r16)
10009ff4:	8809883a 	mov	r4,r17
10009ff8:	00058e80 	call	100058e8 <_free_r>
10009ffc:	003fdd06 	br	10009f74 <__alt_data_end+0xf8009f74>
1000a000:	04bfffc4 	movi	r18,-1
1000a004:	003fd806 	br	10009f68 <__alt_data_end+0xf8009f68>

1000a008 <fclose>:
1000a008:	00840074 	movhi	r2,4097
1000a00c:	108a9904 	addi	r2,r2,10852
1000a010:	200b883a 	mov	r5,r4
1000a014:	11000017 	ldw	r4,0(r2)
1000a018:	0009f081 	jmpi	10009f08 <_fclose_r>

1000a01c <_fputwc_r>:
1000a01c:	3080030b 	ldhu	r2,12(r6)
1000a020:	defff804 	addi	sp,sp,-32
1000a024:	dcc00415 	stw	r19,16(sp)
1000a028:	dc800315 	stw	r18,12(sp)
1000a02c:	dc000115 	stw	r16,4(sp)
1000a030:	dfc00715 	stw	ra,28(sp)
1000a034:	dd400615 	stw	r21,24(sp)
1000a038:	dd000515 	stw	r20,20(sp)
1000a03c:	dc400215 	stw	r17,8(sp)
1000a040:	10c8000c 	andi	r3,r2,8192
1000a044:	3021883a 	mov	r16,r6
1000a048:	2027883a 	mov	r19,r4
1000a04c:	2825883a 	mov	r18,r5
1000a050:	1800051e 	bne	r3,zero,1000a068 <_fputwc_r+0x4c>
1000a054:	30c01917 	ldw	r3,100(r6)
1000a058:	10880014 	ori	r2,r2,8192
1000a05c:	3080030d 	sth	r2,12(r6)
1000a060:	18880014 	ori	r2,r3,8192
1000a064:	30801915 	stw	r2,100(r6)
1000a068:	00062740 	call	10006274 <__locale_mb_cur_max>
1000a06c:	00c00044 	movi	r3,1
1000a070:	10c03e26 	beq	r2,r3,1000a16c <_fputwc_r+0x150>
1000a074:	9809883a 	mov	r4,r19
1000a078:	d80b883a 	mov	r5,sp
1000a07c:	900d883a 	mov	r6,r18
1000a080:	81c01704 	addi	r7,r16,92
1000a084:	000a4cc0 	call	1000a4cc <_wcrtomb_r>
1000a088:	1029883a 	mov	r20,r2
1000a08c:	00bfffc4 	movi	r2,-1
1000a090:	a0802026 	beq	r20,r2,1000a114 <_fputwc_r+0xf8>
1000a094:	d9400003 	ldbu	r5,0(sp)
1000a098:	a0001c26 	beq	r20,zero,1000a10c <_fputwc_r+0xf0>
1000a09c:	0023883a 	mov	r17,zero
1000a0a0:	05400284 	movi	r21,10
1000a0a4:	00000906 	br	1000a0cc <_fputwc_r+0xb0>
1000a0a8:	80800017 	ldw	r2,0(r16)
1000a0ac:	11400005 	stb	r5,0(r2)
1000a0b0:	80c00017 	ldw	r3,0(r16)
1000a0b4:	18c00044 	addi	r3,r3,1
1000a0b8:	80c00015 	stw	r3,0(r16)
1000a0bc:	8c400044 	addi	r17,r17,1
1000a0c0:	dc45883a 	add	r2,sp,r17
1000a0c4:	8d00112e 	bgeu	r17,r20,1000a10c <_fputwc_r+0xf0>
1000a0c8:	11400003 	ldbu	r5,0(r2)
1000a0cc:	80c00217 	ldw	r3,8(r16)
1000a0d0:	18ffffc4 	addi	r3,r3,-1
1000a0d4:	80c00215 	stw	r3,8(r16)
1000a0d8:	183ff30e 	bge	r3,zero,1000a0a8 <__alt_data_end+0xf800a0a8>
1000a0dc:	80800617 	ldw	r2,24(r16)
1000a0e0:	18801916 	blt	r3,r2,1000a148 <_fputwc_r+0x12c>
1000a0e4:	80800017 	ldw	r2,0(r16)
1000a0e8:	11400005 	stb	r5,0(r2)
1000a0ec:	80800017 	ldw	r2,0(r16)
1000a0f0:	10c00003 	ldbu	r3,0(r2)
1000a0f4:	10800044 	addi	r2,r2,1
1000a0f8:	1d402326 	beq	r3,r21,1000a188 <_fputwc_r+0x16c>
1000a0fc:	80800015 	stw	r2,0(r16)
1000a100:	8c400044 	addi	r17,r17,1
1000a104:	dc45883a 	add	r2,sp,r17
1000a108:	8d3fef36 	bltu	r17,r20,1000a0c8 <__alt_data_end+0xf800a0c8>
1000a10c:	9005883a 	mov	r2,r18
1000a110:	00000406 	br	1000a124 <_fputwc_r+0x108>
1000a114:	80c0030b 	ldhu	r3,12(r16)
1000a118:	a005883a 	mov	r2,r20
1000a11c:	18c01014 	ori	r3,r3,64
1000a120:	80c0030d 	sth	r3,12(r16)
1000a124:	dfc00717 	ldw	ra,28(sp)
1000a128:	dd400617 	ldw	r21,24(sp)
1000a12c:	dd000517 	ldw	r20,20(sp)
1000a130:	dcc00417 	ldw	r19,16(sp)
1000a134:	dc800317 	ldw	r18,12(sp)
1000a138:	dc400217 	ldw	r17,8(sp)
1000a13c:	dc000117 	ldw	r16,4(sp)
1000a140:	dec00804 	addi	sp,sp,32
1000a144:	f800283a 	ret
1000a148:	9809883a 	mov	r4,r19
1000a14c:	29403fcc 	andi	r5,r5,255
1000a150:	800d883a 	mov	r6,r16
1000a154:	000a35c0 	call	1000a35c <__swbuf_r>
1000a158:	10bfffe0 	cmpeqi	r2,r2,-1
1000a15c:	10803fcc 	andi	r2,r2,255
1000a160:	103fd626 	beq	r2,zero,1000a0bc <__alt_data_end+0xf800a0bc>
1000a164:	00bfffc4 	movi	r2,-1
1000a168:	003fee06 	br	1000a124 <__alt_data_end+0xf800a124>
1000a16c:	90ffffc4 	addi	r3,r18,-1
1000a170:	01003f84 	movi	r4,254
1000a174:	20ffbf36 	bltu	r4,r3,1000a074 <__alt_data_end+0xf800a074>
1000a178:	900b883a 	mov	r5,r18
1000a17c:	dc800005 	stb	r18,0(sp)
1000a180:	1029883a 	mov	r20,r2
1000a184:	003fc506 	br	1000a09c <__alt_data_end+0xf800a09c>
1000a188:	9809883a 	mov	r4,r19
1000a18c:	a80b883a 	mov	r5,r21
1000a190:	800d883a 	mov	r6,r16
1000a194:	000a35c0 	call	1000a35c <__swbuf_r>
1000a198:	10bfffe0 	cmpeqi	r2,r2,-1
1000a19c:	003fef06 	br	1000a15c <__alt_data_end+0xf800a15c>

1000a1a0 <fputwc>:
1000a1a0:	defffc04 	addi	sp,sp,-16
1000a1a4:	dc000115 	stw	r16,4(sp)
1000a1a8:	04040074 	movhi	r16,4097
1000a1ac:	840a9904 	addi	r16,r16,10852
1000a1b0:	dc400215 	stw	r17,8(sp)
1000a1b4:	2023883a 	mov	r17,r4
1000a1b8:	81000017 	ldw	r4,0(r16)
1000a1bc:	dfc00315 	stw	ra,12(sp)
1000a1c0:	280d883a 	mov	r6,r5
1000a1c4:	20000626 	beq	r4,zero,1000a1e0 <fputwc+0x40>
1000a1c8:	20800e17 	ldw	r2,56(r4)
1000a1cc:	1000041e 	bne	r2,zero,1000a1e0 <fputwc+0x40>
1000a1d0:	d9400015 	stw	r5,0(sp)
1000a1d4:	00057740 	call	10005774 <__sinit>
1000a1d8:	81000017 	ldw	r4,0(r16)
1000a1dc:	d9800017 	ldw	r6,0(sp)
1000a1e0:	880b883a 	mov	r5,r17
1000a1e4:	dfc00317 	ldw	ra,12(sp)
1000a1e8:	dc400217 	ldw	r17,8(sp)
1000a1ec:	dc000117 	ldw	r16,4(sp)
1000a1f0:	dec00404 	addi	sp,sp,16
1000a1f4:	000a01c1 	jmpi	1000a01c <_fputwc_r>

1000a1f8 <_fstat_r>:
1000a1f8:	defffd04 	addi	sp,sp,-12
1000a1fc:	dc000015 	stw	r16,0(sp)
1000a200:	04040074 	movhi	r16,4097
1000a204:	dc400115 	stw	r17,4(sp)
1000a208:	8412f804 	addi	r16,r16,19424
1000a20c:	2023883a 	mov	r17,r4
1000a210:	2809883a 	mov	r4,r5
1000a214:	300b883a 	mov	r5,r6
1000a218:	dfc00215 	stw	ra,8(sp)
1000a21c:	80000015 	stw	zero,0(r16)
1000a220:	000de1c0 	call	1000de1c <fstat>
1000a224:	00ffffc4 	movi	r3,-1
1000a228:	10c00526 	beq	r2,r3,1000a240 <_fstat_r+0x48>
1000a22c:	dfc00217 	ldw	ra,8(sp)
1000a230:	dc400117 	ldw	r17,4(sp)
1000a234:	dc000017 	ldw	r16,0(sp)
1000a238:	dec00304 	addi	sp,sp,12
1000a23c:	f800283a 	ret
1000a240:	80c00017 	ldw	r3,0(r16)
1000a244:	183ff926 	beq	r3,zero,1000a22c <__alt_data_end+0xf800a22c>
1000a248:	88c00015 	stw	r3,0(r17)
1000a24c:	003ff706 	br	1000a22c <__alt_data_end+0xf800a22c>

1000a250 <_isatty_r>:
1000a250:	defffd04 	addi	sp,sp,-12
1000a254:	dc000015 	stw	r16,0(sp)
1000a258:	04040074 	movhi	r16,4097
1000a25c:	dc400115 	stw	r17,4(sp)
1000a260:	8412f804 	addi	r16,r16,19424
1000a264:	2023883a 	mov	r17,r4
1000a268:	2809883a 	mov	r4,r5
1000a26c:	dfc00215 	stw	ra,8(sp)
1000a270:	80000015 	stw	zero,0(r16)
1000a274:	000df240 	call	1000df24 <isatty>
1000a278:	00ffffc4 	movi	r3,-1
1000a27c:	10c00526 	beq	r2,r3,1000a294 <_isatty_r+0x44>
1000a280:	dfc00217 	ldw	ra,8(sp)
1000a284:	dc400117 	ldw	r17,4(sp)
1000a288:	dc000017 	ldw	r16,0(sp)
1000a28c:	dec00304 	addi	sp,sp,12
1000a290:	f800283a 	ret
1000a294:	80c00017 	ldw	r3,0(r16)
1000a298:	183ff926 	beq	r3,zero,1000a280 <__alt_data_end+0xf800a280>
1000a29c:	88c00015 	stw	r3,0(r17)
1000a2a0:	003ff706 	br	1000a280 <__alt_data_end+0xf800a280>

1000a2a4 <_lseek_r>:
1000a2a4:	defffd04 	addi	sp,sp,-12
1000a2a8:	dc000015 	stw	r16,0(sp)
1000a2ac:	04040074 	movhi	r16,4097
1000a2b0:	dc400115 	stw	r17,4(sp)
1000a2b4:	8412f804 	addi	r16,r16,19424
1000a2b8:	2023883a 	mov	r17,r4
1000a2bc:	2809883a 	mov	r4,r5
1000a2c0:	300b883a 	mov	r5,r6
1000a2c4:	380d883a 	mov	r6,r7
1000a2c8:	dfc00215 	stw	ra,8(sp)
1000a2cc:	80000015 	stw	zero,0(r16)
1000a2d0:	000e1040 	call	1000e104 <lseek>
1000a2d4:	00ffffc4 	movi	r3,-1
1000a2d8:	10c00526 	beq	r2,r3,1000a2f0 <_lseek_r+0x4c>
1000a2dc:	dfc00217 	ldw	ra,8(sp)
1000a2e0:	dc400117 	ldw	r17,4(sp)
1000a2e4:	dc000017 	ldw	r16,0(sp)
1000a2e8:	dec00304 	addi	sp,sp,12
1000a2ec:	f800283a 	ret
1000a2f0:	80c00017 	ldw	r3,0(r16)
1000a2f4:	183ff926 	beq	r3,zero,1000a2dc <__alt_data_end+0xf800a2dc>
1000a2f8:	88c00015 	stw	r3,0(r17)
1000a2fc:	003ff706 	br	1000a2dc <__alt_data_end+0xf800a2dc>

1000a300 <_read_r>:
1000a300:	defffd04 	addi	sp,sp,-12
1000a304:	dc000015 	stw	r16,0(sp)
1000a308:	04040074 	movhi	r16,4097
1000a30c:	dc400115 	stw	r17,4(sp)
1000a310:	8412f804 	addi	r16,r16,19424
1000a314:	2023883a 	mov	r17,r4
1000a318:	2809883a 	mov	r4,r5
1000a31c:	300b883a 	mov	r5,r6
1000a320:	380d883a 	mov	r6,r7
1000a324:	dfc00215 	stw	ra,8(sp)
1000a328:	80000015 	stw	zero,0(r16)
1000a32c:	000e2e80 	call	1000e2e8 <read>
1000a330:	00ffffc4 	movi	r3,-1
1000a334:	10c00526 	beq	r2,r3,1000a34c <_read_r+0x4c>
1000a338:	dfc00217 	ldw	ra,8(sp)
1000a33c:	dc400117 	ldw	r17,4(sp)
1000a340:	dc000017 	ldw	r16,0(sp)
1000a344:	dec00304 	addi	sp,sp,12
1000a348:	f800283a 	ret
1000a34c:	80c00017 	ldw	r3,0(r16)
1000a350:	183ff926 	beq	r3,zero,1000a338 <__alt_data_end+0xf800a338>
1000a354:	88c00015 	stw	r3,0(r17)
1000a358:	003ff706 	br	1000a338 <__alt_data_end+0xf800a338>

1000a35c <__swbuf_r>:
1000a35c:	defffc04 	addi	sp,sp,-16
1000a360:	dc800215 	stw	r18,8(sp)
1000a364:	dc400115 	stw	r17,4(sp)
1000a368:	dc000015 	stw	r16,0(sp)
1000a36c:	dfc00315 	stw	ra,12(sp)
1000a370:	2025883a 	mov	r18,r4
1000a374:	2823883a 	mov	r17,r5
1000a378:	3021883a 	mov	r16,r6
1000a37c:	20000226 	beq	r4,zero,1000a388 <__swbuf_r+0x2c>
1000a380:	20800e17 	ldw	r2,56(r4)
1000a384:	10004126 	beq	r2,zero,1000a48c <__swbuf_r+0x130>
1000a388:	80c00617 	ldw	r3,24(r16)
1000a38c:	8180030b 	ldhu	r6,12(r16)
1000a390:	80c00215 	stw	r3,8(r16)
1000a394:	30c0020c 	andi	r3,r6,8
1000a398:	18003526 	beq	r3,zero,1000a470 <__swbuf_r+0x114>
1000a39c:	80c00417 	ldw	r3,16(r16)
1000a3a0:	18003326 	beq	r3,zero,1000a470 <__swbuf_r+0x114>
1000a3a4:	3088000c 	andi	r2,r6,8192
1000a3a8:	8c403fcc 	andi	r17,r17,255
1000a3ac:	10001726 	beq	r2,zero,1000a40c <__swbuf_r+0xb0>
1000a3b0:	80800017 	ldw	r2,0(r16)
1000a3b4:	81000517 	ldw	r4,20(r16)
1000a3b8:	10c7c83a 	sub	r3,r2,r3
1000a3bc:	19001d0e 	bge	r3,r4,1000a434 <__swbuf_r+0xd8>
1000a3c0:	18c00044 	addi	r3,r3,1
1000a3c4:	81400217 	ldw	r5,8(r16)
1000a3c8:	11000044 	addi	r4,r2,1
1000a3cc:	81000015 	stw	r4,0(r16)
1000a3d0:	297fffc4 	addi	r5,r5,-1
1000a3d4:	81400215 	stw	r5,8(r16)
1000a3d8:	14400005 	stb	r17,0(r2)
1000a3dc:	80800517 	ldw	r2,20(r16)
1000a3e0:	10c01d26 	beq	r2,r3,1000a458 <__swbuf_r+0xfc>
1000a3e4:	8080030b 	ldhu	r2,12(r16)
1000a3e8:	1080004c 	andi	r2,r2,1
1000a3ec:	1000181e 	bne	r2,zero,1000a450 <__swbuf_r+0xf4>
1000a3f0:	8805883a 	mov	r2,r17
1000a3f4:	dfc00317 	ldw	ra,12(sp)
1000a3f8:	dc800217 	ldw	r18,8(sp)
1000a3fc:	dc400117 	ldw	r17,4(sp)
1000a400:	dc000017 	ldw	r16,0(sp)
1000a404:	dec00404 	addi	sp,sp,16
1000a408:	f800283a 	ret
1000a40c:	81001917 	ldw	r4,100(r16)
1000a410:	00b7ffc4 	movi	r2,-8193
1000a414:	31880014 	ori	r6,r6,8192
1000a418:	2084703a 	and	r2,r4,r2
1000a41c:	80801915 	stw	r2,100(r16)
1000a420:	80800017 	ldw	r2,0(r16)
1000a424:	81000517 	ldw	r4,20(r16)
1000a428:	8180030d 	sth	r6,12(r16)
1000a42c:	10c7c83a 	sub	r3,r2,r3
1000a430:	193fe316 	blt	r3,r4,1000a3c0 <__alt_data_end+0xf800a3c0>
1000a434:	9009883a 	mov	r4,r18
1000a438:	800b883a 	mov	r5,r16
1000a43c:	00051b80 	call	100051b8 <_fflush_r>
1000a440:	1000091e 	bne	r2,zero,1000a468 <__swbuf_r+0x10c>
1000a444:	80800017 	ldw	r2,0(r16)
1000a448:	00c00044 	movi	r3,1
1000a44c:	003fdd06 	br	1000a3c4 <__alt_data_end+0xf800a3c4>
1000a450:	00800284 	movi	r2,10
1000a454:	88bfe61e 	bne	r17,r2,1000a3f0 <__alt_data_end+0xf800a3f0>
1000a458:	9009883a 	mov	r4,r18
1000a45c:	800b883a 	mov	r5,r16
1000a460:	00051b80 	call	100051b8 <_fflush_r>
1000a464:	103fe226 	beq	r2,zero,1000a3f0 <__alt_data_end+0xf800a3f0>
1000a468:	00bfffc4 	movi	r2,-1
1000a46c:	003fe106 	br	1000a3f4 <__alt_data_end+0xf800a3f4>
1000a470:	9009883a 	mov	r4,r18
1000a474:	800b883a 	mov	r5,r16
1000a478:	00037380 	call	10003738 <__swsetup_r>
1000a47c:	1000051e 	bne	r2,zero,1000a494 <__swbuf_r+0x138>
1000a480:	8180030b 	ldhu	r6,12(r16)
1000a484:	80c00417 	ldw	r3,16(r16)
1000a488:	003fc606 	br	1000a3a4 <__alt_data_end+0xf800a3a4>
1000a48c:	00057740 	call	10005774 <__sinit>
1000a490:	003fbd06 	br	1000a388 <__alt_data_end+0xf800a388>
1000a494:	80c0030b 	ldhu	r3,12(r16)
1000a498:	00bfffc4 	movi	r2,-1
1000a49c:	18c01014 	ori	r3,r3,64
1000a4a0:	80c0030d 	sth	r3,12(r16)
1000a4a4:	00c00244 	movi	r3,9
1000a4a8:	90c00015 	stw	r3,0(r18)
1000a4ac:	003fd106 	br	1000a3f4 <__alt_data_end+0xf800a3f4>

1000a4b0 <__swbuf>:
1000a4b0:	00c40074 	movhi	r3,4097
1000a4b4:	18ca9904 	addi	r3,r3,10852
1000a4b8:	2005883a 	mov	r2,r4
1000a4bc:	19000017 	ldw	r4,0(r3)
1000a4c0:	280d883a 	mov	r6,r5
1000a4c4:	100b883a 	mov	r5,r2
1000a4c8:	000a35c1 	jmpi	1000a35c <__swbuf_r>

1000a4cc <_wcrtomb_r>:
1000a4cc:	defff604 	addi	sp,sp,-40
1000a4d0:	00840074 	movhi	r2,4097
1000a4d4:	dc800815 	stw	r18,32(sp)
1000a4d8:	dc400715 	stw	r17,28(sp)
1000a4dc:	dc000615 	stw	r16,24(sp)
1000a4e0:	108a9d04 	addi	r2,r2,10868
1000a4e4:	dfc00915 	stw	ra,36(sp)
1000a4e8:	2021883a 	mov	r16,r4
1000a4ec:	3823883a 	mov	r17,r7
1000a4f0:	14800017 	ldw	r18,0(r2)
1000a4f4:	28001426 	beq	r5,zero,1000a548 <_wcrtomb_r+0x7c>
1000a4f8:	d9400415 	stw	r5,16(sp)
1000a4fc:	d9800515 	stw	r6,20(sp)
1000a500:	00062680 	call	10006268 <__locale_charset>
1000a504:	d9400417 	ldw	r5,16(sp)
1000a508:	d9800517 	ldw	r6,20(sp)
1000a50c:	8009883a 	mov	r4,r16
1000a510:	dc400015 	stw	r17,0(sp)
1000a514:	100f883a 	mov	r7,r2
1000a518:	903ee83a 	callr	r18
1000a51c:	00ffffc4 	movi	r3,-1
1000a520:	10c0031e 	bne	r2,r3,1000a530 <_wcrtomb_r+0x64>
1000a524:	88000015 	stw	zero,0(r17)
1000a528:	00c02284 	movi	r3,138
1000a52c:	80c00015 	stw	r3,0(r16)
1000a530:	dfc00917 	ldw	ra,36(sp)
1000a534:	dc800817 	ldw	r18,32(sp)
1000a538:	dc400717 	ldw	r17,28(sp)
1000a53c:	dc000617 	ldw	r16,24(sp)
1000a540:	dec00a04 	addi	sp,sp,40
1000a544:	f800283a 	ret
1000a548:	00062680 	call	10006268 <__locale_charset>
1000a54c:	8009883a 	mov	r4,r16
1000a550:	dc400015 	stw	r17,0(sp)
1000a554:	d9400104 	addi	r5,sp,4
1000a558:	000d883a 	mov	r6,zero
1000a55c:	100f883a 	mov	r7,r2
1000a560:	903ee83a 	callr	r18
1000a564:	003fed06 	br	1000a51c <__alt_data_end+0xf800a51c>

1000a568 <wcrtomb>:
1000a568:	defff504 	addi	sp,sp,-44
1000a56c:	dc400515 	stw	r17,20(sp)
1000a570:	dc000415 	stw	r16,16(sp)
1000a574:	dfc00a15 	stw	ra,40(sp)
1000a578:	dd400915 	stw	r21,36(sp)
1000a57c:	dd000815 	stw	r20,32(sp)
1000a580:	dcc00715 	stw	r19,28(sp)
1000a584:	dc800615 	stw	r18,24(sp)
1000a588:	2021883a 	mov	r16,r4
1000a58c:	3023883a 	mov	r17,r6
1000a590:	20001d26 	beq	r4,zero,1000a608 <wcrtomb+0xa0>
1000a594:	04840074 	movhi	r18,4097
1000a598:	948a9904 	addi	r18,r18,10852
1000a59c:	00840074 	movhi	r2,4097
1000a5a0:	95400017 	ldw	r21,0(r18)
1000a5a4:	108a9d04 	addi	r2,r2,10868
1000a5a8:	15000017 	ldw	r20,0(r2)
1000a5ac:	2827883a 	mov	r19,r5
1000a5b0:	00062680 	call	10006268 <__locale_charset>
1000a5b4:	a809883a 	mov	r4,r21
1000a5b8:	dc400015 	stw	r17,0(sp)
1000a5bc:	800b883a 	mov	r5,r16
1000a5c0:	980d883a 	mov	r6,r19
1000a5c4:	100f883a 	mov	r7,r2
1000a5c8:	a03ee83a 	callr	r20
1000a5cc:	00ffffc4 	movi	r3,-1
1000a5d0:	10c0041e 	bne	r2,r3,1000a5e4 <wcrtomb+0x7c>
1000a5d4:	90c00017 	ldw	r3,0(r18)
1000a5d8:	01002284 	movi	r4,138
1000a5dc:	88000015 	stw	zero,0(r17)
1000a5e0:	19000015 	stw	r4,0(r3)
1000a5e4:	dfc00a17 	ldw	ra,40(sp)
1000a5e8:	dd400917 	ldw	r21,36(sp)
1000a5ec:	dd000817 	ldw	r20,32(sp)
1000a5f0:	dcc00717 	ldw	r19,28(sp)
1000a5f4:	dc800617 	ldw	r18,24(sp)
1000a5f8:	dc400517 	ldw	r17,20(sp)
1000a5fc:	dc000417 	ldw	r16,16(sp)
1000a600:	dec00b04 	addi	sp,sp,44
1000a604:	f800283a 	ret
1000a608:	04840074 	movhi	r18,4097
1000a60c:	948a9904 	addi	r18,r18,10852
1000a610:	00840074 	movhi	r2,4097
1000a614:	94c00017 	ldw	r19,0(r18)
1000a618:	108a9d04 	addi	r2,r2,10868
1000a61c:	14000017 	ldw	r16,0(r2)
1000a620:	00062680 	call	10006268 <__locale_charset>
1000a624:	9809883a 	mov	r4,r19
1000a628:	dc400015 	stw	r17,0(sp)
1000a62c:	d9400104 	addi	r5,sp,4
1000a630:	000d883a 	mov	r6,zero
1000a634:	100f883a 	mov	r7,r2
1000a638:	803ee83a 	callr	r16
1000a63c:	003fe306 	br	1000a5cc <__alt_data_end+0xf800a5cc>

1000a640 <__ascii_wctomb>:
1000a640:	28000526 	beq	r5,zero,1000a658 <__ascii_wctomb+0x18>
1000a644:	00803fc4 	movi	r2,255
1000a648:	11800536 	bltu	r2,r6,1000a660 <__ascii_wctomb+0x20>
1000a64c:	29800005 	stb	r6,0(r5)
1000a650:	00800044 	movi	r2,1
1000a654:	f800283a 	ret
1000a658:	0005883a 	mov	r2,zero
1000a65c:	f800283a 	ret
1000a660:	00802284 	movi	r2,138
1000a664:	20800015 	stw	r2,0(r4)
1000a668:	00bfffc4 	movi	r2,-1
1000a66c:	f800283a 	ret

1000a670 <_wctomb_r>:
1000a670:	00840074 	movhi	r2,4097
1000a674:	defff904 	addi	sp,sp,-28
1000a678:	108a9d04 	addi	r2,r2,10868
1000a67c:	dfc00615 	stw	ra,24(sp)
1000a680:	dc400515 	stw	r17,20(sp)
1000a684:	dc000415 	stw	r16,16(sp)
1000a688:	3823883a 	mov	r17,r7
1000a68c:	14000017 	ldw	r16,0(r2)
1000a690:	d9000115 	stw	r4,4(sp)
1000a694:	d9400215 	stw	r5,8(sp)
1000a698:	d9800315 	stw	r6,12(sp)
1000a69c:	00062680 	call	10006268 <__locale_charset>
1000a6a0:	d9000117 	ldw	r4,4(sp)
1000a6a4:	d9400217 	ldw	r5,8(sp)
1000a6a8:	d9800317 	ldw	r6,12(sp)
1000a6ac:	dc400015 	stw	r17,0(sp)
1000a6b0:	100f883a 	mov	r7,r2
1000a6b4:	803ee83a 	callr	r16
1000a6b8:	dfc00617 	ldw	ra,24(sp)
1000a6bc:	dc400517 	ldw	r17,20(sp)
1000a6c0:	dc000417 	ldw	r16,16(sp)
1000a6c4:	dec00704 	addi	sp,sp,28
1000a6c8:	f800283a 	ret

1000a6cc <__udivdi3>:
1000a6cc:	defff504 	addi	sp,sp,-44
1000a6d0:	dcc00415 	stw	r19,16(sp)
1000a6d4:	dc000115 	stw	r16,4(sp)
1000a6d8:	dfc00a15 	stw	ra,40(sp)
1000a6dc:	df000915 	stw	fp,36(sp)
1000a6e0:	ddc00815 	stw	r23,32(sp)
1000a6e4:	dd800715 	stw	r22,28(sp)
1000a6e8:	dd400615 	stw	r21,24(sp)
1000a6ec:	dd000515 	stw	r20,20(sp)
1000a6f0:	dc800315 	stw	r18,12(sp)
1000a6f4:	dc400215 	stw	r17,8(sp)
1000a6f8:	2027883a 	mov	r19,r4
1000a6fc:	2821883a 	mov	r16,r5
1000a700:	3800471e 	bne	r7,zero,1000a820 <__udivdi3+0x154>
1000a704:	3025883a 	mov	r18,r6
1000a708:	2023883a 	mov	r17,r4
1000a70c:	2980592e 	bgeu	r5,r6,1000a874 <__udivdi3+0x1a8>
1000a710:	00bfffd4 	movui	r2,65535
1000a714:	2829883a 	mov	r20,r5
1000a718:	1180b236 	bltu	r2,r6,1000a9e4 <__udivdi3+0x318>
1000a71c:	00803fc4 	movi	r2,255
1000a720:	1181622e 	bgeu	r2,r6,1000acac <__udivdi3+0x5e0>
1000a724:	00800204 	movi	r2,8
1000a728:	1007883a 	mov	r3,r2
1000a72c:	3084d83a 	srl	r2,r6,r2
1000a730:	01040074 	movhi	r4,4097
1000a734:	21021104 	addi	r4,r4,2116
1000a738:	2085883a 	add	r2,r4,r2
1000a73c:	11000003 	ldbu	r4,0(r2)
1000a740:	20c9883a 	add	r4,r4,r3
1000a744:	00c00804 	movi	r3,32
1000a748:	1907c83a 	sub	r3,r3,r4
1000a74c:	18000526 	beq	r3,zero,1000a764 <__udivdi3+0x98>
1000a750:	80e0983a 	sll	r16,r16,r3
1000a754:	9908d83a 	srl	r4,r19,r4
1000a758:	30e4983a 	sll	r18,r6,r3
1000a75c:	98e2983a 	sll	r17,r19,r3
1000a760:	8128b03a 	or	r20,r16,r4
1000a764:	902ad43a 	srli	r21,r18,16
1000a768:	a009883a 	mov	r4,r20
1000a76c:	95bfffcc 	andi	r22,r18,65535
1000a770:	a80b883a 	mov	r5,r21
1000a774:	000b44c0 	call	1000b44c <__umodsi3>
1000a778:	a009883a 	mov	r4,r20
1000a77c:	a80b883a 	mov	r5,r21
1000a780:	102f883a 	mov	r23,r2
1000a784:	000b4440 	call	1000b444 <__udivsi3>
1000a788:	1009883a 	mov	r4,r2
1000a78c:	b00b883a 	mov	r5,r22
1000a790:	1021883a 	mov	r16,r2
1000a794:	000b4540 	call	1000b454 <__mulsi3>
1000a798:	b82e943a 	slli	r23,r23,16
1000a79c:	8808d43a 	srli	r4,r17,16
1000a7a0:	b906b03a 	or	r3,r23,r4
1000a7a4:	1880052e 	bgeu	r3,r2,1000a7bc <__udivdi3+0xf0>
1000a7a8:	1c87883a 	add	r3,r3,r18
1000a7ac:	813fffc4 	addi	r4,r16,-1
1000a7b0:	1c800136 	bltu	r3,r18,1000a7b8 <__udivdi3+0xec>
1000a7b4:	18815236 	bltu	r3,r2,1000ad00 <__udivdi3+0x634>
1000a7b8:	2021883a 	mov	r16,r4
1000a7bc:	18a7c83a 	sub	r19,r3,r2
1000a7c0:	9809883a 	mov	r4,r19
1000a7c4:	a80b883a 	mov	r5,r21
1000a7c8:	000b44c0 	call	1000b44c <__umodsi3>
1000a7cc:	1029883a 	mov	r20,r2
1000a7d0:	9809883a 	mov	r4,r19
1000a7d4:	a80b883a 	mov	r5,r21
1000a7d8:	a028943a 	slli	r20,r20,16
1000a7dc:	000b4440 	call	1000b444 <__udivsi3>
1000a7e0:	1009883a 	mov	r4,r2
1000a7e4:	b00b883a 	mov	r5,r22
1000a7e8:	8c7fffcc 	andi	r17,r17,65535
1000a7ec:	1027883a 	mov	r19,r2
1000a7f0:	a462b03a 	or	r17,r20,r17
1000a7f4:	000b4540 	call	1000b454 <__mulsi3>
1000a7f8:	8880052e 	bgeu	r17,r2,1000a810 <__udivdi3+0x144>
1000a7fc:	8ca3883a 	add	r17,r17,r18
1000a800:	98ffffc4 	addi	r3,r19,-1
1000a804:	8c811036 	bltu	r17,r18,1000ac48 <__udivdi3+0x57c>
1000a808:	88810f2e 	bgeu	r17,r2,1000ac48 <__udivdi3+0x57c>
1000a80c:	9cffff84 	addi	r19,r19,-2
1000a810:	8020943a 	slli	r16,r16,16
1000a814:	0007883a 	mov	r3,zero
1000a818:	9c04b03a 	or	r2,r19,r16
1000a81c:	00006006 	br	1000a9a0 <__udivdi3+0x2d4>
1000a820:	29c05d36 	bltu	r5,r7,1000a998 <__udivdi3+0x2cc>
1000a824:	00bfffd4 	movui	r2,65535
1000a828:	11c0692e 	bgeu	r2,r7,1000a9d0 <__udivdi3+0x304>
1000a82c:	00804034 	movhi	r2,256
1000a830:	10bfffc4 	addi	r2,r2,-1
1000a834:	11c10e2e 	bgeu	r2,r7,1000ac70 <__udivdi3+0x5a4>
1000a838:	01400604 	movi	r5,24
1000a83c:	2811883a 	mov	r8,r5
1000a840:	394ad83a 	srl	r5,r7,r5
1000a844:	00840074 	movhi	r2,4097
1000a848:	10821104 	addi	r2,r2,2116
1000a84c:	114b883a 	add	r5,r2,r5
1000a850:	29400003 	ldbu	r5,0(r5)
1000a854:	00c00804 	movi	r3,32
1000a858:	2a0b883a 	add	r5,r5,r8
1000a85c:	196fc83a 	sub	r23,r3,r5
1000a860:	b8006b1e 	bne	r23,zero,1000aa10 <__udivdi3+0x344>
1000a864:	3c011436 	bltu	r7,r16,1000acb8 <__udivdi3+0x5ec>
1000a868:	9985403a 	cmpgeu	r2,r19,r6
1000a86c:	0007883a 	mov	r3,zero
1000a870:	00004b06 	br	1000a9a0 <__udivdi3+0x2d4>
1000a874:	3000041e 	bne	r6,zero,1000a888 <__udivdi3+0x1bc>
1000a878:	01000044 	movi	r4,1
1000a87c:	000b883a 	mov	r5,zero
1000a880:	000b4440 	call	1000b444 <__udivsi3>
1000a884:	1025883a 	mov	r18,r2
1000a888:	00bfffd4 	movui	r2,65535
1000a88c:	14805b2e 	bgeu	r2,r18,1000a9fc <__udivdi3+0x330>
1000a890:	00804034 	movhi	r2,256
1000a894:	10bfffc4 	addi	r2,r2,-1
1000a898:	1480fe2e 	bgeu	r2,r18,1000ac94 <__udivdi3+0x5c8>
1000a89c:	00800604 	movi	r2,24
1000a8a0:	1007883a 	mov	r3,r2
1000a8a4:	9084d83a 	srl	r2,r18,r2
1000a8a8:	01040074 	movhi	r4,4097
1000a8ac:	21021104 	addi	r4,r4,2116
1000a8b0:	2085883a 	add	r2,r4,r2
1000a8b4:	11800003 	ldbu	r6,0(r2)
1000a8b8:	01c00804 	movi	r7,32
1000a8bc:	30c7883a 	add	r3,r6,r3
1000a8c0:	38cfc83a 	sub	r7,r7,r3
1000a8c4:	3800a71e 	bne	r7,zero,1000ab64 <__udivdi3+0x498>
1000a8c8:	9028d43a 	srli	r20,r18,16
1000a8cc:	84a1c83a 	sub	r16,r16,r18
1000a8d0:	957fffcc 	andi	r21,r18,65535
1000a8d4:	00c00044 	movi	r3,1
1000a8d8:	8009883a 	mov	r4,r16
1000a8dc:	a00b883a 	mov	r5,r20
1000a8e0:	d8c00015 	stw	r3,0(sp)
1000a8e4:	000b44c0 	call	1000b44c <__umodsi3>
1000a8e8:	8009883a 	mov	r4,r16
1000a8ec:	a00b883a 	mov	r5,r20
1000a8f0:	102d883a 	mov	r22,r2
1000a8f4:	000b4440 	call	1000b444 <__udivsi3>
1000a8f8:	1009883a 	mov	r4,r2
1000a8fc:	a80b883a 	mov	r5,r21
1000a900:	1021883a 	mov	r16,r2
1000a904:	000b4540 	call	1000b454 <__mulsi3>
1000a908:	b02c943a 	slli	r22,r22,16
1000a90c:	880ed43a 	srli	r7,r17,16
1000a910:	d8c00017 	ldw	r3,0(sp)
1000a914:	b1ccb03a 	or	r6,r22,r7
1000a918:	3080052e 	bgeu	r6,r2,1000a930 <__udivdi3+0x264>
1000a91c:	348d883a 	add	r6,r6,r18
1000a920:	813fffc4 	addi	r4,r16,-1
1000a924:	34800136 	bltu	r6,r18,1000a92c <__udivdi3+0x260>
1000a928:	3080f236 	bltu	r6,r2,1000acf4 <__udivdi3+0x628>
1000a92c:	2021883a 	mov	r16,r4
1000a930:	30a7c83a 	sub	r19,r6,r2
1000a934:	9809883a 	mov	r4,r19
1000a938:	a00b883a 	mov	r5,r20
1000a93c:	d8c00015 	stw	r3,0(sp)
1000a940:	000b44c0 	call	1000b44c <__umodsi3>
1000a944:	102d883a 	mov	r22,r2
1000a948:	9809883a 	mov	r4,r19
1000a94c:	a00b883a 	mov	r5,r20
1000a950:	b02c943a 	slli	r22,r22,16
1000a954:	000b4440 	call	1000b444 <__udivsi3>
1000a958:	1009883a 	mov	r4,r2
1000a95c:	a80b883a 	mov	r5,r21
1000a960:	8c7fffcc 	andi	r17,r17,65535
1000a964:	1027883a 	mov	r19,r2
1000a968:	b462b03a 	or	r17,r22,r17
1000a96c:	000b4540 	call	1000b454 <__mulsi3>
1000a970:	d8c00017 	ldw	r3,0(sp)
1000a974:	8880052e 	bgeu	r17,r2,1000a98c <__udivdi3+0x2c0>
1000a978:	8ca3883a 	add	r17,r17,r18
1000a97c:	993fffc4 	addi	r4,r19,-1
1000a980:	8c80af36 	bltu	r17,r18,1000ac40 <__udivdi3+0x574>
1000a984:	8880ae2e 	bgeu	r17,r2,1000ac40 <__udivdi3+0x574>
1000a988:	9cffff84 	addi	r19,r19,-2
1000a98c:	8020943a 	slli	r16,r16,16
1000a990:	9c04b03a 	or	r2,r19,r16
1000a994:	00000206 	br	1000a9a0 <__udivdi3+0x2d4>
1000a998:	0007883a 	mov	r3,zero
1000a99c:	0005883a 	mov	r2,zero
1000a9a0:	dfc00a17 	ldw	ra,40(sp)
1000a9a4:	df000917 	ldw	fp,36(sp)
1000a9a8:	ddc00817 	ldw	r23,32(sp)
1000a9ac:	dd800717 	ldw	r22,28(sp)
1000a9b0:	dd400617 	ldw	r21,24(sp)
1000a9b4:	dd000517 	ldw	r20,20(sp)
1000a9b8:	dcc00417 	ldw	r19,16(sp)
1000a9bc:	dc800317 	ldw	r18,12(sp)
1000a9c0:	dc400217 	ldw	r17,8(sp)
1000a9c4:	dc000117 	ldw	r16,4(sp)
1000a9c8:	dec00b04 	addi	sp,sp,44
1000a9cc:	f800283a 	ret
1000a9d0:	00803fc4 	movi	r2,255
1000a9d4:	11c0a92e 	bgeu	r2,r7,1000ac7c <__udivdi3+0x5b0>
1000a9d8:	01400204 	movi	r5,8
1000a9dc:	2811883a 	mov	r8,r5
1000a9e0:	003f9706 	br	1000a840 <__alt_data_end+0xf800a840>
1000a9e4:	00804034 	movhi	r2,256
1000a9e8:	10bfffc4 	addi	r2,r2,-1
1000a9ec:	1180a62e 	bgeu	r2,r6,1000ac88 <__udivdi3+0x5bc>
1000a9f0:	00800604 	movi	r2,24
1000a9f4:	1007883a 	mov	r3,r2
1000a9f8:	003f4c06 	br	1000a72c <__alt_data_end+0xf800a72c>
1000a9fc:	00803fc4 	movi	r2,255
1000aa00:	1480a72e 	bgeu	r2,r18,1000aca0 <__udivdi3+0x5d4>
1000aa04:	00800204 	movi	r2,8
1000aa08:	1007883a 	mov	r3,r2
1000aa0c:	003fa506 	br	1000a8a4 <__alt_data_end+0xf800a8a4>
1000aa10:	3178d83a 	srl	fp,r6,r5
1000aa14:	3dce983a 	sll	r7,r7,r23
1000aa18:	8168d83a 	srl	r20,r16,r5
1000aa1c:	9950d83a 	srl	r8,r19,r5
1000aa20:	3f38b03a 	or	fp,r7,fp
1000aa24:	e024d43a 	srli	r18,fp,16
1000aa28:	85e0983a 	sll	r16,r16,r23
1000aa2c:	a009883a 	mov	r4,r20
1000aa30:	900b883a 	mov	r5,r18
1000aa34:	8220b03a 	or	r16,r16,r8
1000aa38:	35ea983a 	sll	r21,r6,r23
1000aa3c:	000b44c0 	call	1000b44c <__umodsi3>
1000aa40:	a009883a 	mov	r4,r20
1000aa44:	900b883a 	mov	r5,r18
1000aa48:	1023883a 	mov	r17,r2
1000aa4c:	e5bfffcc 	andi	r22,fp,65535
1000aa50:	000b4440 	call	1000b444 <__udivsi3>
1000aa54:	1009883a 	mov	r4,r2
1000aa58:	b00b883a 	mov	r5,r22
1000aa5c:	1029883a 	mov	r20,r2
1000aa60:	000b4540 	call	1000b454 <__mulsi3>
1000aa64:	8806943a 	slli	r3,r17,16
1000aa68:	8014d43a 	srli	r10,r16,16
1000aa6c:	1a92b03a 	or	r9,r3,r10
1000aa70:	4880042e 	bgeu	r9,r2,1000aa84 <__udivdi3+0x3b8>
1000aa74:	4f13883a 	add	r9,r9,fp
1000aa78:	a0ffffc4 	addi	r3,r20,-1
1000aa7c:	4f00952e 	bgeu	r9,fp,1000acd4 <__udivdi3+0x608>
1000aa80:	1829883a 	mov	r20,r3
1000aa84:	48a3c83a 	sub	r17,r9,r2
1000aa88:	8809883a 	mov	r4,r17
1000aa8c:	900b883a 	mov	r5,r18
1000aa90:	000b44c0 	call	1000b44c <__umodsi3>
1000aa94:	8809883a 	mov	r4,r17
1000aa98:	900b883a 	mov	r5,r18
1000aa9c:	d8800015 	stw	r2,0(sp)
1000aaa0:	000b4440 	call	1000b444 <__udivsi3>
1000aaa4:	1009883a 	mov	r4,r2
1000aaa8:	b00b883a 	mov	r5,r22
1000aaac:	1023883a 	mov	r17,r2
1000aab0:	000b4540 	call	1000b454 <__mulsi3>
1000aab4:	d8c00017 	ldw	r3,0(sp)
1000aab8:	823fffcc 	andi	r8,r16,65535
1000aabc:	1806943a 	slli	r3,r3,16
1000aac0:	1a20b03a 	or	r16,r3,r8
1000aac4:	8080042e 	bgeu	r16,r2,1000aad8 <__udivdi3+0x40c>
1000aac8:	8721883a 	add	r16,r16,fp
1000aacc:	88ffffc4 	addi	r3,r17,-1
1000aad0:	87007c2e 	bgeu	r16,fp,1000acc4 <__udivdi3+0x5f8>
1000aad4:	1823883a 	mov	r17,r3
1000aad8:	a028943a 	slli	r20,r20,16
1000aadc:	acbfffcc 	andi	r18,r21,65535
1000aae0:	900b883a 	mov	r5,r18
1000aae4:	8d28b03a 	or	r20,r17,r20
1000aae8:	a022d43a 	srli	r17,r20,16
1000aaec:	a5bfffcc 	andi	r22,r20,65535
1000aaf0:	b009883a 	mov	r4,r22
1000aaf4:	a82ad43a 	srli	r21,r21,16
1000aaf8:	80a1c83a 	sub	r16,r16,r2
1000aafc:	000b4540 	call	1000b454 <__mulsi3>
1000ab00:	8809883a 	mov	r4,r17
1000ab04:	900b883a 	mov	r5,r18
1000ab08:	1039883a 	mov	fp,r2
1000ab0c:	000b4540 	call	1000b454 <__mulsi3>
1000ab10:	8809883a 	mov	r4,r17
1000ab14:	a80b883a 	mov	r5,r21
1000ab18:	1025883a 	mov	r18,r2
1000ab1c:	000b4540 	call	1000b454 <__mulsi3>
1000ab20:	b009883a 	mov	r4,r22
1000ab24:	a80b883a 	mov	r5,r21
1000ab28:	1023883a 	mov	r17,r2
1000ab2c:	000b4540 	call	1000b454 <__mulsi3>
1000ab30:	e006d43a 	srli	r3,fp,16
1000ab34:	9085883a 	add	r2,r18,r2
1000ab38:	10c7883a 	add	r3,r2,r3
1000ab3c:	1c80022e 	bgeu	r3,r18,1000ab48 <__udivdi3+0x47c>
1000ab40:	00800074 	movhi	r2,1
1000ab44:	88a3883a 	add	r17,r17,r2
1000ab48:	1808d43a 	srli	r4,r3,16
1000ab4c:	8909883a 	add	r4,r17,r4
1000ab50:	81004436 	bltu	r16,r4,1000ac64 <__udivdi3+0x598>
1000ab54:	81003e26 	beq	r16,r4,1000ac50 <__udivdi3+0x584>
1000ab58:	a005883a 	mov	r2,r20
1000ab5c:	0007883a 	mov	r3,zero
1000ab60:	003f8f06 	br	1000a9a0 <__alt_data_end+0xf800a9a0>
1000ab64:	91e4983a 	sll	r18,r18,r7
1000ab68:	80eed83a 	srl	r23,r16,r3
1000ab6c:	81cc983a 	sll	r6,r16,r7
1000ab70:	9028d43a 	srli	r20,r18,16
1000ab74:	98c6d83a 	srl	r3,r19,r3
1000ab78:	b809883a 	mov	r4,r23
1000ab7c:	a00b883a 	mov	r5,r20
1000ab80:	30ecb03a 	or	r22,r6,r3
1000ab84:	99e2983a 	sll	r17,r19,r7
1000ab88:	000b44c0 	call	1000b44c <__umodsi3>
1000ab8c:	b809883a 	mov	r4,r23
1000ab90:	a00b883a 	mov	r5,r20
1000ab94:	1021883a 	mov	r16,r2
1000ab98:	957fffcc 	andi	r21,r18,65535
1000ab9c:	000b4440 	call	1000b444 <__udivsi3>
1000aba0:	a80b883a 	mov	r5,r21
1000aba4:	1009883a 	mov	r4,r2
1000aba8:	102f883a 	mov	r23,r2
1000abac:	000b4540 	call	1000b454 <__mulsi3>
1000abb0:	8020943a 	slli	r16,r16,16
1000abb4:	b00ad43a 	srli	r5,r22,16
1000abb8:	814cb03a 	or	r6,r16,r5
1000abbc:	3080062e 	bgeu	r6,r2,1000abd8 <__udivdi3+0x50c>
1000abc0:	348d883a 	add	r6,r6,r18
1000abc4:	b8ffffc4 	addi	r3,r23,-1
1000abc8:	34804836 	bltu	r6,r18,1000acec <__udivdi3+0x620>
1000abcc:	3080472e 	bgeu	r6,r2,1000acec <__udivdi3+0x620>
1000abd0:	bdffff84 	addi	r23,r23,-2
1000abd4:	348d883a 	add	r6,r6,r18
1000abd8:	30a7c83a 	sub	r19,r6,r2
1000abdc:	9809883a 	mov	r4,r19
1000abe0:	a00b883a 	mov	r5,r20
1000abe4:	000b44c0 	call	1000b44c <__umodsi3>
1000abe8:	9809883a 	mov	r4,r19
1000abec:	a00b883a 	mov	r5,r20
1000abf0:	1039883a 	mov	fp,r2
1000abf4:	000b4440 	call	1000b444 <__udivsi3>
1000abf8:	1009883a 	mov	r4,r2
1000abfc:	a80b883a 	mov	r5,r21
1000ac00:	e038943a 	slli	fp,fp,16
1000ac04:	1027883a 	mov	r19,r2
1000ac08:	000b4540 	call	1000b454 <__mulsi3>
1000ac0c:	b1bfffcc 	andi	r6,r22,65535
1000ac10:	e18cb03a 	or	r6,fp,r6
1000ac14:	3080062e 	bgeu	r6,r2,1000ac30 <__udivdi3+0x564>
1000ac18:	348d883a 	add	r6,r6,r18
1000ac1c:	98ffffc4 	addi	r3,r19,-1
1000ac20:	34803036 	bltu	r6,r18,1000ace4 <__udivdi3+0x618>
1000ac24:	30802f2e 	bgeu	r6,r2,1000ace4 <__udivdi3+0x618>
1000ac28:	9cffff84 	addi	r19,r19,-2
1000ac2c:	348d883a 	add	r6,r6,r18
1000ac30:	b82e943a 	slli	r23,r23,16
1000ac34:	30a1c83a 	sub	r16,r6,r2
1000ac38:	9dc6b03a 	or	r3,r19,r23
1000ac3c:	003f2606 	br	1000a8d8 <__alt_data_end+0xf800a8d8>
1000ac40:	2027883a 	mov	r19,r4
1000ac44:	003f5106 	br	1000a98c <__alt_data_end+0xf800a98c>
1000ac48:	1827883a 	mov	r19,r3
1000ac4c:	003ef006 	br	1000a810 <__alt_data_end+0xf800a810>
1000ac50:	1808943a 	slli	r4,r3,16
1000ac54:	9dc6983a 	sll	r3,r19,r23
1000ac58:	e73fffcc 	andi	fp,fp,65535
1000ac5c:	2709883a 	add	r4,r4,fp
1000ac60:	193fbd2e 	bgeu	r3,r4,1000ab58 <__alt_data_end+0xf800ab58>
1000ac64:	a0bfffc4 	addi	r2,r20,-1
1000ac68:	0007883a 	mov	r3,zero
1000ac6c:	003f4c06 	br	1000a9a0 <__alt_data_end+0xf800a9a0>
1000ac70:	01400404 	movi	r5,16
1000ac74:	2811883a 	mov	r8,r5
1000ac78:	003ef106 	br	1000a840 <__alt_data_end+0xf800a840>
1000ac7c:	000b883a 	mov	r5,zero
1000ac80:	0011883a 	mov	r8,zero
1000ac84:	003eee06 	br	1000a840 <__alt_data_end+0xf800a840>
1000ac88:	00800404 	movi	r2,16
1000ac8c:	1007883a 	mov	r3,r2
1000ac90:	003ea606 	br	1000a72c <__alt_data_end+0xf800a72c>
1000ac94:	00800404 	movi	r2,16
1000ac98:	1007883a 	mov	r3,r2
1000ac9c:	003f0106 	br	1000a8a4 <__alt_data_end+0xf800a8a4>
1000aca0:	0005883a 	mov	r2,zero
1000aca4:	0007883a 	mov	r3,zero
1000aca8:	003efe06 	br	1000a8a4 <__alt_data_end+0xf800a8a4>
1000acac:	0005883a 	mov	r2,zero
1000acb0:	0007883a 	mov	r3,zero
1000acb4:	003e9d06 	br	1000a72c <__alt_data_end+0xf800a72c>
1000acb8:	0007883a 	mov	r3,zero
1000acbc:	00800044 	movi	r2,1
1000acc0:	003f3706 	br	1000a9a0 <__alt_data_end+0xf800a9a0>
1000acc4:	80bf832e 	bgeu	r16,r2,1000aad4 <__alt_data_end+0xf800aad4>
1000acc8:	8c7fff84 	addi	r17,r17,-2
1000accc:	8721883a 	add	r16,r16,fp
1000acd0:	003f8106 	br	1000aad8 <__alt_data_end+0xf800aad8>
1000acd4:	48bf6a2e 	bgeu	r9,r2,1000aa80 <__alt_data_end+0xf800aa80>
1000acd8:	a53fff84 	addi	r20,r20,-2
1000acdc:	4f13883a 	add	r9,r9,fp
1000ace0:	003f6806 	br	1000aa84 <__alt_data_end+0xf800aa84>
1000ace4:	1827883a 	mov	r19,r3
1000ace8:	003fd106 	br	1000ac30 <__alt_data_end+0xf800ac30>
1000acec:	182f883a 	mov	r23,r3
1000acf0:	003fb906 	br	1000abd8 <__alt_data_end+0xf800abd8>
1000acf4:	843fff84 	addi	r16,r16,-2
1000acf8:	348d883a 	add	r6,r6,r18
1000acfc:	003f0c06 	br	1000a930 <__alt_data_end+0xf800a930>
1000ad00:	843fff84 	addi	r16,r16,-2
1000ad04:	1c87883a 	add	r3,r3,r18
1000ad08:	003eac06 	br	1000a7bc <__alt_data_end+0xf800a7bc>

1000ad0c <__umoddi3>:
1000ad0c:	defff404 	addi	sp,sp,-48
1000ad10:	dd800815 	stw	r22,32(sp)
1000ad14:	dc400315 	stw	r17,12(sp)
1000ad18:	dc000215 	stw	r16,8(sp)
1000ad1c:	dfc00b15 	stw	ra,44(sp)
1000ad20:	df000a15 	stw	fp,40(sp)
1000ad24:	ddc00915 	stw	r23,36(sp)
1000ad28:	dd400715 	stw	r21,28(sp)
1000ad2c:	dd000615 	stw	r20,24(sp)
1000ad30:	dcc00515 	stw	r19,20(sp)
1000ad34:	dc800415 	stw	r18,16(sp)
1000ad38:	2021883a 	mov	r16,r4
1000ad3c:	2823883a 	mov	r17,r5
1000ad40:	282d883a 	mov	r22,r5
1000ad44:	38003c1e 	bne	r7,zero,1000ae38 <__umoddi3+0x12c>
1000ad48:	3027883a 	mov	r19,r6
1000ad4c:	2029883a 	mov	r20,r4
1000ad50:	2980522e 	bgeu	r5,r6,1000ae9c <__umoddi3+0x190>
1000ad54:	00bfffd4 	movui	r2,65535
1000ad58:	1180a436 	bltu	r2,r6,1000afec <__umoddi3+0x2e0>
1000ad5c:	00803fc4 	movi	r2,255
1000ad60:	11815e2e 	bgeu	r2,r6,1000b2dc <__umoddi3+0x5d0>
1000ad64:	01400204 	movi	r5,8
1000ad68:	2805883a 	mov	r2,r5
1000ad6c:	314ad83a 	srl	r5,r6,r5
1000ad70:	00c40074 	movhi	r3,4097
1000ad74:	18c21104 	addi	r3,r3,2116
1000ad78:	194b883a 	add	r5,r3,r5
1000ad7c:	29000003 	ldbu	r4,0(r5)
1000ad80:	2089883a 	add	r4,r4,r2
1000ad84:	00800804 	movi	r2,32
1000ad88:	1105c83a 	sub	r2,r2,r4
1000ad8c:	10010c26 	beq	r2,zero,1000b1c0 <__umoddi3+0x4b4>
1000ad90:	88a2983a 	sll	r17,r17,r2
1000ad94:	8108d83a 	srl	r4,r16,r4
1000ad98:	30a6983a 	sll	r19,r6,r2
1000ad9c:	80a8983a 	sll	r20,r16,r2
1000ada0:	1025883a 	mov	r18,r2
1000ada4:	892cb03a 	or	r22,r17,r4
1000ada8:	9822d43a 	srli	r17,r19,16
1000adac:	b009883a 	mov	r4,r22
1000adb0:	9d7fffcc 	andi	r21,r19,65535
1000adb4:	880b883a 	mov	r5,r17
1000adb8:	000b44c0 	call	1000b44c <__umodsi3>
1000adbc:	b009883a 	mov	r4,r22
1000adc0:	880b883a 	mov	r5,r17
1000adc4:	102f883a 	mov	r23,r2
1000adc8:	000b4440 	call	1000b444 <__udivsi3>
1000adcc:	1009883a 	mov	r4,r2
1000add0:	a80b883a 	mov	r5,r21
1000add4:	000b4540 	call	1000b454 <__mulsi3>
1000add8:	b82e943a 	slli	r23,r23,16
1000addc:	a008d43a 	srli	r4,r20,16
1000ade0:	b906b03a 	or	r3,r23,r4
1000ade4:	1880042e 	bgeu	r3,r2,1000adf8 <__umoddi3+0xec>
1000ade8:	1cc7883a 	add	r3,r3,r19
1000adec:	1cc00236 	bltu	r3,r19,1000adf8 <__umoddi3+0xec>
1000adf0:	1880012e 	bgeu	r3,r2,1000adf8 <__umoddi3+0xec>
1000adf4:	1cc7883a 	add	r3,r3,r19
1000adf8:	18a1c83a 	sub	r16,r3,r2
1000adfc:	8009883a 	mov	r4,r16
1000ae00:	880b883a 	mov	r5,r17
1000ae04:	000b44c0 	call	1000b44c <__umodsi3>
1000ae08:	8009883a 	mov	r4,r16
1000ae0c:	880b883a 	mov	r5,r17
1000ae10:	102d883a 	mov	r22,r2
1000ae14:	000b4440 	call	1000b444 <__udivsi3>
1000ae18:	1009883a 	mov	r4,r2
1000ae1c:	a80b883a 	mov	r5,r21
1000ae20:	b02c943a 	slli	r22,r22,16
1000ae24:	000b4540 	call	1000b454 <__mulsi3>
1000ae28:	a13fffcc 	andi	r4,r20,65535
1000ae2c:	b106b03a 	or	r3,r22,r4
1000ae30:	1880572e 	bgeu	r3,r2,1000af90 <__umoddi3+0x284>
1000ae34:	00005206 	br	1000af80 <__umoddi3+0x274>
1000ae38:	29c05936 	bltu	r5,r7,1000afa0 <__umoddi3+0x294>
1000ae3c:	00bfffd4 	movui	r2,65535
1000ae40:	11c0652e 	bgeu	r2,r7,1000afd8 <__umoddi3+0x2cc>
1000ae44:	00804034 	movhi	r2,256
1000ae48:	10bfffc4 	addi	r2,r2,-1
1000ae4c:	11c1172e 	bgeu	r2,r7,1000b2ac <__umoddi3+0x5a0>
1000ae50:	01400604 	movi	r5,24
1000ae54:	282b883a 	mov	r21,r5
1000ae58:	394ad83a 	srl	r5,r7,r5
1000ae5c:	00c40074 	movhi	r3,4097
1000ae60:	18c21104 	addi	r3,r3,2116
1000ae64:	194b883a 	add	r5,r3,r5
1000ae68:	28800003 	ldbu	r2,0(r5)
1000ae6c:	00c00804 	movi	r3,32
1000ae70:	156b883a 	add	r21,r2,r21
1000ae74:	1d69c83a 	sub	r20,r3,r21
1000ae78:	a000671e 	bne	r20,zero,1000b018 <__umoddi3+0x30c>
1000ae7c:	3c400136 	bltu	r7,r17,1000ae84 <__umoddi3+0x178>
1000ae80:	81812336 	bltu	r16,r6,1000b310 <__umoddi3+0x604>
1000ae84:	8185c83a 	sub	r2,r16,r6
1000ae88:	89e3c83a 	sub	r17,r17,r7
1000ae8c:	8087803a 	cmpltu	r3,r16,r2
1000ae90:	88edc83a 	sub	r22,r17,r3
1000ae94:	b007883a 	mov	r3,r22
1000ae98:	00004306 	br	1000afa8 <__umoddi3+0x29c>
1000ae9c:	3000041e 	bne	r6,zero,1000aeb0 <__umoddi3+0x1a4>
1000aea0:	01000044 	movi	r4,1
1000aea4:	000b883a 	mov	r5,zero
1000aea8:	000b4440 	call	1000b444 <__udivsi3>
1000aeac:	1027883a 	mov	r19,r2
1000aeb0:	00bfffd4 	movui	r2,65535
1000aeb4:	14c0532e 	bgeu	r2,r19,1000b004 <__umoddi3+0x2f8>
1000aeb8:	00804034 	movhi	r2,256
1000aebc:	10bfffc4 	addi	r2,r2,-1
1000aec0:	14c1032e 	bgeu	r2,r19,1000b2d0 <__umoddi3+0x5c4>
1000aec4:	00800604 	movi	r2,24
1000aec8:	1007883a 	mov	r3,r2
1000aecc:	9884d83a 	srl	r2,r19,r2
1000aed0:	01040074 	movhi	r4,4097
1000aed4:	21021104 	addi	r4,r4,2116
1000aed8:	2085883a 	add	r2,r4,r2
1000aedc:	11000003 	ldbu	r4,0(r2)
1000aee0:	00800804 	movi	r2,32
1000aee4:	20c7883a 	add	r3,r4,r3
1000aee8:	10c5c83a 	sub	r2,r2,r3
1000aeec:	1000b61e 	bne	r2,zero,1000b1c8 <__umoddi3+0x4bc>
1000aef0:	982ad43a 	srli	r21,r19,16
1000aef4:	8ce3c83a 	sub	r17,r17,r19
1000aef8:	9dbfffcc 	andi	r22,r19,65535
1000aefc:	0025883a 	mov	r18,zero
1000af00:	8809883a 	mov	r4,r17
1000af04:	a80b883a 	mov	r5,r21
1000af08:	000b44c0 	call	1000b44c <__umodsi3>
1000af0c:	8809883a 	mov	r4,r17
1000af10:	a80b883a 	mov	r5,r21
1000af14:	102f883a 	mov	r23,r2
1000af18:	000b4440 	call	1000b444 <__udivsi3>
1000af1c:	1009883a 	mov	r4,r2
1000af20:	b00b883a 	mov	r5,r22
1000af24:	000b4540 	call	1000b454 <__mulsi3>
1000af28:	b82e943a 	slli	r23,r23,16
1000af2c:	a008d43a 	srli	r4,r20,16
1000af30:	b906b03a 	or	r3,r23,r4
1000af34:	1880032e 	bgeu	r3,r2,1000af44 <__umoddi3+0x238>
1000af38:	1cc7883a 	add	r3,r3,r19
1000af3c:	1cc00136 	bltu	r3,r19,1000af44 <__umoddi3+0x238>
1000af40:	1880f136 	bltu	r3,r2,1000b308 <__umoddi3+0x5fc>
1000af44:	18a1c83a 	sub	r16,r3,r2
1000af48:	8009883a 	mov	r4,r16
1000af4c:	a80b883a 	mov	r5,r21
1000af50:	000b44c0 	call	1000b44c <__umodsi3>
1000af54:	8009883a 	mov	r4,r16
1000af58:	a80b883a 	mov	r5,r21
1000af5c:	1023883a 	mov	r17,r2
1000af60:	000b4440 	call	1000b444 <__udivsi3>
1000af64:	1009883a 	mov	r4,r2
1000af68:	b00b883a 	mov	r5,r22
1000af6c:	8822943a 	slli	r17,r17,16
1000af70:	000b4540 	call	1000b454 <__mulsi3>
1000af74:	a13fffcc 	andi	r4,r20,65535
1000af78:	8906b03a 	or	r3,r17,r4
1000af7c:	1880042e 	bgeu	r3,r2,1000af90 <__umoddi3+0x284>
1000af80:	1cc7883a 	add	r3,r3,r19
1000af84:	1cc00236 	bltu	r3,r19,1000af90 <__umoddi3+0x284>
1000af88:	1880012e 	bgeu	r3,r2,1000af90 <__umoddi3+0x284>
1000af8c:	1cc7883a 	add	r3,r3,r19
1000af90:	1887c83a 	sub	r3,r3,r2
1000af94:	1c84d83a 	srl	r2,r3,r18
1000af98:	0007883a 	mov	r3,zero
1000af9c:	00000206 	br	1000afa8 <__umoddi3+0x29c>
1000afa0:	2005883a 	mov	r2,r4
1000afa4:	2807883a 	mov	r3,r5
1000afa8:	dfc00b17 	ldw	ra,44(sp)
1000afac:	df000a17 	ldw	fp,40(sp)
1000afb0:	ddc00917 	ldw	r23,36(sp)
1000afb4:	dd800817 	ldw	r22,32(sp)
1000afb8:	dd400717 	ldw	r21,28(sp)
1000afbc:	dd000617 	ldw	r20,24(sp)
1000afc0:	dcc00517 	ldw	r19,20(sp)
1000afc4:	dc800417 	ldw	r18,16(sp)
1000afc8:	dc400317 	ldw	r17,12(sp)
1000afcc:	dc000217 	ldw	r16,8(sp)
1000afd0:	dec00c04 	addi	sp,sp,48
1000afd4:	f800283a 	ret
1000afd8:	00803fc4 	movi	r2,255
1000afdc:	11c0b02e 	bgeu	r2,r7,1000b2a0 <__umoddi3+0x594>
1000afe0:	01400204 	movi	r5,8
1000afe4:	282b883a 	mov	r21,r5
1000afe8:	003f9b06 	br	1000ae58 <__alt_data_end+0xf800ae58>
1000afec:	00804034 	movhi	r2,256
1000aff0:	10bfffc4 	addi	r2,r2,-1
1000aff4:	1180b02e 	bgeu	r2,r6,1000b2b8 <__umoddi3+0x5ac>
1000aff8:	01400604 	movi	r5,24
1000affc:	2805883a 	mov	r2,r5
1000b000:	003f5a06 	br	1000ad6c <__alt_data_end+0xf800ad6c>
1000b004:	00803fc4 	movi	r2,255
1000b008:	14c0ae2e 	bgeu	r2,r19,1000b2c4 <__umoddi3+0x5b8>
1000b00c:	00800204 	movi	r2,8
1000b010:	1007883a 	mov	r3,r2
1000b014:	003fad06 	br	1000aecc <__alt_data_end+0xf800aecc>
1000b018:	3d0a983a 	sll	r5,r7,r20
1000b01c:	356cd83a 	srl	r22,r6,r21
1000b020:	8d78d83a 	srl	fp,r17,r21
1000b024:	8d10983a 	sll	r8,r17,r20
1000b028:	2dacb03a 	or	r22,r5,r22
1000b02c:	b02ed43a 	srli	r23,r22,16
1000b030:	8564d83a 	srl	r18,r16,r21
1000b034:	e009883a 	mov	r4,fp
1000b038:	b80b883a 	mov	r5,r23
1000b03c:	44a4b03a 	or	r18,r8,r18
1000b040:	3526983a 	sll	r19,r6,r20
1000b044:	000b44c0 	call	1000b44c <__umodsi3>
1000b048:	e009883a 	mov	r4,fp
1000b04c:	b80b883a 	mov	r5,r23
1000b050:	b47fffcc 	andi	r17,r22,65535
1000b054:	d8800015 	stw	r2,0(sp)
1000b058:	000b4440 	call	1000b444 <__udivsi3>
1000b05c:	1009883a 	mov	r4,r2
1000b060:	880b883a 	mov	r5,r17
1000b064:	1039883a 	mov	fp,r2
1000b068:	000b4540 	call	1000b454 <__mulsi3>
1000b06c:	d9800017 	ldw	r6,0(sp)
1000b070:	9008d43a 	srli	r4,r18,16
1000b074:	8520983a 	sll	r16,r16,r20
1000b078:	300c943a 	slli	r6,r6,16
1000b07c:	3106b03a 	or	r3,r6,r4
1000b080:	1880042e 	bgeu	r3,r2,1000b094 <__umoddi3+0x388>
1000b084:	1d87883a 	add	r3,r3,r22
1000b088:	e13fffc4 	addi	r4,fp,-1
1000b08c:	1d809a2e 	bgeu	r3,r22,1000b2f8 <__umoddi3+0x5ec>
1000b090:	2039883a 	mov	fp,r4
1000b094:	1887c83a 	sub	r3,r3,r2
1000b098:	1809883a 	mov	r4,r3
1000b09c:	b80b883a 	mov	r5,r23
1000b0a0:	d8c00115 	stw	r3,4(sp)
1000b0a4:	000b44c0 	call	1000b44c <__umodsi3>
1000b0a8:	d8c00117 	ldw	r3,4(sp)
1000b0ac:	b80b883a 	mov	r5,r23
1000b0b0:	d8800015 	stw	r2,0(sp)
1000b0b4:	1809883a 	mov	r4,r3
1000b0b8:	000b4440 	call	1000b444 <__udivsi3>
1000b0bc:	880b883a 	mov	r5,r17
1000b0c0:	1009883a 	mov	r4,r2
1000b0c4:	102f883a 	mov	r23,r2
1000b0c8:	000b4540 	call	1000b454 <__mulsi3>
1000b0cc:	d9800017 	ldw	r6,0(sp)
1000b0d0:	947fffcc 	andi	r17,r18,65535
1000b0d4:	300c943a 	slli	r6,r6,16
1000b0d8:	3464b03a 	or	r18,r6,r17
1000b0dc:	9080042e 	bgeu	r18,r2,1000b0f0 <__umoddi3+0x3e4>
1000b0e0:	95a5883a 	add	r18,r18,r22
1000b0e4:	b8ffffc4 	addi	r3,r23,-1
1000b0e8:	95807f2e 	bgeu	r18,r22,1000b2e8 <__umoddi3+0x5dc>
1000b0ec:	182f883a 	mov	r23,r3
1000b0f0:	e038943a 	slli	fp,fp,16
1000b0f4:	980cd43a 	srli	r6,r19,16
1000b0f8:	98ffffcc 	andi	r3,r19,65535
1000b0fc:	bf38b03a 	or	fp,r23,fp
1000b100:	e02ed43a 	srli	r23,fp,16
1000b104:	e73fffcc 	andi	fp,fp,65535
1000b108:	180b883a 	mov	r5,r3
1000b10c:	e009883a 	mov	r4,fp
1000b110:	d9800015 	stw	r6,0(sp)
1000b114:	d8c00115 	stw	r3,4(sp)
1000b118:	90a5c83a 	sub	r18,r18,r2
1000b11c:	000b4540 	call	1000b454 <__mulsi3>
1000b120:	d8c00117 	ldw	r3,4(sp)
1000b124:	b809883a 	mov	r4,r23
1000b128:	1023883a 	mov	r17,r2
1000b12c:	180b883a 	mov	r5,r3
1000b130:	000b4540 	call	1000b454 <__mulsi3>
1000b134:	d9800017 	ldw	r6,0(sp)
1000b138:	b809883a 	mov	r4,r23
1000b13c:	d8800115 	stw	r2,4(sp)
1000b140:	300b883a 	mov	r5,r6
1000b144:	302f883a 	mov	r23,r6
1000b148:	000b4540 	call	1000b454 <__mulsi3>
1000b14c:	e009883a 	mov	r4,fp
1000b150:	b80b883a 	mov	r5,r23
1000b154:	d8800015 	stw	r2,0(sp)
1000b158:	000b4540 	call	1000b454 <__mulsi3>
1000b15c:	d8c00117 	ldw	r3,4(sp)
1000b160:	880cd43a 	srli	r6,r17,16
1000b164:	d9c00017 	ldw	r7,0(sp)
1000b168:	1885883a 	add	r2,r3,r2
1000b16c:	118d883a 	add	r6,r2,r6
1000b170:	30c0022e 	bgeu	r6,r3,1000b17c <__umoddi3+0x470>
1000b174:	00800074 	movhi	r2,1
1000b178:	388f883a 	add	r7,r7,r2
1000b17c:	3006d43a 	srli	r3,r6,16
1000b180:	300c943a 	slli	r6,r6,16
1000b184:	8c7fffcc 	andi	r17,r17,65535
1000b188:	38c7883a 	add	r3,r7,r3
1000b18c:	3463883a 	add	r17,r6,r17
1000b190:	90c03d36 	bltu	r18,r3,1000b288 <__umoddi3+0x57c>
1000b194:	90c06026 	beq	r18,r3,1000b318 <__umoddi3+0x60c>
1000b198:	90c9c83a 	sub	r4,r18,r3
1000b19c:	880f883a 	mov	r7,r17
1000b1a0:	81cfc83a 	sub	r7,r16,r7
1000b1a4:	81c7803a 	cmpltu	r3,r16,r7
1000b1a8:	20c7c83a 	sub	r3,r4,r3
1000b1ac:	1d44983a 	sll	r2,r3,r21
1000b1b0:	3d0ed83a 	srl	r7,r7,r20
1000b1b4:	1d06d83a 	srl	r3,r3,r20
1000b1b8:	11c4b03a 	or	r2,r2,r7
1000b1bc:	003f7a06 	br	1000afa8 <__alt_data_end+0xf800afa8>
1000b1c0:	0025883a 	mov	r18,zero
1000b1c4:	003ef806 	br	1000ada8 <__alt_data_end+0xf800ada8>
1000b1c8:	98a6983a 	sll	r19,r19,r2
1000b1cc:	88e8d83a 	srl	r20,r17,r3
1000b1d0:	80c6d83a 	srl	r3,r16,r3
1000b1d4:	982ad43a 	srli	r21,r19,16
1000b1d8:	88a2983a 	sll	r17,r17,r2
1000b1dc:	a009883a 	mov	r4,r20
1000b1e0:	a80b883a 	mov	r5,r21
1000b1e4:	88eeb03a 	or	r23,r17,r3
1000b1e8:	1025883a 	mov	r18,r2
1000b1ec:	000b44c0 	call	1000b44c <__umodsi3>
1000b1f0:	a009883a 	mov	r4,r20
1000b1f4:	a80b883a 	mov	r5,r21
1000b1f8:	1023883a 	mov	r17,r2
1000b1fc:	9dbfffcc 	andi	r22,r19,65535
1000b200:	000b4440 	call	1000b444 <__udivsi3>
1000b204:	1009883a 	mov	r4,r2
1000b208:	b00b883a 	mov	r5,r22
1000b20c:	000b4540 	call	1000b454 <__mulsi3>
1000b210:	8822943a 	slli	r17,r17,16
1000b214:	b808d43a 	srli	r4,r23,16
1000b218:	84a8983a 	sll	r20,r16,r18
1000b21c:	8906b03a 	or	r3,r17,r4
1000b220:	1880042e 	bgeu	r3,r2,1000b234 <__umoddi3+0x528>
1000b224:	1cc7883a 	add	r3,r3,r19
1000b228:	1cc00236 	bltu	r3,r19,1000b234 <__umoddi3+0x528>
1000b22c:	1880012e 	bgeu	r3,r2,1000b234 <__umoddi3+0x528>
1000b230:	1cc7883a 	add	r3,r3,r19
1000b234:	18a1c83a 	sub	r16,r3,r2
1000b238:	8009883a 	mov	r4,r16
1000b23c:	a80b883a 	mov	r5,r21
1000b240:	000b44c0 	call	1000b44c <__umodsi3>
1000b244:	8009883a 	mov	r4,r16
1000b248:	a80b883a 	mov	r5,r21
1000b24c:	1039883a 	mov	fp,r2
1000b250:	000b4440 	call	1000b444 <__udivsi3>
1000b254:	1009883a 	mov	r4,r2
1000b258:	b00b883a 	mov	r5,r22
1000b25c:	000b4540 	call	1000b454 <__mulsi3>
1000b260:	e006943a 	slli	r3,fp,16
1000b264:	b93fffcc 	andi	r4,r23,65535
1000b268:	1906b03a 	or	r3,r3,r4
1000b26c:	1880042e 	bgeu	r3,r2,1000b280 <__umoddi3+0x574>
1000b270:	1cc7883a 	add	r3,r3,r19
1000b274:	1cc00236 	bltu	r3,r19,1000b280 <__umoddi3+0x574>
1000b278:	1880012e 	bgeu	r3,r2,1000b280 <__umoddi3+0x574>
1000b27c:	1cc7883a 	add	r3,r3,r19
1000b280:	18a3c83a 	sub	r17,r3,r2
1000b284:	003f1e06 	br	1000af00 <__alt_data_end+0xf800af00>
1000b288:	8ccfc83a 	sub	r7,r17,r19
1000b28c:	1d89c83a 	sub	r4,r3,r22
1000b290:	89e3803a 	cmpltu	r17,r17,r7
1000b294:	2463c83a 	sub	r17,r4,r17
1000b298:	9449c83a 	sub	r4,r18,r17
1000b29c:	003fc006 	br	1000b1a0 <__alt_data_end+0xf800b1a0>
1000b2a0:	000b883a 	mov	r5,zero
1000b2a4:	002b883a 	mov	r21,zero
1000b2a8:	003eeb06 	br	1000ae58 <__alt_data_end+0xf800ae58>
1000b2ac:	01400404 	movi	r5,16
1000b2b0:	282b883a 	mov	r21,r5
1000b2b4:	003ee806 	br	1000ae58 <__alt_data_end+0xf800ae58>
1000b2b8:	01400404 	movi	r5,16
1000b2bc:	2805883a 	mov	r2,r5
1000b2c0:	003eaa06 	br	1000ad6c <__alt_data_end+0xf800ad6c>
1000b2c4:	0005883a 	mov	r2,zero
1000b2c8:	0007883a 	mov	r3,zero
1000b2cc:	003eff06 	br	1000aecc <__alt_data_end+0xf800aecc>
1000b2d0:	00800404 	movi	r2,16
1000b2d4:	1007883a 	mov	r3,r2
1000b2d8:	003efc06 	br	1000aecc <__alt_data_end+0xf800aecc>
1000b2dc:	000b883a 	mov	r5,zero
1000b2e0:	0005883a 	mov	r2,zero
1000b2e4:	003ea106 	br	1000ad6c <__alt_data_end+0xf800ad6c>
1000b2e8:	90bf802e 	bgeu	r18,r2,1000b0ec <__alt_data_end+0xf800b0ec>
1000b2ec:	bdffff84 	addi	r23,r23,-2
1000b2f0:	95a5883a 	add	r18,r18,r22
1000b2f4:	003f7e06 	br	1000b0f0 <__alt_data_end+0xf800b0f0>
1000b2f8:	18bf652e 	bgeu	r3,r2,1000b090 <__alt_data_end+0xf800b090>
1000b2fc:	e73fff84 	addi	fp,fp,-2
1000b300:	1d87883a 	add	r3,r3,r22
1000b304:	003f6306 	br	1000b094 <__alt_data_end+0xf800b094>
1000b308:	1cc7883a 	add	r3,r3,r19
1000b30c:	003f0d06 	br	1000af44 <__alt_data_end+0xf800af44>
1000b310:	8005883a 	mov	r2,r16
1000b314:	003edf06 	br	1000ae94 <__alt_data_end+0xf800ae94>
1000b318:	847fdb36 	bltu	r16,r17,1000b288 <__alt_data_end+0xf800b288>
1000b31c:	880f883a 	mov	r7,r17
1000b320:	0009883a 	mov	r4,zero
1000b324:	003f9e06 	br	1000b1a0 <__alt_data_end+0xf800b1a0>

1000b328 <udivmodsi4>:
1000b328:	2900182e 	bgeu	r5,r4,1000b38c <udivmodsi4+0x64>
1000b32c:	28001716 	blt	r5,zero,1000b38c <udivmodsi4+0x64>
1000b330:	00800804 	movi	r2,32
1000b334:	00c00044 	movi	r3,1
1000b338:	00000206 	br	1000b344 <udivmodsi4+0x1c>
1000b33c:	10001126 	beq	r2,zero,1000b384 <udivmodsi4+0x5c>
1000b340:	28000516 	blt	r5,zero,1000b358 <udivmodsi4+0x30>
1000b344:	294b883a 	add	r5,r5,r5
1000b348:	10bfffc4 	addi	r2,r2,-1
1000b34c:	18c7883a 	add	r3,r3,r3
1000b350:	293ffa36 	bltu	r5,r4,1000b33c <__alt_data_end+0xf800b33c>
1000b354:	18000b26 	beq	r3,zero,1000b384 <udivmodsi4+0x5c>
1000b358:	0005883a 	mov	r2,zero
1000b35c:	21400236 	bltu	r4,r5,1000b368 <udivmodsi4+0x40>
1000b360:	2149c83a 	sub	r4,r4,r5
1000b364:	10c4b03a 	or	r2,r2,r3
1000b368:	1806d07a 	srli	r3,r3,1
1000b36c:	280ad07a 	srli	r5,r5,1
1000b370:	183ffa1e 	bne	r3,zero,1000b35c <__alt_data_end+0xf800b35c>
1000b374:	3000011e 	bne	r6,zero,1000b37c <udivmodsi4+0x54>
1000b378:	f800283a 	ret
1000b37c:	2005883a 	mov	r2,r4
1000b380:	f800283a 	ret
1000b384:	0005883a 	mov	r2,zero
1000b388:	003ffa06 	br	1000b374 <__alt_data_end+0xf800b374>
1000b38c:	00c00044 	movi	r3,1
1000b390:	003ff106 	br	1000b358 <__alt_data_end+0xf800b358>

1000b394 <__divsi3>:
1000b394:	defffe04 	addi	sp,sp,-8
1000b398:	dfc00115 	stw	ra,4(sp)
1000b39c:	dc000015 	stw	r16,0(sp)
1000b3a0:	20000b16 	blt	r4,zero,1000b3d0 <__divsi3+0x3c>
1000b3a4:	0021883a 	mov	r16,zero
1000b3a8:	28000c16 	blt	r5,zero,1000b3dc <__divsi3+0x48>
1000b3ac:	000d883a 	mov	r6,zero
1000b3b0:	000b3280 	call	1000b328 <udivmodsi4>
1000b3b4:	0407c83a 	sub	r3,zero,r16
1000b3b8:	1884f03a 	xor	r2,r3,r2
1000b3bc:	1405883a 	add	r2,r2,r16
1000b3c0:	dfc00117 	ldw	ra,4(sp)
1000b3c4:	dc000017 	ldw	r16,0(sp)
1000b3c8:	dec00204 	addi	sp,sp,8
1000b3cc:	f800283a 	ret
1000b3d0:	0109c83a 	sub	r4,zero,r4
1000b3d4:	04000044 	movi	r16,1
1000b3d8:	283ff40e 	bge	r5,zero,1000b3ac <__alt_data_end+0xf800b3ac>
1000b3dc:	014bc83a 	sub	r5,zero,r5
1000b3e0:	8400005c 	xori	r16,r16,1
1000b3e4:	003ff106 	br	1000b3ac <__alt_data_end+0xf800b3ac>

1000b3e8 <__modsi3>:
1000b3e8:	defffd04 	addi	sp,sp,-12
1000b3ec:	dfc00215 	stw	ra,8(sp)
1000b3f0:	dc400115 	stw	r17,4(sp)
1000b3f4:	dc000015 	stw	r16,0(sp)
1000b3f8:	20000c16 	blt	r4,zero,1000b42c <__modsi3+0x44>
1000b3fc:	0023883a 	mov	r17,zero
1000b400:	0021883a 	mov	r16,zero
1000b404:	28000d16 	blt	r5,zero,1000b43c <__modsi3+0x54>
1000b408:	01800044 	movi	r6,1
1000b40c:	000b3280 	call	1000b328 <udivmodsi4>
1000b410:	1404f03a 	xor	r2,r2,r16
1000b414:	8885883a 	add	r2,r17,r2
1000b418:	dfc00217 	ldw	ra,8(sp)
1000b41c:	dc400117 	ldw	r17,4(sp)
1000b420:	dc000017 	ldw	r16,0(sp)
1000b424:	dec00304 	addi	sp,sp,12
1000b428:	f800283a 	ret
1000b42c:	0109c83a 	sub	r4,zero,r4
1000b430:	04400044 	movi	r17,1
1000b434:	043fffc4 	movi	r16,-1
1000b438:	283ff30e 	bge	r5,zero,1000b408 <__alt_data_end+0xf800b408>
1000b43c:	014bc83a 	sub	r5,zero,r5
1000b440:	003ff106 	br	1000b408 <__alt_data_end+0xf800b408>

1000b444 <__udivsi3>:
1000b444:	000d883a 	mov	r6,zero
1000b448:	000b3281 	jmpi	1000b328 <udivmodsi4>

1000b44c <__umodsi3>:
1000b44c:	01800044 	movi	r6,1
1000b450:	000b3281 	jmpi	1000b328 <udivmodsi4>

1000b454 <__mulsi3>:
1000b454:	0005883a 	mov	r2,zero
1000b458:	20000726 	beq	r4,zero,1000b478 <__mulsi3+0x24>
1000b45c:	20c0004c 	andi	r3,r4,1
1000b460:	2008d07a 	srli	r4,r4,1
1000b464:	18000126 	beq	r3,zero,1000b46c <__mulsi3+0x18>
1000b468:	1145883a 	add	r2,r2,r5
1000b46c:	294b883a 	add	r5,r5,r5
1000b470:	203ffa1e 	bne	r4,zero,1000b45c <__alt_data_end+0xf800b45c>
1000b474:	f800283a 	ret
1000b478:	f800283a 	ret

1000b47c <__adddf3>:
1000b47c:	02000434 	movhi	r8,16
1000b480:	423fffc4 	addi	r8,r8,-1
1000b484:	defffb04 	addi	sp,sp,-20
1000b488:	2a12703a 	and	r9,r5,r8
1000b48c:	2806d7fa 	srli	r3,r5,31
1000b490:	3a10703a 	and	r8,r7,r8
1000b494:	3804d53a 	srli	r2,r7,20
1000b498:	3014d77a 	srli	r10,r6,29
1000b49c:	dc000015 	stw	r16,0(sp)
1000b4a0:	481290fa 	slli	r9,r9,3
1000b4a4:	2820d53a 	srli	r16,r5,20
1000b4a8:	401090fa 	slli	r8,r8,3
1000b4ac:	200ad77a 	srli	r5,r4,29
1000b4b0:	380ed7fa 	srli	r7,r7,31
1000b4b4:	dc800215 	stw	r18,8(sp)
1000b4b8:	dc400115 	stw	r17,4(sp)
1000b4bc:	dfc00415 	stw	ra,16(sp)
1000b4c0:	dcc00315 	stw	r19,12(sp)
1000b4c4:	1c803fcc 	andi	r18,r3,255
1000b4c8:	8401ffcc 	andi	r16,r16,2047
1000b4cc:	494ab03a 	or	r5,r9,r5
1000b4d0:	202290fa 	slli	r17,r4,3
1000b4d4:	1081ffcc 	andi	r2,r2,2047
1000b4d8:	4290b03a 	or	r8,r8,r10
1000b4dc:	300c90fa 	slli	r6,r6,3
1000b4e0:	91c07026 	beq	r18,r7,1000b6a4 <__adddf3+0x228>
1000b4e4:	8087c83a 	sub	r3,r16,r2
1000b4e8:	00c0b30e 	bge	zero,r3,1000b7b8 <__adddf3+0x33c>
1000b4ec:	10002a1e 	bne	r2,zero,1000b598 <__adddf3+0x11c>
1000b4f0:	4184b03a 	or	r2,r8,r6
1000b4f4:	1000991e 	bne	r2,zero,1000b75c <__adddf3+0x2e0>
1000b4f8:	888001cc 	andi	r2,r17,7
1000b4fc:	10005b26 	beq	r2,zero,1000b66c <__adddf3+0x1f0>
1000b500:	88c003cc 	andi	r3,r17,15
1000b504:	00800104 	movi	r2,4
1000b508:	18805826 	beq	r3,r2,1000b66c <__adddf3+0x1f0>
1000b50c:	89800104 	addi	r6,r17,4
1000b510:	3463803a 	cmpltu	r17,r6,r17
1000b514:	2c4b883a 	add	r5,r5,r17
1000b518:	2880202c 	andhi	r2,r5,128
1000b51c:	9007883a 	mov	r3,r18
1000b520:	3023883a 	mov	r17,r6
1000b524:	10005426 	beq	r2,zero,1000b678 <__adddf3+0x1fc>
1000b528:	84000044 	addi	r16,r16,1
1000b52c:	0081ffc4 	movi	r2,2047
1000b530:	8080c126 	beq	r16,r2,1000b838 <__adddf3+0x3bc>
1000b534:	013fe034 	movhi	r4,65408
1000b538:	213fffc4 	addi	r4,r4,-1
1000b53c:	290a703a 	and	r5,r5,r4
1000b540:	2804977a 	slli	r2,r5,29
1000b544:	280a927a 	slli	r5,r5,9
1000b548:	8822d0fa 	srli	r17,r17,3
1000b54c:	8401ffcc 	andi	r16,r16,2047
1000b550:	2808d33a 	srli	r4,r5,12
1000b554:	1444b03a 	or	r2,r2,r17
1000b558:	8401ffcc 	andi	r16,r16,2047
1000b55c:	800a953a 	slli	r5,r16,20
1000b560:	18c03fcc 	andi	r3,r3,255
1000b564:	04000434 	movhi	r16,16
1000b568:	180697fa 	slli	r3,r3,31
1000b56c:	843fffc4 	addi	r16,r16,-1
1000b570:	2420703a 	and	r16,r4,r16
1000b574:	8160b03a 	or	r16,r16,r5
1000b578:	80c6b03a 	or	r3,r16,r3
1000b57c:	dfc00417 	ldw	ra,16(sp)
1000b580:	dcc00317 	ldw	r19,12(sp)
1000b584:	dc800217 	ldw	r18,8(sp)
1000b588:	dc400117 	ldw	r17,4(sp)
1000b58c:	dc000017 	ldw	r16,0(sp)
1000b590:	dec00504 	addi	sp,sp,20
1000b594:	f800283a 	ret
1000b598:	0081ffc4 	movi	r2,2047
1000b59c:	80bfd626 	beq	r16,r2,1000b4f8 <__alt_data_end+0xf800b4f8>
1000b5a0:	42002034 	orhi	r8,r8,128
1000b5a4:	00800e04 	movi	r2,56
1000b5a8:	10c0a616 	blt	r2,r3,1000b844 <__adddf3+0x3c8>
1000b5ac:	008007c4 	movi	r2,31
1000b5b0:	10c0c916 	blt	r2,r3,1000b8d8 <__adddf3+0x45c>
1000b5b4:	00800804 	movi	r2,32
1000b5b8:	10c5c83a 	sub	r2,r2,r3
1000b5bc:	408e983a 	sll	r7,r8,r2
1000b5c0:	30c8d83a 	srl	r4,r6,r3
1000b5c4:	3084983a 	sll	r2,r6,r2
1000b5c8:	40c6d83a 	srl	r3,r8,r3
1000b5cc:	390cb03a 	or	r6,r7,r4
1000b5d0:	1004c03a 	cmpne	r2,r2,zero
1000b5d4:	308cb03a 	or	r6,r6,r2
1000b5d8:	898dc83a 	sub	r6,r17,r6
1000b5dc:	89a3803a 	cmpltu	r17,r17,r6
1000b5e0:	28cbc83a 	sub	r5,r5,r3
1000b5e4:	2c4bc83a 	sub	r5,r5,r17
1000b5e8:	3023883a 	mov	r17,r6
1000b5ec:	2880202c 	andhi	r2,r5,128
1000b5f0:	10006d26 	beq	r2,zero,1000b7a8 <__adddf3+0x32c>
1000b5f4:	04c02034 	movhi	r19,128
1000b5f8:	9cffffc4 	addi	r19,r19,-1
1000b5fc:	2ce6703a 	and	r19,r5,r19
1000b600:	98007e26 	beq	r19,zero,1000b7fc <__adddf3+0x380>
1000b604:	9809883a 	mov	r4,r19
1000b608:	000dc140 	call	1000dc14 <__clzsi2>
1000b60c:	10fffe04 	addi	r3,r2,-8
1000b610:	010007c4 	movi	r4,31
1000b614:	20c07f16 	blt	r4,r3,1000b814 <__adddf3+0x398>
1000b618:	01400a04 	movi	r5,40
1000b61c:	2885c83a 	sub	r2,r5,r2
1000b620:	888ad83a 	srl	r5,r17,r2
1000b624:	98e6983a 	sll	r19,r19,r3
1000b628:	88e2983a 	sll	r17,r17,r3
1000b62c:	2ce6b03a 	or	r19,r5,r19
1000b630:	1c007c16 	blt	r3,r16,1000b824 <__adddf3+0x3a8>
1000b634:	1c21c83a 	sub	r16,r3,r16
1000b638:	81400044 	addi	r5,r16,1
1000b63c:	00c007c4 	movi	r3,31
1000b640:	19409816 	blt	r3,r5,1000b8a4 <__adddf3+0x428>
1000b644:	1c21c83a 	sub	r16,r3,r16
1000b648:	8c08983a 	sll	r4,r17,r16
1000b64c:	8946d83a 	srl	r3,r17,r5
1000b650:	9c20983a 	sll	r16,r19,r16
1000b654:	2008c03a 	cmpne	r4,r4,zero
1000b658:	994ad83a 	srl	r5,r19,r5
1000b65c:	1c06b03a 	or	r3,r3,r16
1000b660:	1922b03a 	or	r17,r3,r4
1000b664:	0021883a 	mov	r16,zero
1000b668:	003fa306 	br	1000b4f8 <__alt_data_end+0xf800b4f8>
1000b66c:	2880202c 	andhi	r2,r5,128
1000b670:	9007883a 	mov	r3,r18
1000b674:	103fac1e 	bne	r2,zero,1000b528 <__alt_data_end+0xf800b528>
1000b678:	2804977a 	slli	r2,r5,29
1000b67c:	8822d0fa 	srli	r17,r17,3
1000b680:	0101ffc4 	movi	r4,2047
1000b684:	280ad0fa 	srli	r5,r5,3
1000b688:	1444b03a 	or	r2,r2,r17
1000b68c:	81002c26 	beq	r16,r4,1000b740 <__adddf3+0x2c4>
1000b690:	8120703a 	and	r16,r16,r4
1000b694:	01000434 	movhi	r4,16
1000b698:	213fffc4 	addi	r4,r4,-1
1000b69c:	2908703a 	and	r4,r5,r4
1000b6a0:	003fad06 	br	1000b558 <__alt_data_end+0xf800b558>
1000b6a4:	8089c83a 	sub	r4,r16,r2
1000b6a8:	01006a0e 	bge	zero,r4,1000b854 <__adddf3+0x3d8>
1000b6ac:	10003326 	beq	r2,zero,1000b77c <__adddf3+0x300>
1000b6b0:	0081ffc4 	movi	r2,2047
1000b6b4:	80bf9026 	beq	r16,r2,1000b4f8 <__alt_data_end+0xf800b4f8>
1000b6b8:	42002034 	orhi	r8,r8,128
1000b6bc:	00800e04 	movi	r2,56
1000b6c0:	1100b116 	blt	r2,r4,1000b988 <__adddf3+0x50c>
1000b6c4:	008007c4 	movi	r2,31
1000b6c8:	1100e216 	blt	r2,r4,1000ba54 <__adddf3+0x5d8>
1000b6cc:	00800804 	movi	r2,32
1000b6d0:	1105c83a 	sub	r2,r2,r4
1000b6d4:	4092983a 	sll	r9,r8,r2
1000b6d8:	310ed83a 	srl	r7,r6,r4
1000b6dc:	3084983a 	sll	r2,r6,r2
1000b6e0:	4110d83a 	srl	r8,r8,r4
1000b6e4:	49ccb03a 	or	r6,r9,r7
1000b6e8:	1004c03a 	cmpne	r2,r2,zero
1000b6ec:	308cb03a 	or	r6,r6,r2
1000b6f0:	344d883a 	add	r6,r6,r17
1000b6f4:	3463803a 	cmpltu	r17,r6,r17
1000b6f8:	414b883a 	add	r5,r8,r5
1000b6fc:	2c4b883a 	add	r5,r5,r17
1000b700:	3023883a 	mov	r17,r6
1000b704:	2880202c 	andhi	r2,r5,128
1000b708:	10002726 	beq	r2,zero,1000b7a8 <__adddf3+0x32c>
1000b70c:	84000044 	addi	r16,r16,1
1000b710:	0081ffc4 	movi	r2,2047
1000b714:	8080ae26 	beq	r16,r2,1000b9d0 <__adddf3+0x554>
1000b718:	00bfe034 	movhi	r2,65408
1000b71c:	10bfffc4 	addi	r2,r2,-1
1000b720:	288a703a 	and	r5,r5,r2
1000b724:	880cd07a 	srli	r6,r17,1
1000b728:	280897fa 	slli	r4,r5,31
1000b72c:	88c0004c 	andi	r3,r17,1
1000b730:	30e2b03a 	or	r17,r6,r3
1000b734:	280ad07a 	srli	r5,r5,1
1000b738:	8922b03a 	or	r17,r17,r4
1000b73c:	003f6e06 	br	1000b4f8 <__alt_data_end+0xf800b4f8>
1000b740:	1148b03a 	or	r4,r2,r5
1000b744:	20003c26 	beq	r4,zero,1000b838 <__adddf3+0x3bc>
1000b748:	29000234 	orhi	r4,r5,8
1000b74c:	01400434 	movhi	r5,16
1000b750:	297fffc4 	addi	r5,r5,-1
1000b754:	2148703a 	and	r4,r4,r5
1000b758:	003f7f06 	br	1000b558 <__alt_data_end+0xf800b558>
1000b75c:	18ffffc4 	addi	r3,r3,-1
1000b760:	18004d1e 	bne	r3,zero,1000b898 <__adddf3+0x41c>
1000b764:	898dc83a 	sub	r6,r17,r6
1000b768:	89a3803a 	cmpltu	r17,r17,r6
1000b76c:	2a0bc83a 	sub	r5,r5,r8
1000b770:	2c4bc83a 	sub	r5,r5,r17
1000b774:	3023883a 	mov	r17,r6
1000b778:	003f9c06 	br	1000b5ec <__alt_data_end+0xf800b5ec>
1000b77c:	4184b03a 	or	r2,r8,r6
1000b780:	103f5d26 	beq	r2,zero,1000b4f8 <__alt_data_end+0xf800b4f8>
1000b784:	213fffc4 	addi	r4,r4,-1
1000b788:	203fd926 	beq	r4,zero,1000b6f0 <__alt_data_end+0xf800b6f0>
1000b78c:	0081ffc4 	movi	r2,2047
1000b790:	80bfca1e 	bne	r16,r2,1000b6bc <__alt_data_end+0xf800b6bc>
1000b794:	003f5806 	br	1000b4f8 <__alt_data_end+0xf800b4f8>
1000b798:	10c8b03a 	or	r4,r2,r3
1000b79c:	20008b26 	beq	r4,zero,1000b9cc <__adddf3+0x550>
1000b7a0:	100b883a 	mov	r5,r2
1000b7a4:	1823883a 	mov	r17,r3
1000b7a8:	888001cc 	andi	r2,r17,7
1000b7ac:	103f541e 	bne	r2,zero,1000b500 <__alt_data_end+0xf800b500>
1000b7b0:	9007883a 	mov	r3,r18
1000b7b4:	003fb006 	br	1000b678 <__alt_data_end+0xf800b678>
1000b7b8:	1800531e 	bne	r3,zero,1000b908 <__adddf3+0x48c>
1000b7bc:	80800044 	addi	r2,r16,1
1000b7c0:	1081ffcc 	andi	r2,r2,2047
1000b7c4:	00c00044 	movi	r3,1
1000b7c8:	1880990e 	bge	r3,r2,1000ba30 <__adddf3+0x5b4>
1000b7cc:	8985c83a 	sub	r2,r17,r6
1000b7d0:	8887803a 	cmpltu	r3,r17,r2
1000b7d4:	2a27c83a 	sub	r19,r5,r8
1000b7d8:	98e7c83a 	sub	r19,r19,r3
1000b7dc:	98c0202c 	andhi	r3,r19,128
1000b7e0:	18006226 	beq	r3,zero,1000b96c <__adddf3+0x4f0>
1000b7e4:	3463c83a 	sub	r17,r6,r17
1000b7e8:	4151c83a 	sub	r8,r8,r5
1000b7ec:	344d803a 	cmpltu	r6,r6,r17
1000b7f0:	41a7c83a 	sub	r19,r8,r6
1000b7f4:	3825883a 	mov	r18,r7
1000b7f8:	983f821e 	bne	r19,zero,1000b604 <__alt_data_end+0xf800b604>
1000b7fc:	8809883a 	mov	r4,r17
1000b800:	000dc140 	call	1000dc14 <__clzsi2>
1000b804:	10800804 	addi	r2,r2,32
1000b808:	10fffe04 	addi	r3,r2,-8
1000b80c:	010007c4 	movi	r4,31
1000b810:	20ff810e 	bge	r4,r3,1000b618 <__alt_data_end+0xf800b618>
1000b814:	14fff604 	addi	r19,r2,-40
1000b818:	8ce6983a 	sll	r19,r17,r19
1000b81c:	0023883a 	mov	r17,zero
1000b820:	1c3f840e 	bge	r3,r16,1000b634 <__alt_data_end+0xf800b634>
1000b824:	017fe034 	movhi	r5,65408
1000b828:	297fffc4 	addi	r5,r5,-1
1000b82c:	80e1c83a 	sub	r16,r16,r3
1000b830:	994a703a 	and	r5,r19,r5
1000b834:	003f3006 	br	1000b4f8 <__alt_data_end+0xf800b4f8>
1000b838:	0009883a 	mov	r4,zero
1000b83c:	0005883a 	mov	r2,zero
1000b840:	003f4506 	br	1000b558 <__alt_data_end+0xf800b558>
1000b844:	418cb03a 	or	r6,r8,r6
1000b848:	300cc03a 	cmpne	r6,r6,zero
1000b84c:	0007883a 	mov	r3,zero
1000b850:	003f6106 	br	1000b5d8 <__alt_data_end+0xf800b5d8>
1000b854:	2000921e 	bne	r4,zero,1000baa0 <__adddf3+0x624>
1000b858:	80800044 	addi	r2,r16,1
1000b85c:	11c1ffcc 	andi	r7,r2,2047
1000b860:	01000044 	movi	r4,1
1000b864:	21c0610e 	bge	r4,r7,1000b9ec <__adddf3+0x570>
1000b868:	0101ffc4 	movi	r4,2047
1000b86c:	1100a326 	beq	r2,r4,1000bafc <__adddf3+0x680>
1000b870:	344d883a 	add	r6,r6,r17
1000b874:	3463803a 	cmpltu	r17,r6,r17
1000b878:	414b883a 	add	r5,r8,r5
1000b87c:	2c4b883a 	add	r5,r5,r17
1000b880:	282297fa 	slli	r17,r5,31
1000b884:	300cd07a 	srli	r6,r6,1
1000b888:	280ad07a 	srli	r5,r5,1
1000b88c:	1021883a 	mov	r16,r2
1000b890:	89a2b03a 	or	r17,r17,r6
1000b894:	003f1806 	br	1000b4f8 <__alt_data_end+0xf800b4f8>
1000b898:	0081ffc4 	movi	r2,2047
1000b89c:	80bf411e 	bne	r16,r2,1000b5a4 <__alt_data_end+0xf800b5a4>
1000b8a0:	003f1506 	br	1000b4f8 <__alt_data_end+0xf800b4f8>
1000b8a4:	80bff844 	addi	r2,r16,-31
1000b8a8:	00c00804 	movi	r3,32
1000b8ac:	9884d83a 	srl	r2,r19,r2
1000b8b0:	28c04a26 	beq	r5,r3,1000b9dc <__adddf3+0x560>
1000b8b4:	00c00fc4 	movi	r3,63
1000b8b8:	1c21c83a 	sub	r16,r3,r16
1000b8bc:	9c26983a 	sll	r19,r19,r16
1000b8c0:	9c62b03a 	or	r17,r19,r17
1000b8c4:	8822c03a 	cmpne	r17,r17,zero
1000b8c8:	88a2b03a 	or	r17,r17,r2
1000b8cc:	000b883a 	mov	r5,zero
1000b8d0:	0021883a 	mov	r16,zero
1000b8d4:	003fb406 	br	1000b7a8 <__alt_data_end+0xf800b7a8>
1000b8d8:	18bff804 	addi	r2,r3,-32
1000b8dc:	01000804 	movi	r4,32
1000b8e0:	4084d83a 	srl	r2,r8,r2
1000b8e4:	19003f26 	beq	r3,r4,1000b9e4 <__adddf3+0x568>
1000b8e8:	01001004 	movi	r4,64
1000b8ec:	20c7c83a 	sub	r3,r4,r3
1000b8f0:	40d0983a 	sll	r8,r8,r3
1000b8f4:	418cb03a 	or	r6,r8,r6
1000b8f8:	300cc03a 	cmpne	r6,r6,zero
1000b8fc:	308cb03a 	or	r6,r6,r2
1000b900:	0007883a 	mov	r3,zero
1000b904:	003f3406 	br	1000b5d8 <__alt_data_end+0xf800b5d8>
1000b908:	80002326 	beq	r16,zero,1000b998 <__adddf3+0x51c>
1000b90c:	0101ffc4 	movi	r4,2047
1000b910:	11005e26 	beq	r2,r4,1000ba8c <__adddf3+0x610>
1000b914:	00c7c83a 	sub	r3,zero,r3
1000b918:	29402034 	orhi	r5,r5,128
1000b91c:	01000e04 	movi	r4,56
1000b920:	20c07216 	blt	r4,r3,1000baec <__adddf3+0x670>
1000b924:	010007c4 	movi	r4,31
1000b928:	20c0ce16 	blt	r4,r3,1000bc64 <__adddf3+0x7e8>
1000b92c:	01000804 	movi	r4,32
1000b930:	20c9c83a 	sub	r4,r4,r3
1000b934:	2914983a 	sll	r10,r5,r4
1000b938:	88d2d83a 	srl	r9,r17,r3
1000b93c:	8908983a 	sll	r4,r17,r4
1000b940:	28c6d83a 	srl	r3,r5,r3
1000b944:	5262b03a 	or	r17,r10,r9
1000b948:	2008c03a 	cmpne	r4,r4,zero
1000b94c:	8922b03a 	or	r17,r17,r4
1000b950:	3463c83a 	sub	r17,r6,r17
1000b954:	40c7c83a 	sub	r3,r8,r3
1000b958:	344d803a 	cmpltu	r6,r6,r17
1000b95c:	198bc83a 	sub	r5,r3,r6
1000b960:	1021883a 	mov	r16,r2
1000b964:	3825883a 	mov	r18,r7
1000b968:	003f2006 	br	1000b5ec <__alt_data_end+0xf800b5ec>
1000b96c:	9886b03a 	or	r3,r19,r2
1000b970:	1800141e 	bne	r3,zero,1000b9c4 <__adddf3+0x548>
1000b974:	0007883a 	mov	r3,zero
1000b978:	000b883a 	mov	r5,zero
1000b97c:	0023883a 	mov	r17,zero
1000b980:	0021883a 	mov	r16,zero
1000b984:	003f3c06 	br	1000b678 <__alt_data_end+0xf800b678>
1000b988:	418cb03a 	or	r6,r8,r6
1000b98c:	300cc03a 	cmpne	r6,r6,zero
1000b990:	0011883a 	mov	r8,zero
1000b994:	003f5606 	br	1000b6f0 <__alt_data_end+0xf800b6f0>
1000b998:	2c48b03a 	or	r4,r5,r17
1000b99c:	20003b26 	beq	r4,zero,1000ba8c <__adddf3+0x610>
1000b9a0:	00c6303a 	nor	r3,zero,r3
1000b9a4:	1800371e 	bne	r3,zero,1000ba84 <__adddf3+0x608>
1000b9a8:	3463c83a 	sub	r17,r6,r17
1000b9ac:	414bc83a 	sub	r5,r8,r5
1000b9b0:	344d803a 	cmpltu	r6,r6,r17
1000b9b4:	298bc83a 	sub	r5,r5,r6
1000b9b8:	1021883a 	mov	r16,r2
1000b9bc:	3825883a 	mov	r18,r7
1000b9c0:	003f0a06 	br	1000b5ec <__alt_data_end+0xf800b5ec>
1000b9c4:	1023883a 	mov	r17,r2
1000b9c8:	003f0d06 	br	1000b600 <__alt_data_end+0xf800b600>
1000b9cc:	0007883a 	mov	r3,zero
1000b9d0:	000b883a 	mov	r5,zero
1000b9d4:	0023883a 	mov	r17,zero
1000b9d8:	003f2706 	br	1000b678 <__alt_data_end+0xf800b678>
1000b9dc:	0027883a 	mov	r19,zero
1000b9e0:	003fb706 	br	1000b8c0 <__alt_data_end+0xf800b8c0>
1000b9e4:	0011883a 	mov	r8,zero
1000b9e8:	003fc206 	br	1000b8f4 <__alt_data_end+0xf800b8f4>
1000b9ec:	2c44b03a 	or	r2,r5,r17
1000b9f0:	8000871e 	bne	r16,zero,1000bc10 <__adddf3+0x794>
1000b9f4:	1000b126 	beq	r2,zero,1000bcbc <__adddf3+0x840>
1000b9f8:	4184b03a 	or	r2,r8,r6
1000b9fc:	103ebe26 	beq	r2,zero,1000b4f8 <__alt_data_end+0xf800b4f8>
1000ba00:	3445883a 	add	r2,r6,r17
1000ba04:	1463803a 	cmpltu	r17,r2,r17
1000ba08:	414b883a 	add	r5,r8,r5
1000ba0c:	2c4b883a 	add	r5,r5,r17
1000ba10:	28c0202c 	andhi	r3,r5,128
1000ba14:	1023883a 	mov	r17,r2
1000ba18:	183f6326 	beq	r3,zero,1000b7a8 <__alt_data_end+0xf800b7a8>
1000ba1c:	00bfe034 	movhi	r2,65408
1000ba20:	10bfffc4 	addi	r2,r2,-1
1000ba24:	2021883a 	mov	r16,r4
1000ba28:	288a703a 	and	r5,r5,r2
1000ba2c:	003eb206 	br	1000b4f8 <__alt_data_end+0xf800b4f8>
1000ba30:	2c44b03a 	or	r2,r5,r17
1000ba34:	8000251e 	bne	r16,zero,1000bacc <__adddf3+0x650>
1000ba38:	10004b1e 	bne	r2,zero,1000bb68 <__adddf3+0x6ec>
1000ba3c:	4184b03a 	or	r2,r8,r6
1000ba40:	103fe226 	beq	r2,zero,1000b9cc <__alt_data_end+0xf800b9cc>
1000ba44:	400b883a 	mov	r5,r8
1000ba48:	3023883a 	mov	r17,r6
1000ba4c:	3825883a 	mov	r18,r7
1000ba50:	003ea906 	br	1000b4f8 <__alt_data_end+0xf800b4f8>
1000ba54:	20bff804 	addi	r2,r4,-32
1000ba58:	01c00804 	movi	r7,32
1000ba5c:	4084d83a 	srl	r2,r8,r2
1000ba60:	21c07e26 	beq	r4,r7,1000bc5c <__adddf3+0x7e0>
1000ba64:	01c01004 	movi	r7,64
1000ba68:	3909c83a 	sub	r4,r7,r4
1000ba6c:	4110983a 	sll	r8,r8,r4
1000ba70:	418cb03a 	or	r6,r8,r6
1000ba74:	300cc03a 	cmpne	r6,r6,zero
1000ba78:	308cb03a 	or	r6,r6,r2
1000ba7c:	0011883a 	mov	r8,zero
1000ba80:	003f1b06 	br	1000b6f0 <__alt_data_end+0xf800b6f0>
1000ba84:	0101ffc4 	movi	r4,2047
1000ba88:	113fa41e 	bne	r2,r4,1000b91c <__alt_data_end+0xf800b91c>
1000ba8c:	400b883a 	mov	r5,r8
1000ba90:	3023883a 	mov	r17,r6
1000ba94:	1021883a 	mov	r16,r2
1000ba98:	3825883a 	mov	r18,r7
1000ba9c:	003e9606 	br	1000b4f8 <__alt_data_end+0xf800b4f8>
1000baa0:	80001a1e 	bne	r16,zero,1000bb0c <__adddf3+0x690>
1000baa4:	2c4eb03a 	or	r7,r5,r17
1000baa8:	38005526 	beq	r7,zero,1000bc00 <__adddf3+0x784>
1000baac:	0108303a 	nor	r4,zero,r4
1000bab0:	2000511e 	bne	r4,zero,1000bbf8 <__adddf3+0x77c>
1000bab4:	89a3883a 	add	r17,r17,r6
1000bab8:	414b883a 	add	r5,r8,r5
1000babc:	898d803a 	cmpltu	r6,r17,r6
1000bac0:	298b883a 	add	r5,r5,r6
1000bac4:	1021883a 	mov	r16,r2
1000bac8:	003f0e06 	br	1000b704 <__alt_data_end+0xf800b704>
1000bacc:	1000341e 	bne	r2,zero,1000bba0 <__adddf3+0x724>
1000bad0:	4184b03a 	or	r2,r8,r6
1000bad4:	10006f26 	beq	r2,zero,1000bc94 <__adddf3+0x818>
1000bad8:	400b883a 	mov	r5,r8
1000badc:	3023883a 	mov	r17,r6
1000bae0:	3825883a 	mov	r18,r7
1000bae4:	0401ffc4 	movi	r16,2047
1000bae8:	003e8306 	br	1000b4f8 <__alt_data_end+0xf800b4f8>
1000baec:	2c62b03a 	or	r17,r5,r17
1000baf0:	8822c03a 	cmpne	r17,r17,zero
1000baf4:	0007883a 	mov	r3,zero
1000baf8:	003f9506 	br	1000b950 <__alt_data_end+0xf800b950>
1000bafc:	1021883a 	mov	r16,r2
1000bb00:	000b883a 	mov	r5,zero
1000bb04:	0023883a 	mov	r17,zero
1000bb08:	003edb06 	br	1000b678 <__alt_data_end+0xf800b678>
1000bb0c:	01c1ffc4 	movi	r7,2047
1000bb10:	11c03b26 	beq	r2,r7,1000bc00 <__adddf3+0x784>
1000bb14:	0109c83a 	sub	r4,zero,r4
1000bb18:	29402034 	orhi	r5,r5,128
1000bb1c:	01c00e04 	movi	r7,56
1000bb20:	39006216 	blt	r7,r4,1000bcac <__adddf3+0x830>
1000bb24:	01c007c4 	movi	r7,31
1000bb28:	39006b16 	blt	r7,r4,1000bcd8 <__adddf3+0x85c>
1000bb2c:	01c00804 	movi	r7,32
1000bb30:	390fc83a 	sub	r7,r7,r4
1000bb34:	29d4983a 	sll	r10,r5,r7
1000bb38:	8912d83a 	srl	r9,r17,r4
1000bb3c:	89ce983a 	sll	r7,r17,r7
1000bb40:	2908d83a 	srl	r4,r5,r4
1000bb44:	5262b03a 	or	r17,r10,r9
1000bb48:	380ac03a 	cmpne	r5,r7,zero
1000bb4c:	8962b03a 	or	r17,r17,r5
1000bb50:	89a3883a 	add	r17,r17,r6
1000bb54:	2211883a 	add	r8,r4,r8
1000bb58:	898d803a 	cmpltu	r6,r17,r6
1000bb5c:	418b883a 	add	r5,r8,r6
1000bb60:	1021883a 	mov	r16,r2
1000bb64:	003ee706 	br	1000b704 <__alt_data_end+0xf800b704>
1000bb68:	4184b03a 	or	r2,r8,r6
1000bb6c:	103e6226 	beq	r2,zero,1000b4f8 <__alt_data_end+0xf800b4f8>
1000bb70:	8987c83a 	sub	r3,r17,r6
1000bb74:	88c9803a 	cmpltu	r4,r17,r3
1000bb78:	2a05c83a 	sub	r2,r5,r8
1000bb7c:	1105c83a 	sub	r2,r2,r4
1000bb80:	1100202c 	andhi	r4,r2,128
1000bb84:	203f0426 	beq	r4,zero,1000b798 <__alt_data_end+0xf800b798>
1000bb88:	3463c83a 	sub	r17,r6,r17
1000bb8c:	414bc83a 	sub	r5,r8,r5
1000bb90:	344d803a 	cmpltu	r6,r6,r17
1000bb94:	298bc83a 	sub	r5,r5,r6
1000bb98:	3825883a 	mov	r18,r7
1000bb9c:	003e5606 	br	1000b4f8 <__alt_data_end+0xf800b4f8>
1000bba0:	4184b03a 	or	r2,r8,r6
1000bba4:	10002b26 	beq	r2,zero,1000bc54 <__adddf3+0x7d8>
1000bba8:	2804d0fa 	srli	r2,r5,3
1000bbac:	8822d0fa 	srli	r17,r17,3
1000bbb0:	280a977a 	slli	r5,r5,29
1000bbb4:	10c0022c 	andhi	r3,r2,8
1000bbb8:	2c62b03a 	or	r17,r5,r17
1000bbbc:	18000826 	beq	r3,zero,1000bbe0 <__adddf3+0x764>
1000bbc0:	4008d0fa 	srli	r4,r8,3
1000bbc4:	20c0022c 	andhi	r3,r4,8
1000bbc8:	1800051e 	bne	r3,zero,1000bbe0 <__adddf3+0x764>
1000bbcc:	300cd0fa 	srli	r6,r6,3
1000bbd0:	4010977a 	slli	r8,r8,29
1000bbd4:	2005883a 	mov	r2,r4
1000bbd8:	3825883a 	mov	r18,r7
1000bbdc:	41a2b03a 	or	r17,r8,r6
1000bbe0:	880ad77a 	srli	r5,r17,29
1000bbe4:	100490fa 	slli	r2,r2,3
1000bbe8:	882290fa 	slli	r17,r17,3
1000bbec:	0401ffc4 	movi	r16,2047
1000bbf0:	288ab03a 	or	r5,r5,r2
1000bbf4:	003e4006 	br	1000b4f8 <__alt_data_end+0xf800b4f8>
1000bbf8:	01c1ffc4 	movi	r7,2047
1000bbfc:	11ffc71e 	bne	r2,r7,1000bb1c <__alt_data_end+0xf800bb1c>
1000bc00:	400b883a 	mov	r5,r8
1000bc04:	3023883a 	mov	r17,r6
1000bc08:	1021883a 	mov	r16,r2
1000bc0c:	003e3a06 	br	1000b4f8 <__alt_data_end+0xf800b4f8>
1000bc10:	10002d26 	beq	r2,zero,1000bcc8 <__adddf3+0x84c>
1000bc14:	4184b03a 	or	r2,r8,r6
1000bc18:	10000e26 	beq	r2,zero,1000bc54 <__adddf3+0x7d8>
1000bc1c:	2804d0fa 	srli	r2,r5,3
1000bc20:	8822d0fa 	srli	r17,r17,3
1000bc24:	280a977a 	slli	r5,r5,29
1000bc28:	10c0022c 	andhi	r3,r2,8
1000bc2c:	2c62b03a 	or	r17,r5,r17
1000bc30:	183feb26 	beq	r3,zero,1000bbe0 <__alt_data_end+0xf800bbe0>
1000bc34:	4008d0fa 	srli	r4,r8,3
1000bc38:	20c0022c 	andhi	r3,r4,8
1000bc3c:	183fe81e 	bne	r3,zero,1000bbe0 <__alt_data_end+0xf800bbe0>
1000bc40:	300cd0fa 	srli	r6,r6,3
1000bc44:	4010977a 	slli	r8,r8,29
1000bc48:	2005883a 	mov	r2,r4
1000bc4c:	41a2b03a 	or	r17,r8,r6
1000bc50:	003fe306 	br	1000bbe0 <__alt_data_end+0xf800bbe0>
1000bc54:	0401ffc4 	movi	r16,2047
1000bc58:	003e2706 	br	1000b4f8 <__alt_data_end+0xf800b4f8>
1000bc5c:	0011883a 	mov	r8,zero
1000bc60:	003f8306 	br	1000ba70 <__alt_data_end+0xf800ba70>
1000bc64:	193ff804 	addi	r4,r3,-32
1000bc68:	02400804 	movi	r9,32
1000bc6c:	2908d83a 	srl	r4,r5,r4
1000bc70:	1a402526 	beq	r3,r9,1000bd08 <__adddf3+0x88c>
1000bc74:	02401004 	movi	r9,64
1000bc78:	48c7c83a 	sub	r3,r9,r3
1000bc7c:	28ca983a 	sll	r5,r5,r3
1000bc80:	2c62b03a 	or	r17,r5,r17
1000bc84:	8822c03a 	cmpne	r17,r17,zero
1000bc88:	8922b03a 	or	r17,r17,r4
1000bc8c:	0007883a 	mov	r3,zero
1000bc90:	003f2f06 	br	1000b950 <__alt_data_end+0xf800b950>
1000bc94:	01402034 	movhi	r5,128
1000bc98:	0007883a 	mov	r3,zero
1000bc9c:	297fffc4 	addi	r5,r5,-1
1000bca0:	047ffe04 	movi	r17,-8
1000bca4:	0401ffc4 	movi	r16,2047
1000bca8:	003e7306 	br	1000b678 <__alt_data_end+0xf800b678>
1000bcac:	2c62b03a 	or	r17,r5,r17
1000bcb0:	8822c03a 	cmpne	r17,r17,zero
1000bcb4:	0009883a 	mov	r4,zero
1000bcb8:	003fa506 	br	1000bb50 <__alt_data_end+0xf800bb50>
1000bcbc:	400b883a 	mov	r5,r8
1000bcc0:	3023883a 	mov	r17,r6
1000bcc4:	003e0c06 	br	1000b4f8 <__alt_data_end+0xf800b4f8>
1000bcc8:	400b883a 	mov	r5,r8
1000bccc:	3023883a 	mov	r17,r6
1000bcd0:	0401ffc4 	movi	r16,2047
1000bcd4:	003e0806 	br	1000b4f8 <__alt_data_end+0xf800b4f8>
1000bcd8:	21fff804 	addi	r7,r4,-32
1000bcdc:	02400804 	movi	r9,32
1000bce0:	29ced83a 	srl	r7,r5,r7
1000bce4:	22400a26 	beq	r4,r9,1000bd10 <__adddf3+0x894>
1000bce8:	02401004 	movi	r9,64
1000bcec:	4909c83a 	sub	r4,r9,r4
1000bcf0:	290a983a 	sll	r5,r5,r4
1000bcf4:	2c62b03a 	or	r17,r5,r17
1000bcf8:	8822c03a 	cmpne	r17,r17,zero
1000bcfc:	89e2b03a 	or	r17,r17,r7
1000bd00:	0009883a 	mov	r4,zero
1000bd04:	003f9206 	br	1000bb50 <__alt_data_end+0xf800bb50>
1000bd08:	000b883a 	mov	r5,zero
1000bd0c:	003fdc06 	br	1000bc80 <__alt_data_end+0xf800bc80>
1000bd10:	000b883a 	mov	r5,zero
1000bd14:	003ff706 	br	1000bcf4 <__alt_data_end+0xf800bcf4>

1000bd18 <__divdf3>:
1000bd18:	defff004 	addi	sp,sp,-64
1000bd1c:	dc800815 	stw	r18,32(sp)
1000bd20:	2824d53a 	srli	r18,r5,20
1000bd24:	dd800c15 	stw	r22,48(sp)
1000bd28:	282cd7fa 	srli	r22,r5,31
1000bd2c:	dc000615 	stw	r16,24(sp)
1000bd30:	04000434 	movhi	r16,16
1000bd34:	df000e15 	stw	fp,56(sp)
1000bd38:	dd000a15 	stw	r20,40(sp)
1000bd3c:	dcc00915 	stw	r19,36(sp)
1000bd40:	dc400715 	stw	r17,28(sp)
1000bd44:	843fffc4 	addi	r16,r16,-1
1000bd48:	dfc00f15 	stw	ra,60(sp)
1000bd4c:	ddc00d15 	stw	r23,52(sp)
1000bd50:	dd400b15 	stw	r21,44(sp)
1000bd54:	9481ffcc 	andi	r18,r18,2047
1000bd58:	2029883a 	mov	r20,r4
1000bd5c:	2027883a 	mov	r19,r4
1000bd60:	2c22703a 	and	r17,r5,r16
1000bd64:	b7003fcc 	andi	fp,r22,255
1000bd68:	90005e26 	beq	r18,zero,1000bee4 <__divdf3+0x1cc>
1000bd6c:	0081ffc4 	movi	r2,2047
1000bd70:	90803526 	beq	r18,r2,1000be48 <__divdf3+0x130>
1000bd74:	8c000434 	orhi	r16,r17,16
1000bd78:	2004d77a 	srli	r2,r4,29
1000bd7c:	802090fa 	slli	r16,r16,3
1000bd80:	202690fa 	slli	r19,r4,3
1000bd84:	94bf0044 	addi	r18,r18,-1023
1000bd88:	80a2b03a 	or	r17,r16,r2
1000bd8c:	0029883a 	mov	r20,zero
1000bd90:	0011883a 	mov	r8,zero
1000bd94:	380ad53a 	srli	r5,r7,20
1000bd98:	382ed7fa 	srli	r23,r7,31
1000bd9c:	04000434 	movhi	r16,16
1000bda0:	843fffc4 	addi	r16,r16,-1
1000bda4:	2941ffcc 	andi	r5,r5,2047
1000bda8:	302b883a 	mov	r21,r6
1000bdac:	3c20703a 	and	r16,r7,r16
1000bdb0:	ba403fcc 	andi	r9,r23,255
1000bdb4:	28006726 	beq	r5,zero,1000bf54 <__divdf3+0x23c>
1000bdb8:	0081ffc4 	movi	r2,2047
1000bdbc:	28805f26 	beq	r5,r2,1000bf3c <__divdf3+0x224>
1000bdc0:	84000434 	orhi	r16,r16,16
1000bdc4:	3004d77a 	srli	r2,r6,29
1000bdc8:	802090fa 	slli	r16,r16,3
1000bdcc:	302a90fa 	slli	r21,r6,3
1000bdd0:	297f0044 	addi	r5,r5,-1023
1000bdd4:	80a0b03a 	or	r16,r16,r2
1000bdd8:	000f883a 	mov	r7,zero
1000bddc:	3d06b03a 	or	r3,r7,r20
1000bde0:	180690ba 	slli	r3,r3,2
1000bde4:	00840074 	movhi	r2,4097
1000bde8:	10af8204 	addi	r2,r2,-16888
1000bdec:	1885883a 	add	r2,r3,r2
1000bdf0:	10800017 	ldw	r2,0(r2)
1000bdf4:	b5c8f03a 	xor	r4,r22,r23
1000bdf8:	200d883a 	mov	r6,r4
1000bdfc:	25003fcc 	andi	r20,r4,255
1000be00:	9165c83a 	sub	r18,r18,r5
1000be04:	1000683a 	jmp	r2
1000be08:	1000c050 	cmplti	zero,r2,769
1000be0c:	1000be80 	call	11000be8 <_gp+0xfe6188>
1000be10:	1000c014 	ori	zero,r2,768
1000be14:	1000be64 	muli	zero,r2,761
1000be18:	1000c014 	ori	zero,r2,768
1000be1c:	1000bfe8 	cmpgeui	zero,r2,767
1000be20:	1000c014 	ori	zero,r2,768
1000be24:	1000be64 	muli	zero,r2,761
1000be28:	1000be80 	call	11000be8 <_gp+0xfe6188>
1000be2c:	1000be80 	call	11000be8 <_gp+0xfe6188>
1000be30:	1000bfe8 	cmpgeui	zero,r2,767
1000be34:	1000be64 	muli	zero,r2,761
1000be38:	1000be74 	orhi	zero,r2,761
1000be3c:	1000be74 	orhi	zero,r2,761
1000be40:	1000be74 	orhi	zero,r2,761
1000be44:	1000c024 	muli	zero,r2,768
1000be48:	8904b03a 	or	r2,r17,r4
1000be4c:	1000631e 	bne	r2,zero,1000bfdc <__divdf3+0x2c4>
1000be50:	05000204 	movi	r20,8
1000be54:	0023883a 	mov	r17,zero
1000be58:	0027883a 	mov	r19,zero
1000be5c:	02000084 	movi	r8,2
1000be60:	003fcc06 	br	1000bd94 <__alt_data_end+0xf800bd94>
1000be64:	8023883a 	mov	r17,r16
1000be68:	a827883a 	mov	r19,r21
1000be6c:	4839883a 	mov	fp,r9
1000be70:	3811883a 	mov	r8,r7
1000be74:	00800084 	movi	r2,2
1000be78:	4081531e 	bne	r8,r2,1000c3c8 <__divdf3+0x6b0>
1000be7c:	e029883a 	mov	r20,fp
1000be80:	a180004c 	andi	r6,r20,1
1000be84:	0201ffc4 	movi	r8,2047
1000be88:	000b883a 	mov	r5,zero
1000be8c:	0027883a 	mov	r19,zero
1000be90:	4010953a 	slli	r8,r8,20
1000be94:	30c03fcc 	andi	r3,r6,255
1000be98:	04000434 	movhi	r16,16
1000be9c:	180697fa 	slli	r3,r3,31
1000bea0:	843fffc4 	addi	r16,r16,-1
1000bea4:	2c20703a 	and	r16,r5,r16
1000bea8:	8220b03a 	or	r16,r16,r8
1000beac:	80c6b03a 	or	r3,r16,r3
1000beb0:	9805883a 	mov	r2,r19
1000beb4:	dfc00f17 	ldw	ra,60(sp)
1000beb8:	df000e17 	ldw	fp,56(sp)
1000bebc:	ddc00d17 	ldw	r23,52(sp)
1000bec0:	dd800c17 	ldw	r22,48(sp)
1000bec4:	dd400b17 	ldw	r21,44(sp)
1000bec8:	dd000a17 	ldw	r20,40(sp)
1000becc:	dcc00917 	ldw	r19,36(sp)
1000bed0:	dc800817 	ldw	r18,32(sp)
1000bed4:	dc400717 	ldw	r17,28(sp)
1000bed8:	dc000617 	ldw	r16,24(sp)
1000bedc:	dec01004 	addi	sp,sp,64
1000bee0:	f800283a 	ret
1000bee4:	8904b03a 	or	r2,r17,r4
1000bee8:	10003726 	beq	r2,zero,1000bfc8 <__divdf3+0x2b0>
1000beec:	88014d26 	beq	r17,zero,1000c424 <__divdf3+0x70c>
1000bef0:	8809883a 	mov	r4,r17
1000bef4:	d9800215 	stw	r6,8(sp)
1000bef8:	d9c00515 	stw	r7,20(sp)
1000befc:	000dc140 	call	1000dc14 <__clzsi2>
1000bf00:	d9800217 	ldw	r6,8(sp)
1000bf04:	d9c00517 	ldw	r7,20(sp)
1000bf08:	1007883a 	mov	r3,r2
1000bf0c:	01000a04 	movi	r4,40
1000bf10:	1cfffe04 	addi	r19,r3,-8
1000bf14:	20c9c83a 	sub	r4,r4,r3
1000bf18:	8cca983a 	sll	r5,r17,r19
1000bf1c:	a108d83a 	srl	r4,r20,r4
1000bf20:	a4e6983a 	sll	r19,r20,r19
1000bf24:	2162b03a 	or	r17,r4,r5
1000bf28:	04bf0344 	movi	r18,-1011
1000bf2c:	90e5c83a 	sub	r18,r18,r3
1000bf30:	0029883a 	mov	r20,zero
1000bf34:	0011883a 	mov	r8,zero
1000bf38:	003f9606 	br	1000bd94 <__alt_data_end+0xf800bd94>
1000bf3c:	8184b03a 	or	r2,r16,r6
1000bf40:	10001f1e 	bne	r2,zero,1000bfc0 <__divdf3+0x2a8>
1000bf44:	0021883a 	mov	r16,zero
1000bf48:	002b883a 	mov	r21,zero
1000bf4c:	01c00084 	movi	r7,2
1000bf50:	003fa206 	br	1000bddc <__alt_data_end+0xf800bddc>
1000bf54:	8184b03a 	or	r2,r16,r6
1000bf58:	10001526 	beq	r2,zero,1000bfb0 <__divdf3+0x298>
1000bf5c:	80013d26 	beq	r16,zero,1000c454 <__divdf3+0x73c>
1000bf60:	8009883a 	mov	r4,r16
1000bf64:	d9800215 	stw	r6,8(sp)
1000bf68:	da000315 	stw	r8,12(sp)
1000bf6c:	da400415 	stw	r9,16(sp)
1000bf70:	000dc140 	call	1000dc14 <__clzsi2>
1000bf74:	d9800217 	ldw	r6,8(sp)
1000bf78:	da000317 	ldw	r8,12(sp)
1000bf7c:	da400417 	ldw	r9,16(sp)
1000bf80:	1007883a 	mov	r3,r2
1000bf84:	01000a04 	movi	r4,40
1000bf88:	1d7ffe04 	addi	r21,r3,-8
1000bf8c:	20c9c83a 	sub	r4,r4,r3
1000bf90:	8560983a 	sll	r16,r16,r21
1000bf94:	3108d83a 	srl	r4,r6,r4
1000bf98:	356a983a 	sll	r21,r6,r21
1000bf9c:	2420b03a 	or	r16,r4,r16
1000bfa0:	017f0344 	movi	r5,-1011
1000bfa4:	28cbc83a 	sub	r5,r5,r3
1000bfa8:	000f883a 	mov	r7,zero
1000bfac:	003f8b06 	br	1000bddc <__alt_data_end+0xf800bddc>
1000bfb0:	0021883a 	mov	r16,zero
1000bfb4:	002b883a 	mov	r21,zero
1000bfb8:	01c00044 	movi	r7,1
1000bfbc:	003f8706 	br	1000bddc <__alt_data_end+0xf800bddc>
1000bfc0:	01c000c4 	movi	r7,3
1000bfc4:	003f8506 	br	1000bddc <__alt_data_end+0xf800bddc>
1000bfc8:	05000104 	movi	r20,4
1000bfcc:	0023883a 	mov	r17,zero
1000bfd0:	0027883a 	mov	r19,zero
1000bfd4:	02000044 	movi	r8,1
1000bfd8:	003f6e06 	br	1000bd94 <__alt_data_end+0xf800bd94>
1000bfdc:	05000304 	movi	r20,12
1000bfe0:	020000c4 	movi	r8,3
1000bfe4:	003f6b06 	br	1000bd94 <__alt_data_end+0xf800bd94>
1000bfe8:	01400434 	movhi	r5,16
1000bfec:	000d883a 	mov	r6,zero
1000bff0:	297fffc4 	addi	r5,r5,-1
1000bff4:	04ffffc4 	movi	r19,-1
1000bff8:	0201ffc4 	movi	r8,2047
1000bffc:	003fa406 	br	1000be90 <__alt_data_end+0xf800be90>
1000c000:	043f0084 	movi	r16,-1022
1000c004:	84a1c83a 	sub	r16,r16,r18
1000c008:	00800e04 	movi	r2,56
1000c00c:	14014d0e 	bge	r2,r16,1000c544 <__divdf3+0x82c>
1000c010:	a180004c 	andi	r6,r20,1
1000c014:	0011883a 	mov	r8,zero
1000c018:	000b883a 	mov	r5,zero
1000c01c:	0027883a 	mov	r19,zero
1000c020:	003f9b06 	br	1000be90 <__alt_data_end+0xf800be90>
1000c024:	8880022c 	andhi	r2,r17,8
1000c028:	1000f026 	beq	r2,zero,1000c3ec <__divdf3+0x6d4>
1000c02c:	8080022c 	andhi	r2,r16,8
1000c030:	1000ee1e 	bne	r2,zero,1000c3ec <__divdf3+0x6d4>
1000c034:	00800434 	movhi	r2,16
1000c038:	81400234 	orhi	r5,r16,8
1000c03c:	10bfffc4 	addi	r2,r2,-1
1000c040:	b80d883a 	mov	r6,r23
1000c044:	288a703a 	and	r5,r5,r2
1000c048:	a827883a 	mov	r19,r21
1000c04c:	003fea06 	br	1000bff8 <__alt_data_end+0xf800bff8>
1000c050:	84411c36 	bltu	r16,r17,1000c4c4 <__divdf3+0x7ac>
1000c054:	8c011a26 	beq	r17,r16,1000c4c0 <__divdf3+0x7a8>
1000c058:	94bfffc4 	addi	r18,r18,-1
1000c05c:	dcc00015 	stw	r19,0(sp)
1000c060:	8811883a 	mov	r8,r17
1000c064:	002d883a 	mov	r22,zero
1000c068:	a80cd63a 	srli	r6,r21,24
1000c06c:	8020923a 	slli	r16,r16,8
1000c070:	a82a923a 	slli	r21,r21,8
1000c074:	4009883a 	mov	r4,r8
1000c078:	342eb03a 	or	r23,r6,r16
1000c07c:	dd400115 	stw	r21,4(sp)
1000c080:	b82ad43a 	srli	r21,r23,16
1000c084:	da000315 	stw	r8,12(sp)
1000c088:	bcffffcc 	andi	r19,r23,65535
1000c08c:	a80b883a 	mov	r5,r21
1000c090:	000b4440 	call	1000b444 <__udivsi3>
1000c094:	1009883a 	mov	r4,r2
1000c098:	980b883a 	mov	r5,r19
1000c09c:	1023883a 	mov	r17,r2
1000c0a0:	000b4540 	call	1000b454 <__mulsi3>
1000c0a4:	da000317 	ldw	r8,12(sp)
1000c0a8:	a80b883a 	mov	r5,r21
1000c0ac:	1039883a 	mov	fp,r2
1000c0b0:	4009883a 	mov	r4,r8
1000c0b4:	000b44c0 	call	1000b44c <__umodsi3>
1000c0b8:	d8c00017 	ldw	r3,0(sp)
1000c0bc:	1004943a 	slli	r2,r2,16
1000c0c0:	1810d43a 	srli	r8,r3,16
1000c0c4:	120eb03a 	or	r7,r2,r8
1000c0c8:	3f00062e 	bgeu	r7,fp,1000c0e4 <__divdf3+0x3cc>
1000c0cc:	3dcf883a 	add	r7,r7,r23
1000c0d0:	88bfffc4 	addi	r2,r17,-1
1000c0d4:	3dc10a36 	bltu	r7,r23,1000c500 <__divdf3+0x7e8>
1000c0d8:	3f01092e 	bgeu	r7,fp,1000c500 <__divdf3+0x7e8>
1000c0dc:	8c7fff84 	addi	r17,r17,-2
1000c0e0:	3dcf883a 	add	r7,r7,r23
1000c0e4:	3f39c83a 	sub	fp,r7,fp
1000c0e8:	e009883a 	mov	r4,fp
1000c0ec:	a80b883a 	mov	r5,r21
1000c0f0:	000b4440 	call	1000b444 <__udivsi3>
1000c0f4:	1009883a 	mov	r4,r2
1000c0f8:	980b883a 	mov	r5,r19
1000c0fc:	1021883a 	mov	r16,r2
1000c100:	000b4540 	call	1000b454 <__mulsi3>
1000c104:	e009883a 	mov	r4,fp
1000c108:	a80b883a 	mov	r5,r21
1000c10c:	d8800315 	stw	r2,12(sp)
1000c110:	000b44c0 	call	1000b44c <__umodsi3>
1000c114:	d9000017 	ldw	r4,0(sp)
1000c118:	1004943a 	slli	r2,r2,16
1000c11c:	da000317 	ldw	r8,12(sp)
1000c120:	20ffffcc 	andi	r3,r4,65535
1000c124:	10ceb03a 	or	r7,r2,r3
1000c128:	3a00062e 	bgeu	r7,r8,1000c144 <__divdf3+0x42c>
1000c12c:	3dcf883a 	add	r7,r7,r23
1000c130:	80bfffc4 	addi	r2,r16,-1
1000c134:	3dc0f036 	bltu	r7,r23,1000c4f8 <__divdf3+0x7e0>
1000c138:	3a00ef2e 	bgeu	r7,r8,1000c4f8 <__divdf3+0x7e0>
1000c13c:	843fff84 	addi	r16,r16,-2
1000c140:	3dcf883a 	add	r7,r7,r23
1000c144:	d8c00117 	ldw	r3,4(sp)
1000c148:	8822943a 	slli	r17,r17,16
1000c14c:	3a0fc83a 	sub	r7,r7,r8
1000c150:	1806d43a 	srli	r3,r3,16
1000c154:	8462b03a 	or	r17,r16,r17
1000c158:	8affffcc 	andi	r11,r17,65535
1000c15c:	d8c00015 	stw	r3,0(sp)
1000c160:	d8c00117 	ldw	r3,4(sp)
1000c164:	8820d43a 	srli	r16,r17,16
1000c168:	5809883a 	mov	r4,r11
1000c16c:	1f3fffcc 	andi	fp,r3,65535
1000c170:	e00b883a 	mov	r5,fp
1000c174:	d9c00515 	stw	r7,20(sp)
1000c178:	dac00215 	stw	r11,8(sp)
1000c17c:	000b4540 	call	1000b454 <__mulsi3>
1000c180:	8009883a 	mov	r4,r16
1000c184:	e00b883a 	mov	r5,fp
1000c188:	d8800415 	stw	r2,16(sp)
1000c18c:	000b4540 	call	1000b454 <__mulsi3>
1000c190:	d9400017 	ldw	r5,0(sp)
1000c194:	8009883a 	mov	r4,r16
1000c198:	d8800315 	stw	r2,12(sp)
1000c19c:	000b4540 	call	1000b454 <__mulsi3>
1000c1a0:	dac00217 	ldw	r11,8(sp)
1000c1a4:	d9400017 	ldw	r5,0(sp)
1000c1a8:	d8800215 	stw	r2,8(sp)
1000c1ac:	5809883a 	mov	r4,r11
1000c1b0:	000b4540 	call	1000b454 <__mulsi3>
1000c1b4:	da400417 	ldw	r9,16(sp)
1000c1b8:	da800317 	ldw	r10,12(sp)
1000c1bc:	d9c00517 	ldw	r7,20(sp)
1000c1c0:	480ad43a 	srli	r5,r9,16
1000c1c4:	5085883a 	add	r2,r10,r2
1000c1c8:	db000217 	ldw	r12,8(sp)
1000c1cc:	1151883a 	add	r8,r2,r5
1000c1d0:	4280022e 	bgeu	r8,r10,1000c1dc <__divdf3+0x4c4>
1000c1d4:	00800074 	movhi	r2,1
1000c1d8:	6099883a 	add	r12,r12,r2
1000c1dc:	400ad43a 	srli	r5,r8,16
1000c1e0:	4010943a 	slli	r8,r8,16
1000c1e4:	4c3fffcc 	andi	r16,r9,65535
1000c1e8:	6149883a 	add	r4,r12,r5
1000c1ec:	4411883a 	add	r8,r8,r16
1000c1f0:	3900a736 	bltu	r7,r4,1000c490 <__divdf3+0x778>
1000c1f4:	3900c426 	beq	r7,r4,1000c508 <__divdf3+0x7f0>
1000c1f8:	3909c83a 	sub	r4,r7,r4
1000c1fc:	b221c83a 	sub	r16,r22,r8
1000c200:	b42d803a 	cmpltu	r22,r22,r16
1000c204:	25adc83a 	sub	r22,r4,r22
1000c208:	b5c0c626 	beq	r22,r23,1000c524 <__divdf3+0x80c>
1000c20c:	b009883a 	mov	r4,r22
1000c210:	a80b883a 	mov	r5,r21
1000c214:	000b4440 	call	1000b444 <__udivsi3>
1000c218:	1009883a 	mov	r4,r2
1000c21c:	980b883a 	mov	r5,r19
1000c220:	d8800315 	stw	r2,12(sp)
1000c224:	000b4540 	call	1000b454 <__mulsi3>
1000c228:	a80b883a 	mov	r5,r21
1000c22c:	b009883a 	mov	r4,r22
1000c230:	d8800415 	stw	r2,16(sp)
1000c234:	000b44c0 	call	1000b44c <__umodsi3>
1000c238:	1004943a 	slli	r2,r2,16
1000c23c:	800ed43a 	srli	r7,r16,16
1000c240:	da400417 	ldw	r9,16(sp)
1000c244:	da000317 	ldw	r8,12(sp)
1000c248:	11cab03a 	or	r5,r2,r7
1000c24c:	2a40062e 	bgeu	r5,r9,1000c268 <__divdf3+0x550>
1000c250:	2dcb883a 	add	r5,r5,r23
1000c254:	40bfffc4 	addi	r2,r8,-1
1000c258:	2dc0b436 	bltu	r5,r23,1000c52c <__divdf3+0x814>
1000c25c:	2a40b32e 	bgeu	r5,r9,1000c52c <__divdf3+0x814>
1000c260:	423fff84 	addi	r8,r8,-2
1000c264:	2dcb883a 	add	r5,r5,r23
1000c268:	2a6dc83a 	sub	r22,r5,r9
1000c26c:	b009883a 	mov	r4,r22
1000c270:	a80b883a 	mov	r5,r21
1000c274:	da000315 	stw	r8,12(sp)
1000c278:	000b4440 	call	1000b444 <__udivsi3>
1000c27c:	980b883a 	mov	r5,r19
1000c280:	1009883a 	mov	r4,r2
1000c284:	d8800415 	stw	r2,16(sp)
1000c288:	000b4540 	call	1000b454 <__mulsi3>
1000c28c:	b009883a 	mov	r4,r22
1000c290:	a80b883a 	mov	r5,r21
1000c294:	1027883a 	mov	r19,r2
1000c298:	000b44c0 	call	1000b44c <__umodsi3>
1000c29c:	1004943a 	slli	r2,r2,16
1000c2a0:	843fffcc 	andi	r16,r16,65535
1000c2a4:	da000317 	ldw	r8,12(sp)
1000c2a8:	140eb03a 	or	r7,r2,r16
1000c2ac:	da400417 	ldw	r9,16(sp)
1000c2b0:	3cc0062e 	bgeu	r7,r19,1000c2cc <__divdf3+0x5b4>
1000c2b4:	3dcf883a 	add	r7,r7,r23
1000c2b8:	48bfffc4 	addi	r2,r9,-1
1000c2bc:	3dc09d36 	bltu	r7,r23,1000c534 <__divdf3+0x81c>
1000c2c0:	3cc09c2e 	bgeu	r7,r19,1000c534 <__divdf3+0x81c>
1000c2c4:	4a7fff84 	addi	r9,r9,-2
1000c2c8:	3dcf883a 	add	r7,r7,r23
1000c2cc:	4010943a 	slli	r8,r8,16
1000c2d0:	3cebc83a 	sub	r21,r7,r19
1000c2d4:	e00b883a 	mov	r5,fp
1000c2d8:	4a26b03a 	or	r19,r9,r8
1000c2dc:	99ffffcc 	andi	r7,r19,65535
1000c2e0:	9820d43a 	srli	r16,r19,16
1000c2e4:	3809883a 	mov	r4,r7
1000c2e8:	d9c00515 	stw	r7,20(sp)
1000c2ec:	000b4540 	call	1000b454 <__mulsi3>
1000c2f0:	8009883a 	mov	r4,r16
1000c2f4:	e00b883a 	mov	r5,fp
1000c2f8:	102d883a 	mov	r22,r2
1000c2fc:	000b4540 	call	1000b454 <__mulsi3>
1000c300:	d9400017 	ldw	r5,0(sp)
1000c304:	8009883a 	mov	r4,r16
1000c308:	1039883a 	mov	fp,r2
1000c30c:	000b4540 	call	1000b454 <__mulsi3>
1000c310:	d9c00517 	ldw	r7,20(sp)
1000c314:	d9400017 	ldw	r5,0(sp)
1000c318:	1021883a 	mov	r16,r2
1000c31c:	3809883a 	mov	r4,r7
1000c320:	000b4540 	call	1000b454 <__mulsi3>
1000c324:	b008d43a 	srli	r4,r22,16
1000c328:	e085883a 	add	r2,fp,r2
1000c32c:	1109883a 	add	r4,r2,r4
1000c330:	2700022e 	bgeu	r4,fp,1000c33c <__divdf3+0x624>
1000c334:	00800074 	movhi	r2,1
1000c338:	80a1883a 	add	r16,r16,r2
1000c33c:	200ad43a 	srli	r5,r4,16
1000c340:	2008943a 	slli	r4,r4,16
1000c344:	b5bfffcc 	andi	r22,r22,65535
1000c348:	8145883a 	add	r2,r16,r5
1000c34c:	2589883a 	add	r4,r4,r22
1000c350:	a8802c36 	bltu	r21,r2,1000c404 <__divdf3+0x6ec>
1000c354:	a880a426 	beq	r21,r2,1000c5e8 <__divdf3+0x8d0>
1000c358:	9cc00054 	ori	r19,r19,1
1000c35c:	9200ffc4 	addi	r8,r18,1023
1000c360:	023f270e 	bge	zero,r8,1000c000 <__alt_data_end+0xf800c000>
1000c364:	988001cc 	andi	r2,r19,7
1000c368:	10000726 	beq	r2,zero,1000c388 <__divdf3+0x670>
1000c36c:	990003cc 	andi	r4,r19,15
1000c370:	00800104 	movi	r2,4
1000c374:	20800426 	beq	r4,r2,1000c388 <__divdf3+0x670>
1000c378:	9885883a 	add	r2,r19,r2
1000c37c:	14e7803a 	cmpltu	r19,r2,r19
1000c380:	8ce3883a 	add	r17,r17,r19
1000c384:	1027883a 	mov	r19,r2
1000c388:	8880402c 	andhi	r2,r17,256
1000c38c:	10000426 	beq	r2,zero,1000c3a0 <__divdf3+0x688>
1000c390:	00bfc034 	movhi	r2,65280
1000c394:	10bfffc4 	addi	r2,r2,-1
1000c398:	92010004 	addi	r8,r18,1024
1000c39c:	88a2703a 	and	r17,r17,r2
1000c3a0:	0081ff84 	movi	r2,2046
1000c3a4:	123eb616 	blt	r2,r8,1000be80 <__alt_data_end+0xf800be80>
1000c3a8:	9826d0fa 	srli	r19,r19,3
1000c3ac:	8804977a 	slli	r2,r17,29
1000c3b0:	8820927a 	slli	r16,r17,9
1000c3b4:	4201ffcc 	andi	r8,r8,2047
1000c3b8:	14e6b03a 	or	r19,r2,r19
1000c3bc:	800ad33a 	srli	r5,r16,12
1000c3c0:	a180004c 	andi	r6,r20,1
1000c3c4:	003eb206 	br	1000be90 <__alt_data_end+0xf800be90>
1000c3c8:	008000c4 	movi	r2,3
1000c3cc:	4080ac26 	beq	r8,r2,1000c680 <__divdf3+0x968>
1000c3d0:	00800044 	movi	r2,1
1000c3d4:	4080591e 	bne	r8,r2,1000c53c <__divdf3+0x824>
1000c3d8:	e00d883a 	mov	r6,fp
1000c3dc:	0011883a 	mov	r8,zero
1000c3e0:	000b883a 	mov	r5,zero
1000c3e4:	0027883a 	mov	r19,zero
1000c3e8:	003ea906 	br	1000be90 <__alt_data_end+0xf800be90>
1000c3ec:	00800434 	movhi	r2,16
1000c3f0:	89400234 	orhi	r5,r17,8
1000c3f4:	10bfffc4 	addi	r2,r2,-1
1000c3f8:	b00d883a 	mov	r6,r22
1000c3fc:	288a703a 	and	r5,r5,r2
1000c400:	003efd06 	br	1000bff8 <__alt_data_end+0xf800bff8>
1000c404:	adcf883a 	add	r7,r21,r23
1000c408:	997fffc4 	addi	r5,r19,-1
1000c40c:	3dc0412e 	bgeu	r7,r23,1000c514 <__divdf3+0x7fc>
1000c410:	2827883a 	mov	r19,r5
1000c414:	38bfd01e 	bne	r7,r2,1000c358 <__alt_data_end+0xf800c358>
1000c418:	d8c00117 	ldw	r3,4(sp)
1000c41c:	193fce1e 	bne	r3,r4,1000c358 <__alt_data_end+0xf800c358>
1000c420:	003fce06 	br	1000c35c <__alt_data_end+0xf800c35c>
1000c424:	d9800215 	stw	r6,8(sp)
1000c428:	d9c00515 	stw	r7,20(sp)
1000c42c:	000dc140 	call	1000dc14 <__clzsi2>
1000c430:	10c00804 	addi	r3,r2,32
1000c434:	010009c4 	movi	r4,39
1000c438:	d9800217 	ldw	r6,8(sp)
1000c43c:	d9c00517 	ldw	r7,20(sp)
1000c440:	20feb20e 	bge	r4,r3,1000bf0c <__alt_data_end+0xf800bf0c>
1000c444:	117ffe04 	addi	r5,r2,-8
1000c448:	a162983a 	sll	r17,r20,r5
1000c44c:	0027883a 	mov	r19,zero
1000c450:	003eb506 	br	1000bf28 <__alt_data_end+0xf800bf28>
1000c454:	3009883a 	mov	r4,r6
1000c458:	d9800215 	stw	r6,8(sp)
1000c45c:	da000315 	stw	r8,12(sp)
1000c460:	da400415 	stw	r9,16(sp)
1000c464:	000dc140 	call	1000dc14 <__clzsi2>
1000c468:	10c00804 	addi	r3,r2,32
1000c46c:	010009c4 	movi	r4,39
1000c470:	d9800217 	ldw	r6,8(sp)
1000c474:	da000317 	ldw	r8,12(sp)
1000c478:	da400417 	ldw	r9,16(sp)
1000c47c:	20fec10e 	bge	r4,r3,1000bf84 <__alt_data_end+0xf800bf84>
1000c480:	10bffe04 	addi	r2,r2,-8
1000c484:	a8a0983a 	sll	r16,r21,r2
1000c488:	002b883a 	mov	r21,zero
1000c48c:	003ec406 	br	1000bfa0 <__alt_data_end+0xf800bfa0>
1000c490:	d8c00117 	ldw	r3,4(sp)
1000c494:	b0ed883a 	add	r22,r22,r3
1000c498:	b0c5803a 	cmpltu	r2,r22,r3
1000c49c:	15c5883a 	add	r2,r2,r23
1000c4a0:	11cf883a 	add	r7,r2,r7
1000c4a4:	88bfffc4 	addi	r2,r17,-1
1000c4a8:	b9c00d2e 	bgeu	r23,r7,1000c4e0 <__divdf3+0x7c8>
1000c4ac:	39003f36 	bltu	r7,r4,1000c5ac <__divdf3+0x894>
1000c4b0:	21c06a26 	beq	r4,r7,1000c65c <__divdf3+0x944>
1000c4b4:	3909c83a 	sub	r4,r7,r4
1000c4b8:	1023883a 	mov	r17,r2
1000c4bc:	003f4f06 	br	1000c1fc <__alt_data_end+0xf800c1fc>
1000c4c0:	9d7ee536 	bltu	r19,r21,1000c058 <__alt_data_end+0xf800c058>
1000c4c4:	982ed07a 	srli	r23,r19,1
1000c4c8:	880497fa 	slli	r2,r17,31
1000c4cc:	8810d07a 	srli	r8,r17,1
1000c4d0:	982c97fa 	slli	r22,r19,31
1000c4d4:	b884b03a 	or	r2,r23,r2
1000c4d8:	d8800015 	stw	r2,0(sp)
1000c4dc:	003ee206 	br	1000c068 <__alt_data_end+0xf800c068>
1000c4e0:	3dfff41e 	bne	r7,r23,1000c4b4 <__alt_data_end+0xf800c4b4>
1000c4e4:	d8c00117 	ldw	r3,4(sp)
1000c4e8:	b0fff02e 	bgeu	r22,r3,1000c4ac <__alt_data_end+0xf800c4ac>
1000c4ec:	b909c83a 	sub	r4,r23,r4
1000c4f0:	1023883a 	mov	r17,r2
1000c4f4:	003f4106 	br	1000c1fc <__alt_data_end+0xf800c1fc>
1000c4f8:	1021883a 	mov	r16,r2
1000c4fc:	003f1106 	br	1000c144 <__alt_data_end+0xf800c144>
1000c500:	1023883a 	mov	r17,r2
1000c504:	003ef706 	br	1000c0e4 <__alt_data_end+0xf800c0e4>
1000c508:	b23fe136 	bltu	r22,r8,1000c490 <__alt_data_end+0xf800c490>
1000c50c:	0009883a 	mov	r4,zero
1000c510:	003f3a06 	br	1000c1fc <__alt_data_end+0xf800c1fc>
1000c514:	38802c36 	bltu	r7,r2,1000c5c8 <__divdf3+0x8b0>
1000c518:	11c05326 	beq	r2,r7,1000c668 <__divdf3+0x950>
1000c51c:	2827883a 	mov	r19,r5
1000c520:	003f8d06 	br	1000c358 <__alt_data_end+0xf800c358>
1000c524:	04ffffc4 	movi	r19,-1
1000c528:	003f8c06 	br	1000c35c <__alt_data_end+0xf800c35c>
1000c52c:	1011883a 	mov	r8,r2
1000c530:	003f4d06 	br	1000c268 <__alt_data_end+0xf800c268>
1000c534:	1013883a 	mov	r9,r2
1000c538:	003f6406 	br	1000c2cc <__alt_data_end+0xf800c2cc>
1000c53c:	e029883a 	mov	r20,fp
1000c540:	003f8606 	br	1000c35c <__alt_data_end+0xf800c35c>
1000c544:	008007c4 	movi	r2,31
1000c548:	14002a16 	blt	r2,r16,1000c5f4 <__divdf3+0x8dc>
1000c54c:	91410784 	addi	r5,r18,1054
1000c550:	9c0cd83a 	srl	r6,r19,r16
1000c554:	8948983a 	sll	r4,r17,r5
1000c558:	9944983a 	sll	r2,r19,r5
1000c55c:	8c20d83a 	srl	r16,r17,r16
1000c560:	3108b03a 	or	r4,r6,r4
1000c564:	1004c03a 	cmpne	r2,r2,zero
1000c568:	2084b03a 	or	r2,r4,r2
1000c56c:	110001cc 	andi	r4,r2,7
1000c570:	20000726 	beq	r4,zero,1000c590 <__divdf3+0x878>
1000c574:	114003cc 	andi	r5,r2,15
1000c578:	01000104 	movi	r4,4
1000c57c:	29000426 	beq	r5,r4,1000c590 <__divdf3+0x878>
1000c580:	11000104 	addi	r4,r2,4
1000c584:	2085803a 	cmpltu	r2,r4,r2
1000c588:	80a1883a 	add	r16,r16,r2
1000c58c:	2005883a 	mov	r2,r4
1000c590:	8100202c 	andhi	r4,r16,128
1000c594:	20002d26 	beq	r4,zero,1000c64c <__divdf3+0x934>
1000c598:	a180004c 	andi	r6,r20,1
1000c59c:	02000044 	movi	r8,1
1000c5a0:	000b883a 	mov	r5,zero
1000c5a4:	0027883a 	mov	r19,zero
1000c5a8:	003e3906 	br	1000be90 <__alt_data_end+0xf800be90>
1000c5ac:	d8c00117 	ldw	r3,4(sp)
1000c5b0:	8c7fff84 	addi	r17,r17,-2
1000c5b4:	b0ed883a 	add	r22,r22,r3
1000c5b8:	b0c5803a 	cmpltu	r2,r22,r3
1000c5bc:	15c5883a 	add	r2,r2,r23
1000c5c0:	11cf883a 	add	r7,r2,r7
1000c5c4:	003f0c06 	br	1000c1f8 <__alt_data_end+0xf800c1f8>
1000c5c8:	d8c00117 	ldw	r3,4(sp)
1000c5cc:	997fff84 	addi	r5,r19,-2
1000c5d0:	18d1883a 	add	r8,r3,r3
1000c5d4:	40c7803a 	cmpltu	r3,r8,r3
1000c5d8:	1dcd883a 	add	r6,r3,r23
1000c5dc:	398f883a 	add	r7,r7,r6
1000c5e0:	da000115 	stw	r8,4(sp)
1000c5e4:	003f8a06 	br	1000c410 <__alt_data_end+0xf800c410>
1000c5e8:	203f861e 	bne	r4,zero,1000c404 <__alt_data_end+0xf800c404>
1000c5ec:	d8000115 	stw	zero,4(sp)
1000c5f0:	003f8906 	br	1000c418 <__alt_data_end+0xf800c418>
1000c5f4:	00bef884 	movi	r2,-1054
1000c5f8:	1485c83a 	sub	r2,r2,r18
1000c5fc:	01000804 	movi	r4,32
1000c600:	8884d83a 	srl	r2,r17,r2
1000c604:	81001c26 	beq	r16,r4,1000c678 <__divdf3+0x960>
1000c608:	91010f84 	addi	r4,r18,1086
1000c60c:	8908983a 	sll	r4,r17,r4
1000c610:	24c8b03a 	or	r4,r4,r19
1000c614:	2008c03a 	cmpne	r4,r4,zero
1000c618:	2084b03a 	or	r2,r4,r2
1000c61c:	140001cc 	andi	r16,r2,7
1000c620:	8000061e 	bne	r16,zero,1000c63c <__divdf3+0x924>
1000c624:	000b883a 	mov	r5,zero
1000c628:	1004d0fa 	srli	r2,r2,3
1000c62c:	a180004c 	andi	r6,r20,1
1000c630:	0011883a 	mov	r8,zero
1000c634:	1426b03a 	or	r19,r2,r16
1000c638:	003e1506 	br	1000be90 <__alt_data_end+0xf800be90>
1000c63c:	114003cc 	andi	r5,r2,15
1000c640:	01000104 	movi	r4,4
1000c644:	0021883a 	mov	r16,zero
1000c648:	293fcd1e 	bne	r5,r4,1000c580 <__alt_data_end+0xf800c580>
1000c64c:	800a927a 	slli	r5,r16,9
1000c650:	8020977a 	slli	r16,r16,29
1000c654:	280ad33a 	srli	r5,r5,12
1000c658:	003ff306 	br	1000c628 <__alt_data_end+0xf800c628>
1000c65c:	b23fd336 	bltu	r22,r8,1000c5ac <__alt_data_end+0xf800c5ac>
1000c660:	1023883a 	mov	r17,r2
1000c664:	003fa906 	br	1000c50c <__alt_data_end+0xf800c50c>
1000c668:	d8c00117 	ldw	r3,4(sp)
1000c66c:	193fd636 	bltu	r3,r4,1000c5c8 <__alt_data_end+0xf800c5c8>
1000c670:	2827883a 	mov	r19,r5
1000c674:	003f6806 	br	1000c418 <__alt_data_end+0xf800c418>
1000c678:	0009883a 	mov	r4,zero
1000c67c:	003fe406 	br	1000c610 <__alt_data_end+0xf800c610>
1000c680:	00800434 	movhi	r2,16
1000c684:	89400234 	orhi	r5,r17,8
1000c688:	10bfffc4 	addi	r2,r2,-1
1000c68c:	e00d883a 	mov	r6,fp
1000c690:	288a703a 	and	r5,r5,r2
1000c694:	003e5806 	br	1000bff8 <__alt_data_end+0xf800bff8>

1000c698 <__eqdf2>:
1000c698:	2804d53a 	srli	r2,r5,20
1000c69c:	3806d53a 	srli	r3,r7,20
1000c6a0:	02000434 	movhi	r8,16
1000c6a4:	423fffc4 	addi	r8,r8,-1
1000c6a8:	1081ffcc 	andi	r2,r2,2047
1000c6ac:	0241ffc4 	movi	r9,2047
1000c6b0:	2a14703a 	and	r10,r5,r8
1000c6b4:	18c1ffcc 	andi	r3,r3,2047
1000c6b8:	3a10703a 	and	r8,r7,r8
1000c6bc:	280ad7fa 	srli	r5,r5,31
1000c6c0:	380ed7fa 	srli	r7,r7,31
1000c6c4:	12400f26 	beq	r2,r9,1000c704 <__eqdf2+0x6c>
1000c6c8:	0241ffc4 	movi	r9,2047
1000c6cc:	1a400326 	beq	r3,r9,1000c6dc <__eqdf2+0x44>
1000c6d0:	10c00526 	beq	r2,r3,1000c6e8 <__eqdf2+0x50>
1000c6d4:	00800044 	movi	r2,1
1000c6d8:	f800283a 	ret
1000c6dc:	4192b03a 	or	r9,r8,r6
1000c6e0:	483ffc1e 	bne	r9,zero,1000c6d4 <__alt_data_end+0xf800c6d4>
1000c6e4:	10fffb1e 	bne	r2,r3,1000c6d4 <__alt_data_end+0xf800c6d4>
1000c6e8:	523ffa1e 	bne	r10,r8,1000c6d4 <__alt_data_end+0xf800c6d4>
1000c6ec:	21bff91e 	bne	r4,r6,1000c6d4 <__alt_data_end+0xf800c6d4>
1000c6f0:	29c00826 	beq	r5,r7,1000c714 <__eqdf2+0x7c>
1000c6f4:	103ff71e 	bne	r2,zero,1000c6d4 <__alt_data_end+0xf800c6d4>
1000c6f8:	5104b03a 	or	r2,r10,r4
1000c6fc:	1004c03a 	cmpne	r2,r2,zero
1000c700:	f800283a 	ret
1000c704:	5112b03a 	or	r9,r10,r4
1000c708:	483fef26 	beq	r9,zero,1000c6c8 <__alt_data_end+0xf800c6c8>
1000c70c:	00800044 	movi	r2,1
1000c710:	f800283a 	ret
1000c714:	0005883a 	mov	r2,zero
1000c718:	f800283a 	ret

1000c71c <__gedf2>:
1000c71c:	2804d53a 	srli	r2,r5,20
1000c720:	3806d53a 	srli	r3,r7,20
1000c724:	02000434 	movhi	r8,16
1000c728:	423fffc4 	addi	r8,r8,-1
1000c72c:	0241ffc4 	movi	r9,2047
1000c730:	1081ffcc 	andi	r2,r2,2047
1000c734:	2a14703a 	and	r10,r5,r8
1000c738:	1a46703a 	and	r3,r3,r9
1000c73c:	3a10703a 	and	r8,r7,r8
1000c740:	280ad7fa 	srli	r5,r5,31
1000c744:	380ed7fa 	srli	r7,r7,31
1000c748:	12400b26 	beq	r2,r9,1000c778 <__gedf2+0x5c>
1000c74c:	1a401626 	beq	r3,r9,1000c7a8 <__gedf2+0x8c>
1000c750:	10000c1e 	bne	r2,zero,1000c784 <__gedf2+0x68>
1000c754:	5112b03a 	or	r9,r10,r4
1000c758:	4813003a 	cmpeq	r9,r9,zero
1000c75c:	4817883a 	mov	r11,r9
1000c760:	18000c1e 	bne	r3,zero,1000c794 <__gedf2+0x78>
1000c764:	4198b03a 	or	r12,r8,r6
1000c768:	60000a1e 	bne	r12,zero,1000c794 <__gedf2+0x78>
1000c76c:	48001326 	beq	r9,zero,1000c7bc <__gedf2+0xa0>
1000c770:	0005883a 	mov	r2,zero
1000c774:	f800283a 	ret
1000c778:	5112b03a 	or	r9,r10,r4
1000c77c:	4800191e 	bne	r9,zero,1000c7e4 <__gedf2+0xc8>
1000c780:	18800926 	beq	r3,r2,1000c7a8 <__gedf2+0x8c>
1000c784:	18000b1e 	bne	r3,zero,1000c7b4 <__gedf2+0x98>
1000c788:	4192b03a 	or	r9,r8,r6
1000c78c:	0017883a 	mov	r11,zero
1000c790:	48000a26 	beq	r9,zero,1000c7bc <__gedf2+0xa0>
1000c794:	39c03fcc 	andi	r7,r7,255
1000c798:	58000726 	beq	r11,zero,1000c7b8 <__gedf2+0x9c>
1000c79c:	3800081e 	bne	r7,zero,1000c7c0 <__gedf2+0xa4>
1000c7a0:	00bfffc4 	movi	r2,-1
1000c7a4:	f800283a 	ret
1000c7a8:	4192b03a 	or	r9,r8,r6
1000c7ac:	48000d1e 	bne	r9,zero,1000c7e4 <__gedf2+0xc8>
1000c7b0:	103fe826 	beq	r2,zero,1000c754 <__alt_data_end+0xf800c754>
1000c7b4:	39c03fcc 	andi	r7,r7,255
1000c7b8:	29c00326 	beq	r5,r7,1000c7c8 <__gedf2+0xac>
1000c7bc:	283ff81e 	bne	r5,zero,1000c7a0 <__alt_data_end+0xf800c7a0>
1000c7c0:	00800044 	movi	r2,1
1000c7c4:	f800283a 	ret
1000c7c8:	18bffc16 	blt	r3,r2,1000c7bc <__alt_data_end+0xf800c7bc>
1000c7cc:	10c00316 	blt	r2,r3,1000c7dc <__gedf2+0xc0>
1000c7d0:	42bffa36 	bltu	r8,r10,1000c7bc <__alt_data_end+0xf800c7bc>
1000c7d4:	52000526 	beq	r10,r8,1000c7ec <__gedf2+0xd0>
1000c7d8:	523fe52e 	bgeu	r10,r8,1000c770 <__alt_data_end+0xf800c770>
1000c7dc:	283ff026 	beq	r5,zero,1000c7a0 <__alt_data_end+0xf800c7a0>
1000c7e0:	003ff706 	br	1000c7c0 <__alt_data_end+0xf800c7c0>
1000c7e4:	00bfff84 	movi	r2,-2
1000c7e8:	f800283a 	ret
1000c7ec:	313ff336 	bltu	r6,r4,1000c7bc <__alt_data_end+0xf800c7bc>
1000c7f0:	21bfdf2e 	bgeu	r4,r6,1000c770 <__alt_data_end+0xf800c770>
1000c7f4:	283fea26 	beq	r5,zero,1000c7a0 <__alt_data_end+0xf800c7a0>
1000c7f8:	003ff106 	br	1000c7c0 <__alt_data_end+0xf800c7c0>

1000c7fc <__ledf2>:
1000c7fc:	2804d53a 	srli	r2,r5,20
1000c800:	3810d53a 	srli	r8,r7,20
1000c804:	00c00434 	movhi	r3,16
1000c808:	18ffffc4 	addi	r3,r3,-1
1000c80c:	0241ffc4 	movi	r9,2047
1000c810:	1081ffcc 	andi	r2,r2,2047
1000c814:	28d4703a 	and	r10,r5,r3
1000c818:	4250703a 	and	r8,r8,r9
1000c81c:	38c6703a 	and	r3,r7,r3
1000c820:	280ad7fa 	srli	r5,r5,31
1000c824:	380ed7fa 	srli	r7,r7,31
1000c828:	12400b26 	beq	r2,r9,1000c858 <__ledf2+0x5c>
1000c82c:	42401926 	beq	r8,r9,1000c894 <__ledf2+0x98>
1000c830:	10000c1e 	bne	r2,zero,1000c864 <__ledf2+0x68>
1000c834:	5112b03a 	or	r9,r10,r4
1000c838:	4813003a 	cmpeq	r9,r9,zero
1000c83c:	4817883a 	mov	r11,r9
1000c840:	40000f26 	beq	r8,zero,1000c880 <__ledf2+0x84>
1000c844:	39c03fcc 	andi	r7,r7,255
1000c848:	58001826 	beq	r11,zero,1000c8ac <__ledf2+0xb0>
1000c84c:	38000a1e 	bne	r7,zero,1000c878 <__ledf2+0x7c>
1000c850:	00bfffc4 	movi	r2,-1
1000c854:	f800283a 	ret
1000c858:	5112b03a 	or	r9,r10,r4
1000c85c:	48000f1e 	bne	r9,zero,1000c89c <__ledf2+0xa0>
1000c860:	40800c26 	beq	r8,r2,1000c894 <__ledf2+0x98>
1000c864:	4000101e 	bne	r8,zero,1000c8a8 <__ledf2+0xac>
1000c868:	1992b03a 	or	r9,r3,r6
1000c86c:	0017883a 	mov	r11,zero
1000c870:	483ff41e 	bne	r9,zero,1000c844 <__alt_data_end+0xf800c844>
1000c874:	283ff61e 	bne	r5,zero,1000c850 <__alt_data_end+0xf800c850>
1000c878:	00800044 	movi	r2,1
1000c87c:	f800283a 	ret
1000c880:	1998b03a 	or	r12,r3,r6
1000c884:	603fef1e 	bne	r12,zero,1000c844 <__alt_data_end+0xf800c844>
1000c888:	483ffa26 	beq	r9,zero,1000c874 <__alt_data_end+0xf800c874>
1000c88c:	0005883a 	mov	r2,zero
1000c890:	f800283a 	ret
1000c894:	1992b03a 	or	r9,r3,r6
1000c898:	48000226 	beq	r9,zero,1000c8a4 <__ledf2+0xa8>
1000c89c:	00800084 	movi	r2,2
1000c8a0:	f800283a 	ret
1000c8a4:	103fe326 	beq	r2,zero,1000c834 <__alt_data_end+0xf800c834>
1000c8a8:	39c03fcc 	andi	r7,r7,255
1000c8ac:	29fff11e 	bne	r5,r7,1000c874 <__alt_data_end+0xf800c874>
1000c8b0:	40bff016 	blt	r8,r2,1000c874 <__alt_data_end+0xf800c874>
1000c8b4:	12000316 	blt	r2,r8,1000c8c4 <__ledf2+0xc8>
1000c8b8:	1abfee36 	bltu	r3,r10,1000c874 <__alt_data_end+0xf800c874>
1000c8bc:	50c00326 	beq	r10,r3,1000c8cc <__ledf2+0xd0>
1000c8c0:	50fff22e 	bgeu	r10,r3,1000c88c <__alt_data_end+0xf800c88c>
1000c8c4:	283fe226 	beq	r5,zero,1000c850 <__alt_data_end+0xf800c850>
1000c8c8:	003feb06 	br	1000c878 <__alt_data_end+0xf800c878>
1000c8cc:	313fe936 	bltu	r6,r4,1000c874 <__alt_data_end+0xf800c874>
1000c8d0:	21bfee2e 	bgeu	r4,r6,1000c88c <__alt_data_end+0xf800c88c>
1000c8d4:	283fde26 	beq	r5,zero,1000c850 <__alt_data_end+0xf800c850>
1000c8d8:	003fe706 	br	1000c878 <__alt_data_end+0xf800c878>

1000c8dc <__muldf3>:
1000c8dc:	deffee04 	addi	sp,sp,-72
1000c8e0:	dd000c15 	stw	r20,48(sp)
1000c8e4:	2828d53a 	srli	r20,r5,20
1000c8e8:	dd400d15 	stw	r21,52(sp)
1000c8ec:	282ad7fa 	srli	r21,r5,31
1000c8f0:	dc000815 	stw	r16,32(sp)
1000c8f4:	04000434 	movhi	r16,16
1000c8f8:	ddc00f15 	stw	r23,60(sp)
1000c8fc:	dcc00b15 	stw	r19,44(sp)
1000c900:	dc800a15 	stw	r18,40(sp)
1000c904:	843fffc4 	addi	r16,r16,-1
1000c908:	dfc01115 	stw	ra,68(sp)
1000c90c:	df001015 	stw	fp,64(sp)
1000c910:	dd800e15 	stw	r22,56(sp)
1000c914:	dc400915 	stw	r17,36(sp)
1000c918:	a501ffcc 	andi	r20,r20,2047
1000c91c:	2025883a 	mov	r18,r4
1000c920:	202f883a 	mov	r23,r4
1000c924:	2c20703a 	and	r16,r5,r16
1000c928:	a827883a 	mov	r19,r21
1000c92c:	aa403fcc 	andi	r9,r21,255
1000c930:	a0005926 	beq	r20,zero,1000ca98 <__muldf3+0x1bc>
1000c934:	0081ffc4 	movi	r2,2047
1000c938:	a0803426 	beq	r20,r2,1000ca0c <__muldf3+0x130>
1000c93c:	84000434 	orhi	r16,r16,16
1000c940:	2004d77a 	srli	r2,r4,29
1000c944:	802090fa 	slli	r16,r16,3
1000c948:	202e90fa 	slli	r23,r4,3
1000c94c:	a53f0044 	addi	r20,r20,-1023
1000c950:	80a0b03a 	or	r16,r16,r2
1000c954:	000b883a 	mov	r5,zero
1000c958:	0039883a 	mov	fp,zero
1000c95c:	3806d53a 	srli	r3,r7,20
1000c960:	382cd7fa 	srli	r22,r7,31
1000c964:	00800434 	movhi	r2,16
1000c968:	10bfffc4 	addi	r2,r2,-1
1000c96c:	18c1ffcc 	andi	r3,r3,2047
1000c970:	3025883a 	mov	r18,r6
1000c974:	38a2703a 	and	r17,r7,r2
1000c978:	b2803fcc 	andi	r10,r22,255
1000c97c:	18006426 	beq	r3,zero,1000cb10 <__muldf3+0x234>
1000c980:	0081ffc4 	movi	r2,2047
1000c984:	18805c26 	beq	r3,r2,1000caf8 <__muldf3+0x21c>
1000c988:	8c400434 	orhi	r17,r17,16
1000c98c:	3004d77a 	srli	r2,r6,29
1000c990:	882290fa 	slli	r17,r17,3
1000c994:	302490fa 	slli	r18,r6,3
1000c998:	18ff0044 	addi	r3,r3,-1023
1000c99c:	88a2b03a 	or	r17,r17,r2
1000c9a0:	000f883a 	mov	r7,zero
1000c9a4:	394ab03a 	or	r5,r7,r5
1000c9a8:	280a90ba 	slli	r5,r5,2
1000c9ac:	00840074 	movhi	r2,4097
1000c9b0:	10b27304 	addi	r2,r2,-13876
1000c9b4:	288b883a 	add	r5,r5,r2
1000c9b8:	28800017 	ldw	r2,0(r5)
1000c9bc:	a0c7883a 	add	r3,r20,r3
1000c9c0:	b54cf03a 	xor	r6,r22,r21
1000c9c4:	1a000044 	addi	r8,r3,1
1000c9c8:	1000683a 	jmp	r2
1000c9cc:	1000cc10 	cmplti	zero,r2,816
1000c9d0:	1000cbfc 	xorhi	zero,r2,815
1000c9d4:	1000cbfc 	xorhi	zero,r2,815
1000c9d8:	1000cbe8 	cmpgeui	zero,r2,815
1000c9dc:	1000ca28 	cmpgeui	zero,r2,808
1000c9e0:	1000ca28 	cmpgeui	zero,r2,808
1000c9e4:	1000cbd0 	cmplti	zero,r2,815
1000c9e8:	1000cbe8 	cmpgeui	zero,r2,815
1000c9ec:	1000ca28 	cmpgeui	zero,r2,808
1000c9f0:	1000cbd0 	cmplti	zero,r2,815
1000c9f4:	1000ca28 	cmpgeui	zero,r2,808
1000c9f8:	1000cbe8 	cmpgeui	zero,r2,815
1000c9fc:	1000ca2c 	andhi	zero,r2,808
1000ca00:	1000ca2c 	andhi	zero,r2,808
1000ca04:	1000ca2c 	andhi	zero,r2,808
1000ca08:	1000cf4c 	andi	zero,r2,829
1000ca0c:	8104b03a 	or	r2,r16,r4
1000ca10:	10006c1e 	bne	r2,zero,1000cbc4 <__muldf3+0x2e8>
1000ca14:	01400204 	movi	r5,8
1000ca18:	0021883a 	mov	r16,zero
1000ca1c:	002f883a 	mov	r23,zero
1000ca20:	07000084 	movi	fp,2
1000ca24:	003fcd06 	br	1000c95c <__alt_data_end+0xf800c95c>
1000ca28:	3013883a 	mov	r9,r6
1000ca2c:	00800084 	movi	r2,2
1000ca30:	e080501e 	bne	fp,r2,1000cb74 <__muldf3+0x298>
1000ca34:	4cc0004c 	andi	r19,r9,1
1000ca38:	0101ffc4 	movi	r4,2047
1000ca3c:	0021883a 	mov	r16,zero
1000ca40:	002f883a 	mov	r23,zero
1000ca44:	2008953a 	slli	r4,r4,20
1000ca48:	98c03fcc 	andi	r3,r19,255
1000ca4c:	04400434 	movhi	r17,16
1000ca50:	8c7fffc4 	addi	r17,r17,-1
1000ca54:	180697fa 	slli	r3,r3,31
1000ca58:	8460703a 	and	r16,r16,r17
1000ca5c:	8120b03a 	or	r16,r16,r4
1000ca60:	80c6b03a 	or	r3,r16,r3
1000ca64:	b805883a 	mov	r2,r23
1000ca68:	dfc01117 	ldw	ra,68(sp)
1000ca6c:	df001017 	ldw	fp,64(sp)
1000ca70:	ddc00f17 	ldw	r23,60(sp)
1000ca74:	dd800e17 	ldw	r22,56(sp)
1000ca78:	dd400d17 	ldw	r21,52(sp)
1000ca7c:	dd000c17 	ldw	r20,48(sp)
1000ca80:	dcc00b17 	ldw	r19,44(sp)
1000ca84:	dc800a17 	ldw	r18,40(sp)
1000ca88:	dc400917 	ldw	r17,36(sp)
1000ca8c:	dc000817 	ldw	r16,32(sp)
1000ca90:	dec01204 	addi	sp,sp,72
1000ca94:	f800283a 	ret
1000ca98:	8104b03a 	or	r2,r16,r4
1000ca9c:	10004426 	beq	r2,zero,1000cbb0 <__muldf3+0x2d4>
1000caa0:	80014b26 	beq	r16,zero,1000cfd0 <__muldf3+0x6f4>
1000caa4:	8009883a 	mov	r4,r16
1000caa8:	d9800715 	stw	r6,28(sp)
1000caac:	d9c00215 	stw	r7,8(sp)
1000cab0:	da400415 	stw	r9,16(sp)
1000cab4:	000dc140 	call	1000dc14 <__clzsi2>
1000cab8:	d9800717 	ldw	r6,28(sp)
1000cabc:	d9c00217 	ldw	r7,8(sp)
1000cac0:	da400417 	ldw	r9,16(sp)
1000cac4:	1007883a 	mov	r3,r2
1000cac8:	01000a04 	movi	r4,40
1000cacc:	1dfffe04 	addi	r23,r3,-8
1000cad0:	20c9c83a 	sub	r4,r4,r3
1000cad4:	85e0983a 	sll	r16,r16,r23
1000cad8:	9108d83a 	srl	r4,r18,r4
1000cadc:	95ee983a 	sll	r23,r18,r23
1000cae0:	2420b03a 	or	r16,r4,r16
1000cae4:	053f0344 	movi	r20,-1011
1000cae8:	a0e9c83a 	sub	r20,r20,r3
1000caec:	000b883a 	mov	r5,zero
1000caf0:	0039883a 	mov	fp,zero
1000caf4:	003f9906 	br	1000c95c <__alt_data_end+0xf800c95c>
1000caf8:	8984b03a 	or	r2,r17,r6
1000cafc:	10002a1e 	bne	r2,zero,1000cba8 <__muldf3+0x2cc>
1000cb00:	0023883a 	mov	r17,zero
1000cb04:	0025883a 	mov	r18,zero
1000cb08:	01c00084 	movi	r7,2
1000cb0c:	003fa506 	br	1000c9a4 <__alt_data_end+0xf800c9a4>
1000cb10:	8984b03a 	or	r2,r17,r6
1000cb14:	10002026 	beq	r2,zero,1000cb98 <__muldf3+0x2bc>
1000cb18:	88011c26 	beq	r17,zero,1000cf8c <__muldf3+0x6b0>
1000cb1c:	8809883a 	mov	r4,r17
1000cb20:	d9400215 	stw	r5,8(sp)
1000cb24:	d9800715 	stw	r6,28(sp)
1000cb28:	da400415 	stw	r9,16(sp)
1000cb2c:	da800315 	stw	r10,12(sp)
1000cb30:	000dc140 	call	1000dc14 <__clzsi2>
1000cb34:	d9400217 	ldw	r5,8(sp)
1000cb38:	d9800717 	ldw	r6,28(sp)
1000cb3c:	da400417 	ldw	r9,16(sp)
1000cb40:	da800317 	ldw	r10,12(sp)
1000cb44:	1007883a 	mov	r3,r2
1000cb48:	01000a04 	movi	r4,40
1000cb4c:	1cbffe04 	addi	r18,r3,-8
1000cb50:	20c9c83a 	sub	r4,r4,r3
1000cb54:	8ca2983a 	sll	r17,r17,r18
1000cb58:	3108d83a 	srl	r4,r6,r4
1000cb5c:	34a4983a 	sll	r18,r6,r18
1000cb60:	2462b03a 	or	r17,r4,r17
1000cb64:	00bf0344 	movi	r2,-1011
1000cb68:	10c7c83a 	sub	r3,r2,r3
1000cb6c:	000f883a 	mov	r7,zero
1000cb70:	003f8c06 	br	1000c9a4 <__alt_data_end+0xf800c9a4>
1000cb74:	008000c4 	movi	r2,3
1000cb78:	e0816d26 	beq	fp,r2,1000d130 <__muldf3+0x854>
1000cb7c:	00800044 	movi	r2,1
1000cb80:	e081321e 	bne	fp,r2,1000d04c <__muldf3+0x770>
1000cb84:	48a6703a 	and	r19,r9,r2
1000cb88:	0009883a 	mov	r4,zero
1000cb8c:	0021883a 	mov	r16,zero
1000cb90:	002f883a 	mov	r23,zero
1000cb94:	003fab06 	br	1000ca44 <__alt_data_end+0xf800ca44>
1000cb98:	0023883a 	mov	r17,zero
1000cb9c:	0025883a 	mov	r18,zero
1000cba0:	01c00044 	movi	r7,1
1000cba4:	003f7f06 	br	1000c9a4 <__alt_data_end+0xf800c9a4>
1000cba8:	01c000c4 	movi	r7,3
1000cbac:	003f7d06 	br	1000c9a4 <__alt_data_end+0xf800c9a4>
1000cbb0:	01400104 	movi	r5,4
1000cbb4:	0021883a 	mov	r16,zero
1000cbb8:	002f883a 	mov	r23,zero
1000cbbc:	07000044 	movi	fp,1
1000cbc0:	003f6606 	br	1000c95c <__alt_data_end+0xf800c95c>
1000cbc4:	01400304 	movi	r5,12
1000cbc8:	070000c4 	movi	fp,3
1000cbcc:	003f6306 	br	1000c95c <__alt_data_end+0xf800c95c>
1000cbd0:	04000434 	movhi	r16,16
1000cbd4:	0027883a 	mov	r19,zero
1000cbd8:	843fffc4 	addi	r16,r16,-1
1000cbdc:	05ffffc4 	movi	r23,-1
1000cbe0:	0101ffc4 	movi	r4,2047
1000cbe4:	003f9706 	br	1000ca44 <__alt_data_end+0xf800ca44>
1000cbe8:	8821883a 	mov	r16,r17
1000cbec:	902f883a 	mov	r23,r18
1000cbf0:	5013883a 	mov	r9,r10
1000cbf4:	3839883a 	mov	fp,r7
1000cbf8:	003f8c06 	br	1000ca2c <__alt_data_end+0xf800ca2c>
1000cbfc:	8821883a 	mov	r16,r17
1000cc00:	902f883a 	mov	r23,r18
1000cc04:	3013883a 	mov	r9,r6
1000cc08:	3839883a 	mov	fp,r7
1000cc0c:	003f8706 	br	1000ca2c <__alt_data_end+0xf800ca2c>
1000cc10:	b82ad43a 	srli	r21,r23,16
1000cc14:	9038d43a 	srli	fp,r18,16
1000cc18:	bdffffcc 	andi	r23,r23,65535
1000cc1c:	94bfffcc 	andi	r18,r18,65535
1000cc20:	9009883a 	mov	r4,r18
1000cc24:	b80b883a 	mov	r5,r23
1000cc28:	d8c00515 	stw	r3,20(sp)
1000cc2c:	d9800715 	stw	r6,28(sp)
1000cc30:	da000615 	stw	r8,24(sp)
1000cc34:	000b4540 	call	1000b454 <__mulsi3>
1000cc38:	9009883a 	mov	r4,r18
1000cc3c:	a80b883a 	mov	r5,r21
1000cc40:	1029883a 	mov	r20,r2
1000cc44:	000b4540 	call	1000b454 <__mulsi3>
1000cc48:	e009883a 	mov	r4,fp
1000cc4c:	a80b883a 	mov	r5,r21
1000cc50:	102d883a 	mov	r22,r2
1000cc54:	000b4540 	call	1000b454 <__mulsi3>
1000cc58:	e009883a 	mov	r4,fp
1000cc5c:	b80b883a 	mov	r5,r23
1000cc60:	1027883a 	mov	r19,r2
1000cc64:	000b4540 	call	1000b454 <__mulsi3>
1000cc68:	a008d43a 	srli	r4,r20,16
1000cc6c:	b085883a 	add	r2,r22,r2
1000cc70:	d8c00517 	ldw	r3,20(sp)
1000cc74:	110f883a 	add	r7,r2,r4
1000cc78:	d9800717 	ldw	r6,28(sp)
1000cc7c:	da000617 	ldw	r8,24(sp)
1000cc80:	3d80022e 	bgeu	r7,r22,1000cc8c <__muldf3+0x3b0>
1000cc84:	00800074 	movhi	r2,1
1000cc88:	98a7883a 	add	r19,r19,r2
1000cc8c:	3804943a 	slli	r2,r7,16
1000cc90:	380ed43a 	srli	r7,r7,16
1000cc94:	882cd43a 	srli	r22,r17,16
1000cc98:	a53fffcc 	andi	r20,r20,65535
1000cc9c:	8c7fffcc 	andi	r17,r17,65535
1000cca0:	1529883a 	add	r20,r2,r20
1000cca4:	8809883a 	mov	r4,r17
1000cca8:	b80b883a 	mov	r5,r23
1000ccac:	d8c00515 	stw	r3,20(sp)
1000ccb0:	d9800715 	stw	r6,28(sp)
1000ccb4:	da000615 	stw	r8,24(sp)
1000ccb8:	d9c00015 	stw	r7,0(sp)
1000ccbc:	dd000115 	stw	r20,4(sp)
1000ccc0:	000b4540 	call	1000b454 <__mulsi3>
1000ccc4:	a80b883a 	mov	r5,r21
1000ccc8:	8809883a 	mov	r4,r17
1000cccc:	d8800415 	stw	r2,16(sp)
1000ccd0:	000b4540 	call	1000b454 <__mulsi3>
1000ccd4:	a80b883a 	mov	r5,r21
1000ccd8:	b009883a 	mov	r4,r22
1000ccdc:	1029883a 	mov	r20,r2
1000cce0:	000b4540 	call	1000b454 <__mulsi3>
1000cce4:	b009883a 	mov	r4,r22
1000cce8:	b80b883a 	mov	r5,r23
1000ccec:	102b883a 	mov	r21,r2
1000ccf0:	000b4540 	call	1000b454 <__mulsi3>
1000ccf4:	da400417 	ldw	r9,16(sp)
1000ccf8:	a085883a 	add	r2,r20,r2
1000ccfc:	d8c00517 	ldw	r3,20(sp)
1000cd00:	4808d43a 	srli	r4,r9,16
1000cd04:	d9800717 	ldw	r6,28(sp)
1000cd08:	da000617 	ldw	r8,24(sp)
1000cd0c:	1109883a 	add	r4,r2,r4
1000cd10:	2500022e 	bgeu	r4,r20,1000cd1c <__muldf3+0x440>
1000cd14:	00800074 	movhi	r2,1
1000cd18:	a8ab883a 	add	r21,r21,r2
1000cd1c:	200e943a 	slli	r7,r4,16
1000cd20:	2004d43a 	srli	r2,r4,16
1000cd24:	802ed43a 	srli	r23,r16,16
1000cd28:	843fffcc 	andi	r16,r16,65535
1000cd2c:	4d3fffcc 	andi	r20,r9,65535
1000cd30:	9009883a 	mov	r4,r18
1000cd34:	800b883a 	mov	r5,r16
1000cd38:	3d29883a 	add	r20,r7,r20
1000cd3c:	d8c00515 	stw	r3,20(sp)
1000cd40:	d9800715 	stw	r6,28(sp)
1000cd44:	da000615 	stw	r8,24(sp)
1000cd48:	a8ab883a 	add	r21,r21,r2
1000cd4c:	000b4540 	call	1000b454 <__mulsi3>
1000cd50:	9009883a 	mov	r4,r18
1000cd54:	b80b883a 	mov	r5,r23
1000cd58:	d8800315 	stw	r2,12(sp)
1000cd5c:	000b4540 	call	1000b454 <__mulsi3>
1000cd60:	e009883a 	mov	r4,fp
1000cd64:	b80b883a 	mov	r5,r23
1000cd68:	1025883a 	mov	r18,r2
1000cd6c:	000b4540 	call	1000b454 <__mulsi3>
1000cd70:	e009883a 	mov	r4,fp
1000cd74:	800b883a 	mov	r5,r16
1000cd78:	d8800215 	stw	r2,8(sp)
1000cd7c:	000b4540 	call	1000b454 <__mulsi3>
1000cd80:	da800317 	ldw	r10,12(sp)
1000cd84:	d9400017 	ldw	r5,0(sp)
1000cd88:	9085883a 	add	r2,r18,r2
1000cd8c:	5008d43a 	srli	r4,r10,16
1000cd90:	a153883a 	add	r9,r20,r5
1000cd94:	d8c00517 	ldw	r3,20(sp)
1000cd98:	1109883a 	add	r4,r2,r4
1000cd9c:	d9800717 	ldw	r6,28(sp)
1000cda0:	da000617 	ldw	r8,24(sp)
1000cda4:	dac00217 	ldw	r11,8(sp)
1000cda8:	2480022e 	bgeu	r4,r18,1000cdb4 <__muldf3+0x4d8>
1000cdac:	00800074 	movhi	r2,1
1000cdb0:	5897883a 	add	r11,r11,r2
1000cdb4:	200e943a 	slli	r7,r4,16
1000cdb8:	2038d43a 	srli	fp,r4,16
1000cdbc:	52bfffcc 	andi	r10,r10,65535
1000cdc0:	3a8f883a 	add	r7,r7,r10
1000cdc4:	8809883a 	mov	r4,r17
1000cdc8:	800b883a 	mov	r5,r16
1000cdcc:	d8c00515 	stw	r3,20(sp)
1000cdd0:	d9800715 	stw	r6,28(sp)
1000cdd4:	d9c00215 	stw	r7,8(sp)
1000cdd8:	da000615 	stw	r8,24(sp)
1000cddc:	da400415 	stw	r9,16(sp)
1000cde0:	5f39883a 	add	fp,r11,fp
1000cde4:	000b4540 	call	1000b454 <__mulsi3>
1000cde8:	8809883a 	mov	r4,r17
1000cdec:	b80b883a 	mov	r5,r23
1000cdf0:	1025883a 	mov	r18,r2
1000cdf4:	000b4540 	call	1000b454 <__mulsi3>
1000cdf8:	b009883a 	mov	r4,r22
1000cdfc:	b80b883a 	mov	r5,r23
1000ce00:	d8800315 	stw	r2,12(sp)
1000ce04:	000b4540 	call	1000b454 <__mulsi3>
1000ce08:	b009883a 	mov	r4,r22
1000ce0c:	800b883a 	mov	r5,r16
1000ce10:	1023883a 	mov	r17,r2
1000ce14:	000b4540 	call	1000b454 <__mulsi3>
1000ce18:	da800317 	ldw	r10,12(sp)
1000ce1c:	9008d43a 	srli	r4,r18,16
1000ce20:	d8c00517 	ldw	r3,20(sp)
1000ce24:	5085883a 	add	r2,r10,r2
1000ce28:	1109883a 	add	r4,r2,r4
1000ce2c:	d9800717 	ldw	r6,28(sp)
1000ce30:	d9c00217 	ldw	r7,8(sp)
1000ce34:	da000617 	ldw	r8,24(sp)
1000ce38:	da400417 	ldw	r9,16(sp)
1000ce3c:	2280022e 	bgeu	r4,r10,1000ce48 <__muldf3+0x56c>
1000ce40:	00800074 	movhi	r2,1
1000ce44:	88a3883a 	add	r17,r17,r2
1000ce48:	2004943a 	slli	r2,r4,16
1000ce4c:	94bfffcc 	andi	r18,r18,65535
1000ce50:	4ce7883a 	add	r19,r9,r19
1000ce54:	14a5883a 	add	r18,r2,r18
1000ce58:	9d29803a 	cmpltu	r20,r19,r20
1000ce5c:	9565883a 	add	r18,r18,r21
1000ce60:	9505883a 	add	r2,r18,r20
1000ce64:	99e7883a 	add	r19,r19,r7
1000ce68:	99cf803a 	cmpltu	r7,r19,r7
1000ce6c:	e08b883a 	add	r5,fp,r2
1000ce70:	2008d43a 	srli	r4,r4,16
1000ce74:	29ef883a 	add	r23,r5,r7
1000ce78:	1529803a 	cmpltu	r20,r2,r20
1000ce7c:	956b803a 	cmpltu	r21,r18,r21
1000ce80:	b9cf803a 	cmpltu	r7,r23,r7
1000ce84:	a564b03a 	or	r18,r20,r21
1000ce88:	2f39803a 	cmpltu	fp,r5,fp
1000ce8c:	9125883a 	add	r18,r18,r4
1000ce90:	3f38b03a 	or	fp,r7,fp
1000ce94:	9725883a 	add	r18,r18,fp
1000ce98:	9804927a 	slli	r2,r19,9
1000ce9c:	9463883a 	add	r17,r18,r17
1000cea0:	d9000117 	ldw	r4,4(sp)
1000cea4:	b820d5fa 	srli	r16,r23,23
1000cea8:	8822927a 	slli	r17,r17,9
1000ceac:	9826d5fa 	srli	r19,r19,23
1000ceb0:	1104b03a 	or	r2,r2,r4
1000ceb4:	b82e927a 	slli	r23,r23,9
1000ceb8:	1004c03a 	cmpne	r2,r2,zero
1000cebc:	8c20b03a 	or	r16,r17,r16
1000cec0:	14e6b03a 	or	r19,r2,r19
1000cec4:	8080402c 	andhi	r2,r16,256
1000cec8:	9deeb03a 	or	r23,r19,r23
1000cecc:	10000726 	beq	r2,zero,1000ceec <__muldf3+0x610>
1000ced0:	b804d07a 	srli	r2,r23,1
1000ced4:	800697fa 	slli	r3,r16,31
1000ced8:	bdc0004c 	andi	r23,r23,1
1000cedc:	8020d07a 	srli	r16,r16,1
1000cee0:	b8aeb03a 	or	r23,r23,r2
1000cee4:	b8eeb03a 	or	r23,r23,r3
1000cee8:	4007883a 	mov	r3,r8
1000ceec:	1900ffc4 	addi	r4,r3,1023
1000cef0:	01004d0e 	bge	zero,r4,1000d028 <__muldf3+0x74c>
1000cef4:	b88001cc 	andi	r2,r23,7
1000cef8:	10000726 	beq	r2,zero,1000cf18 <__muldf3+0x63c>
1000cefc:	b94003cc 	andi	r5,r23,15
1000cf00:	00800104 	movi	r2,4
1000cf04:	28800426 	beq	r5,r2,1000cf18 <__muldf3+0x63c>
1000cf08:	b885883a 	add	r2,r23,r2
1000cf0c:	15ef803a 	cmpltu	r23,r2,r23
1000cf10:	85e1883a 	add	r16,r16,r23
1000cf14:	102f883a 	mov	r23,r2
1000cf18:	8080402c 	andhi	r2,r16,256
1000cf1c:	10000426 	beq	r2,zero,1000cf30 <__muldf3+0x654>
1000cf20:	00bfc034 	movhi	r2,65280
1000cf24:	10bfffc4 	addi	r2,r2,-1
1000cf28:	19010004 	addi	r4,r3,1024
1000cf2c:	80a0703a 	and	r16,r16,r2
1000cf30:	0081ff84 	movi	r2,2046
1000cf34:	1100340e 	bge	r2,r4,1000d008 <__muldf3+0x72c>
1000cf38:	34c0004c 	andi	r19,r6,1
1000cf3c:	0101ffc4 	movi	r4,2047
1000cf40:	0021883a 	mov	r16,zero
1000cf44:	002f883a 	mov	r23,zero
1000cf48:	003ebe06 	br	1000ca44 <__alt_data_end+0xf800ca44>
1000cf4c:	8080022c 	andhi	r2,r16,8
1000cf50:	10000926 	beq	r2,zero,1000cf78 <__muldf3+0x69c>
1000cf54:	8880022c 	andhi	r2,r17,8
1000cf58:	1000071e 	bne	r2,zero,1000cf78 <__muldf3+0x69c>
1000cf5c:	00800434 	movhi	r2,16
1000cf60:	8c000234 	orhi	r16,r17,8
1000cf64:	10bfffc4 	addi	r2,r2,-1
1000cf68:	b027883a 	mov	r19,r22
1000cf6c:	80a0703a 	and	r16,r16,r2
1000cf70:	902f883a 	mov	r23,r18
1000cf74:	003f1a06 	br	1000cbe0 <__alt_data_end+0xf800cbe0>
1000cf78:	00800434 	movhi	r2,16
1000cf7c:	84000234 	orhi	r16,r16,8
1000cf80:	10bfffc4 	addi	r2,r2,-1
1000cf84:	80a0703a 	and	r16,r16,r2
1000cf88:	003f1506 	br	1000cbe0 <__alt_data_end+0xf800cbe0>
1000cf8c:	3009883a 	mov	r4,r6
1000cf90:	d9400215 	stw	r5,8(sp)
1000cf94:	d9800715 	stw	r6,28(sp)
1000cf98:	da400415 	stw	r9,16(sp)
1000cf9c:	da800315 	stw	r10,12(sp)
1000cfa0:	000dc140 	call	1000dc14 <__clzsi2>
1000cfa4:	10c00804 	addi	r3,r2,32
1000cfa8:	010009c4 	movi	r4,39
1000cfac:	d9400217 	ldw	r5,8(sp)
1000cfb0:	d9800717 	ldw	r6,28(sp)
1000cfb4:	da400417 	ldw	r9,16(sp)
1000cfb8:	da800317 	ldw	r10,12(sp)
1000cfbc:	20fee20e 	bge	r4,r3,1000cb48 <__alt_data_end+0xf800cb48>
1000cfc0:	147ffe04 	addi	r17,r2,-8
1000cfc4:	9462983a 	sll	r17,r18,r17
1000cfc8:	0025883a 	mov	r18,zero
1000cfcc:	003ee506 	br	1000cb64 <__alt_data_end+0xf800cb64>
1000cfd0:	d9800715 	stw	r6,28(sp)
1000cfd4:	d9c00215 	stw	r7,8(sp)
1000cfd8:	da400415 	stw	r9,16(sp)
1000cfdc:	000dc140 	call	1000dc14 <__clzsi2>
1000cfe0:	10c00804 	addi	r3,r2,32
1000cfe4:	010009c4 	movi	r4,39
1000cfe8:	d9800717 	ldw	r6,28(sp)
1000cfec:	d9c00217 	ldw	r7,8(sp)
1000cff0:	da400417 	ldw	r9,16(sp)
1000cff4:	20feb40e 	bge	r4,r3,1000cac8 <__alt_data_end+0xf800cac8>
1000cff8:	143ffe04 	addi	r16,r2,-8
1000cffc:	9420983a 	sll	r16,r18,r16
1000d000:	002f883a 	mov	r23,zero
1000d004:	003eb706 	br	1000cae4 <__alt_data_end+0xf800cae4>
1000d008:	8004977a 	slli	r2,r16,29
1000d00c:	b82ed0fa 	srli	r23,r23,3
1000d010:	8020927a 	slli	r16,r16,9
1000d014:	2101ffcc 	andi	r4,r4,2047
1000d018:	15eeb03a 	or	r23,r2,r23
1000d01c:	8020d33a 	srli	r16,r16,12
1000d020:	34c0004c 	andi	r19,r6,1
1000d024:	003e8706 	br	1000ca44 <__alt_data_end+0xf800ca44>
1000d028:	00bf0084 	movi	r2,-1022
1000d02c:	10c5c83a 	sub	r2,r2,r3
1000d030:	01000e04 	movi	r4,56
1000d034:	2080080e 	bge	r4,r2,1000d058 <__muldf3+0x77c>
1000d038:	34c0004c 	andi	r19,r6,1
1000d03c:	0009883a 	mov	r4,zero
1000d040:	0021883a 	mov	r16,zero
1000d044:	002f883a 	mov	r23,zero
1000d048:	003e7e06 	br	1000ca44 <__alt_data_end+0xf800ca44>
1000d04c:	4007883a 	mov	r3,r8
1000d050:	480d883a 	mov	r6,r9
1000d054:	003fa506 	br	1000ceec <__alt_data_end+0xf800ceec>
1000d058:	010007c4 	movi	r4,31
1000d05c:	20801816 	blt	r4,r2,1000d0c0 <__muldf3+0x7e4>
1000d060:	18c10784 	addi	r3,r3,1054
1000d064:	80c8983a 	sll	r4,r16,r3
1000d068:	b88ad83a 	srl	r5,r23,r2
1000d06c:	b8c6983a 	sll	r3,r23,r3
1000d070:	80a0d83a 	srl	r16,r16,r2
1000d074:	2908b03a 	or	r4,r5,r4
1000d078:	1804c03a 	cmpne	r2,r3,zero
1000d07c:	2088b03a 	or	r4,r4,r2
1000d080:	208001cc 	andi	r2,r4,7
1000d084:	10000726 	beq	r2,zero,1000d0a4 <__muldf3+0x7c8>
1000d088:	20c003cc 	andi	r3,r4,15
1000d08c:	00800104 	movi	r2,4
1000d090:	18800426 	beq	r3,r2,1000d0a4 <__muldf3+0x7c8>
1000d094:	20c00104 	addi	r3,r4,4
1000d098:	1905803a 	cmpltu	r2,r3,r4
1000d09c:	80a1883a 	add	r16,r16,r2
1000d0a0:	1809883a 	mov	r4,r3
1000d0a4:	8080202c 	andhi	r2,r16,128
1000d0a8:	10001b26 	beq	r2,zero,1000d118 <__muldf3+0x83c>
1000d0ac:	34c0004c 	andi	r19,r6,1
1000d0b0:	01000044 	movi	r4,1
1000d0b4:	0021883a 	mov	r16,zero
1000d0b8:	002f883a 	mov	r23,zero
1000d0bc:	003e6106 	br	1000ca44 <__alt_data_end+0xf800ca44>
1000d0c0:	013ef884 	movi	r4,-1054
1000d0c4:	20c9c83a 	sub	r4,r4,r3
1000d0c8:	01400804 	movi	r5,32
1000d0cc:	8108d83a 	srl	r4,r16,r4
1000d0d0:	11401526 	beq	r2,r5,1000d128 <__muldf3+0x84c>
1000d0d4:	18c10f84 	addi	r3,r3,1086
1000d0d8:	80e0983a 	sll	r16,r16,r3
1000d0dc:	85eeb03a 	or	r23,r16,r23
1000d0e0:	b804c03a 	cmpne	r2,r23,zero
1000d0e4:	1108b03a 	or	r4,r2,r4
1000d0e8:	20c001cc 	andi	r3,r4,7
1000d0ec:	1800061e 	bne	r3,zero,1000d108 <__muldf3+0x82c>
1000d0f0:	0021883a 	mov	r16,zero
1000d0f4:	202ed0fa 	srli	r23,r4,3
1000d0f8:	34c0004c 	andi	r19,r6,1
1000d0fc:	0009883a 	mov	r4,zero
1000d100:	b8eeb03a 	or	r23,r23,r3
1000d104:	003e4f06 	br	1000ca44 <__alt_data_end+0xf800ca44>
1000d108:	20c003cc 	andi	r3,r4,15
1000d10c:	00800104 	movi	r2,4
1000d110:	0021883a 	mov	r16,zero
1000d114:	18bfdf1e 	bne	r3,r2,1000d094 <__alt_data_end+0xf800d094>
1000d118:	8004927a 	slli	r2,r16,9
1000d11c:	8006977a 	slli	r3,r16,29
1000d120:	1020d33a 	srli	r16,r2,12
1000d124:	003ff306 	br	1000d0f4 <__alt_data_end+0xf800d0f4>
1000d128:	0021883a 	mov	r16,zero
1000d12c:	003feb06 	br	1000d0dc <__alt_data_end+0xf800d0dc>
1000d130:	00800434 	movhi	r2,16
1000d134:	84000234 	orhi	r16,r16,8
1000d138:	10bfffc4 	addi	r2,r2,-1
1000d13c:	4cc0004c 	andi	r19,r9,1
1000d140:	80a0703a 	and	r16,r16,r2
1000d144:	003ea606 	br	1000cbe0 <__alt_data_end+0xf800cbe0>

1000d148 <__subdf3>:
1000d148:	00c00434 	movhi	r3,16
1000d14c:	18ffffc4 	addi	r3,r3,-1
1000d150:	defffb04 	addi	sp,sp,-20
1000d154:	28d2703a 	and	r9,r5,r3
1000d158:	3814d53a 	srli	r10,r7,20
1000d15c:	38c6703a 	and	r3,r7,r3
1000d160:	3004d77a 	srli	r2,r6,29
1000d164:	dc800215 	stw	r18,8(sp)
1000d168:	dc000015 	stw	r16,0(sp)
1000d16c:	2824d7fa 	srli	r18,r5,31
1000d170:	2820d53a 	srli	r16,r5,20
1000d174:	481290fa 	slli	r9,r9,3
1000d178:	200ad77a 	srli	r5,r4,29
1000d17c:	180690fa 	slli	r3,r3,3
1000d180:	dc400115 	stw	r17,4(sp)
1000d184:	dfc00415 	stw	ra,16(sp)
1000d188:	202290fa 	slli	r17,r4,3
1000d18c:	dcc00315 	stw	r19,12(sp)
1000d190:	5281ffcc 	andi	r10,r10,2047
1000d194:	0101ffc4 	movi	r4,2047
1000d198:	9011883a 	mov	r8,r18
1000d19c:	8401ffcc 	andi	r16,r16,2047
1000d1a0:	94803fcc 	andi	r18,r18,255
1000d1a4:	494ab03a 	or	r5,r9,r5
1000d1a8:	380ed7fa 	srli	r7,r7,31
1000d1ac:	1886b03a 	or	r3,r3,r2
1000d1b0:	300c90fa 	slli	r6,r6,3
1000d1b4:	51009026 	beq	r10,r4,1000d3f8 <__subdf3+0x2b0>
1000d1b8:	39c0005c 	xori	r7,r7,1
1000d1bc:	8285c83a 	sub	r2,r16,r10
1000d1c0:	91c06f26 	beq	r18,r7,1000d380 <__subdf3+0x238>
1000d1c4:	0080b10e 	bge	zero,r2,1000d48c <__subdf3+0x344>
1000d1c8:	50002a1e 	bne	r10,zero,1000d274 <__subdf3+0x12c>
1000d1cc:	1988b03a 	or	r4,r3,r6
1000d1d0:	2000941e 	bne	r4,zero,1000d424 <__subdf3+0x2dc>
1000d1d4:	888001cc 	andi	r2,r17,7
1000d1d8:	10005b26 	beq	r2,zero,1000d348 <__subdf3+0x200>
1000d1dc:	88c003cc 	andi	r3,r17,15
1000d1e0:	00800104 	movi	r2,4
1000d1e4:	18805826 	beq	r3,r2,1000d348 <__subdf3+0x200>
1000d1e8:	88c00104 	addi	r3,r17,4
1000d1ec:	1c63803a 	cmpltu	r17,r3,r17
1000d1f0:	2c4b883a 	add	r5,r5,r17
1000d1f4:	2880202c 	andhi	r2,r5,128
1000d1f8:	9200004c 	andi	r8,r18,1
1000d1fc:	1823883a 	mov	r17,r3
1000d200:	10005426 	beq	r2,zero,1000d354 <__subdf3+0x20c>
1000d204:	84000044 	addi	r16,r16,1
1000d208:	0081ffc4 	movi	r2,2047
1000d20c:	8080bf26 	beq	r16,r2,1000d50c <__subdf3+0x3c4>
1000d210:	013fe034 	movhi	r4,65408
1000d214:	213fffc4 	addi	r4,r4,-1
1000d218:	290a703a 	and	r5,r5,r4
1000d21c:	2804977a 	slli	r2,r5,29
1000d220:	280a927a 	slli	r5,r5,9
1000d224:	8822d0fa 	srli	r17,r17,3
1000d228:	8401ffcc 	andi	r16,r16,2047
1000d22c:	2808d33a 	srli	r4,r5,12
1000d230:	1444b03a 	or	r2,r2,r17
1000d234:	8401ffcc 	andi	r16,r16,2047
1000d238:	800a953a 	slli	r5,r16,20
1000d23c:	40c03fcc 	andi	r3,r8,255
1000d240:	04000434 	movhi	r16,16
1000d244:	180697fa 	slli	r3,r3,31
1000d248:	843fffc4 	addi	r16,r16,-1
1000d24c:	2420703a 	and	r16,r4,r16
1000d250:	8160b03a 	or	r16,r16,r5
1000d254:	80c6b03a 	or	r3,r16,r3
1000d258:	dfc00417 	ldw	ra,16(sp)
1000d25c:	dcc00317 	ldw	r19,12(sp)
1000d260:	dc800217 	ldw	r18,8(sp)
1000d264:	dc400117 	ldw	r17,4(sp)
1000d268:	dc000017 	ldw	r16,0(sp)
1000d26c:	dec00504 	addi	sp,sp,20
1000d270:	f800283a 	ret
1000d274:	0101ffc4 	movi	r4,2047
1000d278:	813fd626 	beq	r16,r4,1000d1d4 <__alt_data_end+0xf800d1d4>
1000d27c:	18c02034 	orhi	r3,r3,128
1000d280:	01000e04 	movi	r4,56
1000d284:	2080a416 	blt	r4,r2,1000d518 <__subdf3+0x3d0>
1000d288:	010007c4 	movi	r4,31
1000d28c:	2080c716 	blt	r4,r2,1000d5ac <__subdf3+0x464>
1000d290:	01000804 	movi	r4,32
1000d294:	2089c83a 	sub	r4,r4,r2
1000d298:	1910983a 	sll	r8,r3,r4
1000d29c:	308ed83a 	srl	r7,r6,r2
1000d2a0:	3108983a 	sll	r4,r6,r4
1000d2a4:	1884d83a 	srl	r2,r3,r2
1000d2a8:	41ccb03a 	or	r6,r8,r7
1000d2ac:	2008c03a 	cmpne	r4,r4,zero
1000d2b0:	310cb03a 	or	r6,r6,r4
1000d2b4:	898dc83a 	sub	r6,r17,r6
1000d2b8:	89a3803a 	cmpltu	r17,r17,r6
1000d2bc:	288bc83a 	sub	r5,r5,r2
1000d2c0:	2c4bc83a 	sub	r5,r5,r17
1000d2c4:	3023883a 	mov	r17,r6
1000d2c8:	2880202c 	andhi	r2,r5,128
1000d2cc:	10006b26 	beq	r2,zero,1000d47c <__subdf3+0x334>
1000d2d0:	04c02034 	movhi	r19,128
1000d2d4:	9cffffc4 	addi	r19,r19,-1
1000d2d8:	2ce6703a 	and	r19,r5,r19
1000d2dc:	98007c26 	beq	r19,zero,1000d4d0 <__subdf3+0x388>
1000d2e0:	9809883a 	mov	r4,r19
1000d2e4:	000dc140 	call	1000dc14 <__clzsi2>
1000d2e8:	10fffe04 	addi	r3,r2,-8
1000d2ec:	010007c4 	movi	r4,31
1000d2f0:	20c07d16 	blt	r4,r3,1000d4e8 <__subdf3+0x3a0>
1000d2f4:	01400a04 	movi	r5,40
1000d2f8:	2885c83a 	sub	r2,r5,r2
1000d2fc:	888ad83a 	srl	r5,r17,r2
1000d300:	98e6983a 	sll	r19,r19,r3
1000d304:	88e2983a 	sll	r17,r17,r3
1000d308:	2ce6b03a 	or	r19,r5,r19
1000d30c:	1c007a16 	blt	r3,r16,1000d4f8 <__subdf3+0x3b0>
1000d310:	1c21c83a 	sub	r16,r3,r16
1000d314:	81400044 	addi	r5,r16,1
1000d318:	00c007c4 	movi	r3,31
1000d31c:	19409616 	blt	r3,r5,1000d578 <__subdf3+0x430>
1000d320:	1c21c83a 	sub	r16,r3,r16
1000d324:	8c08983a 	sll	r4,r17,r16
1000d328:	8946d83a 	srl	r3,r17,r5
1000d32c:	9c20983a 	sll	r16,r19,r16
1000d330:	2008c03a 	cmpne	r4,r4,zero
1000d334:	994ad83a 	srl	r5,r19,r5
1000d338:	1c06b03a 	or	r3,r3,r16
1000d33c:	1922b03a 	or	r17,r3,r4
1000d340:	0021883a 	mov	r16,zero
1000d344:	003fa306 	br	1000d1d4 <__alt_data_end+0xf800d1d4>
1000d348:	2880202c 	andhi	r2,r5,128
1000d34c:	9200004c 	andi	r8,r18,1
1000d350:	103fac1e 	bne	r2,zero,1000d204 <__alt_data_end+0xf800d204>
1000d354:	2804977a 	slli	r2,r5,29
1000d358:	8822d0fa 	srli	r17,r17,3
1000d35c:	00c1ffc4 	movi	r3,2047
1000d360:	280ad0fa 	srli	r5,r5,3
1000d364:	1444b03a 	or	r2,r2,r17
1000d368:	80c02726 	beq	r16,r3,1000d408 <__subdf3+0x2c0>
1000d36c:	01000434 	movhi	r4,16
1000d370:	213fffc4 	addi	r4,r4,-1
1000d374:	80e0703a 	and	r16,r16,r3
1000d378:	2908703a 	and	r4,r5,r4
1000d37c:	003fad06 	br	1000d234 <__alt_data_end+0xf800d234>
1000d380:	0080690e 	bge	zero,r2,1000d528 <__subdf3+0x3e0>
1000d384:	50002f26 	beq	r10,zero,1000d444 <__subdf3+0x2fc>
1000d388:	0101ffc4 	movi	r4,2047
1000d38c:	813f9126 	beq	r16,r4,1000d1d4 <__alt_data_end+0xf800d1d4>
1000d390:	18c02034 	orhi	r3,r3,128
1000d394:	01000e04 	movi	r4,56
1000d398:	2080b00e 	bge	r4,r2,1000d65c <__subdf3+0x514>
1000d39c:	198cb03a 	or	r6,r3,r6
1000d3a0:	300ec03a 	cmpne	r7,r6,zero
1000d3a4:	0005883a 	mov	r2,zero
1000d3a8:	3c4f883a 	add	r7,r7,r17
1000d3ac:	3c63803a 	cmpltu	r17,r7,r17
1000d3b0:	114b883a 	add	r5,r2,r5
1000d3b4:	2c4b883a 	add	r5,r5,r17
1000d3b8:	3823883a 	mov	r17,r7
1000d3bc:	2880202c 	andhi	r2,r5,128
1000d3c0:	10002e26 	beq	r2,zero,1000d47c <__subdf3+0x334>
1000d3c4:	84000044 	addi	r16,r16,1
1000d3c8:	0081ffc4 	movi	r2,2047
1000d3cc:	8080de26 	beq	r16,r2,1000d748 <__subdf3+0x600>
1000d3d0:	00bfe034 	movhi	r2,65408
1000d3d4:	10bfffc4 	addi	r2,r2,-1
1000d3d8:	288a703a 	and	r5,r5,r2
1000d3dc:	880cd07a 	srli	r6,r17,1
1000d3e0:	280897fa 	slli	r4,r5,31
1000d3e4:	88c0004c 	andi	r3,r17,1
1000d3e8:	30e2b03a 	or	r17,r6,r3
1000d3ec:	280ad07a 	srli	r5,r5,1
1000d3f0:	8922b03a 	or	r17,r17,r4
1000d3f4:	003f7706 	br	1000d1d4 <__alt_data_end+0xf800d1d4>
1000d3f8:	1984b03a 	or	r2,r3,r6
1000d3fc:	103f6e26 	beq	r2,zero,1000d1b8 <__alt_data_end+0xf800d1b8>
1000d400:	39c03fcc 	andi	r7,r7,255
1000d404:	003f6d06 	br	1000d1bc <__alt_data_end+0xf800d1bc>
1000d408:	1146b03a 	or	r3,r2,r5
1000d40c:	18003f26 	beq	r3,zero,1000d50c <__subdf3+0x3c4>
1000d410:	00c00434 	movhi	r3,16
1000d414:	29000234 	orhi	r4,r5,8
1000d418:	18ffffc4 	addi	r3,r3,-1
1000d41c:	20c8703a 	and	r4,r4,r3
1000d420:	003f8406 	br	1000d234 <__alt_data_end+0xf800d234>
1000d424:	10bfffc4 	addi	r2,r2,-1
1000d428:	1000501e 	bne	r2,zero,1000d56c <__subdf3+0x424>
1000d42c:	898fc83a 	sub	r7,r17,r6
1000d430:	89e3803a 	cmpltu	r17,r17,r7
1000d434:	28cbc83a 	sub	r5,r5,r3
1000d438:	2c4bc83a 	sub	r5,r5,r17
1000d43c:	3823883a 	mov	r17,r7
1000d440:	003fa106 	br	1000d2c8 <__alt_data_end+0xf800d2c8>
1000d444:	1988b03a 	or	r4,r3,r6
1000d448:	203f6226 	beq	r4,zero,1000d1d4 <__alt_data_end+0xf800d1d4>
1000d44c:	10bfffc4 	addi	r2,r2,-1
1000d450:	10009b1e 	bne	r2,zero,1000d6c0 <__subdf3+0x578>
1000d454:	344d883a 	add	r6,r6,r17
1000d458:	3463803a 	cmpltu	r17,r6,r17
1000d45c:	194b883a 	add	r5,r3,r5
1000d460:	2c4b883a 	add	r5,r5,r17
1000d464:	3023883a 	mov	r17,r6
1000d468:	003fd406 	br	1000d3bc <__alt_data_end+0xf800d3bc>
1000d46c:	1106b03a 	or	r3,r2,r4
1000d470:	1800b426 	beq	r3,zero,1000d744 <__subdf3+0x5fc>
1000d474:	100b883a 	mov	r5,r2
1000d478:	2023883a 	mov	r17,r4
1000d47c:	888001cc 	andi	r2,r17,7
1000d480:	103f561e 	bne	r2,zero,1000d1dc <__alt_data_end+0xf800d1dc>
1000d484:	9200004c 	andi	r8,r18,1
1000d488:	003fb206 	br	1000d354 <__alt_data_end+0xf800d354>
1000d48c:	1000531e 	bne	r2,zero,1000d5dc <__subdf3+0x494>
1000d490:	80800044 	addi	r2,r16,1
1000d494:	1081ffcc 	andi	r2,r2,2047
1000d498:	01000044 	movi	r4,1
1000d49c:	2080a00e 	bge	r4,r2,1000d720 <__subdf3+0x5d8>
1000d4a0:	8985c83a 	sub	r2,r17,r6
1000d4a4:	8889803a 	cmpltu	r4,r17,r2
1000d4a8:	28e7c83a 	sub	r19,r5,r3
1000d4ac:	9927c83a 	sub	r19,r19,r4
1000d4b0:	9900202c 	andhi	r4,r19,128
1000d4b4:	20006226 	beq	r4,zero,1000d640 <__subdf3+0x4f8>
1000d4b8:	3463c83a 	sub	r17,r6,r17
1000d4bc:	194bc83a 	sub	r5,r3,r5
1000d4c0:	344d803a 	cmpltu	r6,r6,r17
1000d4c4:	29a7c83a 	sub	r19,r5,r6
1000d4c8:	3825883a 	mov	r18,r7
1000d4cc:	983f841e 	bne	r19,zero,1000d2e0 <__alt_data_end+0xf800d2e0>
1000d4d0:	8809883a 	mov	r4,r17
1000d4d4:	000dc140 	call	1000dc14 <__clzsi2>
1000d4d8:	10800804 	addi	r2,r2,32
1000d4dc:	10fffe04 	addi	r3,r2,-8
1000d4e0:	010007c4 	movi	r4,31
1000d4e4:	20ff830e 	bge	r4,r3,1000d2f4 <__alt_data_end+0xf800d2f4>
1000d4e8:	14fff604 	addi	r19,r2,-40
1000d4ec:	8ce6983a 	sll	r19,r17,r19
1000d4f0:	0023883a 	mov	r17,zero
1000d4f4:	1c3f860e 	bge	r3,r16,1000d310 <__alt_data_end+0xf800d310>
1000d4f8:	017fe034 	movhi	r5,65408
1000d4fc:	297fffc4 	addi	r5,r5,-1
1000d500:	80e1c83a 	sub	r16,r16,r3
1000d504:	994a703a 	and	r5,r19,r5
1000d508:	003f3206 	br	1000d1d4 <__alt_data_end+0xf800d1d4>
1000d50c:	0009883a 	mov	r4,zero
1000d510:	0005883a 	mov	r2,zero
1000d514:	003f4706 	br	1000d234 <__alt_data_end+0xf800d234>
1000d518:	198cb03a 	or	r6,r3,r6
1000d51c:	300cc03a 	cmpne	r6,r6,zero
1000d520:	0005883a 	mov	r2,zero
1000d524:	003f6306 	br	1000d2b4 <__alt_data_end+0xf800d2b4>
1000d528:	10009d1e 	bne	r2,zero,1000d7a0 <__subdf3+0x658>
1000d52c:	81c00044 	addi	r7,r16,1
1000d530:	3881ffcc 	andi	r2,r7,2047
1000d534:	02400044 	movi	r9,1
1000d538:	4880680e 	bge	r9,r2,1000d6dc <__subdf3+0x594>
1000d53c:	0081ffc4 	movi	r2,2047
1000d540:	3880ae26 	beq	r7,r2,1000d7fc <__subdf3+0x6b4>
1000d544:	344d883a 	add	r6,r6,r17
1000d548:	3463803a 	cmpltu	r17,r6,r17
1000d54c:	194b883a 	add	r5,r3,r5
1000d550:	2c4b883a 	add	r5,r5,r17
1000d554:	282297fa 	slli	r17,r5,31
1000d558:	300cd07a 	srli	r6,r6,1
1000d55c:	280ad07a 	srli	r5,r5,1
1000d560:	3821883a 	mov	r16,r7
1000d564:	89a2b03a 	or	r17,r17,r6
1000d568:	003f1a06 	br	1000d1d4 <__alt_data_end+0xf800d1d4>
1000d56c:	0101ffc4 	movi	r4,2047
1000d570:	813f431e 	bne	r16,r4,1000d280 <__alt_data_end+0xf800d280>
1000d574:	003f1706 	br	1000d1d4 <__alt_data_end+0xf800d1d4>
1000d578:	80bff844 	addi	r2,r16,-31
1000d57c:	00c00804 	movi	r3,32
1000d580:	9884d83a 	srl	r2,r19,r2
1000d584:	28c05126 	beq	r5,r3,1000d6cc <__subdf3+0x584>
1000d588:	00c00fc4 	movi	r3,63
1000d58c:	1c21c83a 	sub	r16,r3,r16
1000d590:	9c26983a 	sll	r19,r19,r16
1000d594:	9c62b03a 	or	r17,r19,r17
1000d598:	8822c03a 	cmpne	r17,r17,zero
1000d59c:	88a2b03a 	or	r17,r17,r2
1000d5a0:	000b883a 	mov	r5,zero
1000d5a4:	0021883a 	mov	r16,zero
1000d5a8:	003fb406 	br	1000d47c <__alt_data_end+0xf800d47c>
1000d5ac:	113ff804 	addi	r4,r2,-32
1000d5b0:	01c00804 	movi	r7,32
1000d5b4:	1908d83a 	srl	r4,r3,r4
1000d5b8:	11c04626 	beq	r2,r7,1000d6d4 <__subdf3+0x58c>
1000d5bc:	01c01004 	movi	r7,64
1000d5c0:	3885c83a 	sub	r2,r7,r2
1000d5c4:	1884983a 	sll	r2,r3,r2
1000d5c8:	118cb03a 	or	r6,r2,r6
1000d5cc:	300cc03a 	cmpne	r6,r6,zero
1000d5d0:	310cb03a 	or	r6,r6,r4
1000d5d4:	0005883a 	mov	r2,zero
1000d5d8:	003f3606 	br	1000d2b4 <__alt_data_end+0xf800d2b4>
1000d5dc:	80002b26 	beq	r16,zero,1000d68c <__subdf3+0x544>
1000d5e0:	0101ffc4 	movi	r4,2047
1000d5e4:	51006926 	beq	r10,r4,1000d78c <__subdf3+0x644>
1000d5e8:	0085c83a 	sub	r2,zero,r2
1000d5ec:	29402034 	orhi	r5,r5,128
1000d5f0:	01000e04 	movi	r4,56
1000d5f4:	20807d16 	blt	r4,r2,1000d7ec <__subdf3+0x6a4>
1000d5f8:	010007c4 	movi	r4,31
1000d5fc:	2080d916 	blt	r4,r2,1000d964 <__subdf3+0x81c>
1000d600:	01000804 	movi	r4,32
1000d604:	2089c83a 	sub	r4,r4,r2
1000d608:	2912983a 	sll	r9,r5,r4
1000d60c:	8890d83a 	srl	r8,r17,r2
1000d610:	8908983a 	sll	r4,r17,r4
1000d614:	2884d83a 	srl	r2,r5,r2
1000d618:	4a22b03a 	or	r17,r9,r8
1000d61c:	2008c03a 	cmpne	r4,r4,zero
1000d620:	8922b03a 	or	r17,r17,r4
1000d624:	3463c83a 	sub	r17,r6,r17
1000d628:	1885c83a 	sub	r2,r3,r2
1000d62c:	344d803a 	cmpltu	r6,r6,r17
1000d630:	118bc83a 	sub	r5,r2,r6
1000d634:	5021883a 	mov	r16,r10
1000d638:	3825883a 	mov	r18,r7
1000d63c:	003f2206 	br	1000d2c8 <__alt_data_end+0xf800d2c8>
1000d640:	9886b03a 	or	r3,r19,r2
1000d644:	18001c1e 	bne	r3,zero,1000d6b8 <__subdf3+0x570>
1000d648:	0011883a 	mov	r8,zero
1000d64c:	000b883a 	mov	r5,zero
1000d650:	0023883a 	mov	r17,zero
1000d654:	0021883a 	mov	r16,zero
1000d658:	003f3e06 	br	1000d354 <__alt_data_end+0xf800d354>
1000d65c:	010007c4 	movi	r4,31
1000d660:	20803c16 	blt	r4,r2,1000d754 <__subdf3+0x60c>
1000d664:	01000804 	movi	r4,32
1000d668:	2089c83a 	sub	r4,r4,r2
1000d66c:	1912983a 	sll	r9,r3,r4
1000d670:	308ed83a 	srl	r7,r6,r2
1000d674:	3108983a 	sll	r4,r6,r4
1000d678:	1884d83a 	srl	r2,r3,r2
1000d67c:	49ceb03a 	or	r7,r9,r7
1000d680:	2008c03a 	cmpne	r4,r4,zero
1000d684:	390eb03a 	or	r7,r7,r4
1000d688:	003f4706 	br	1000d3a8 <__alt_data_end+0xf800d3a8>
1000d68c:	2c48b03a 	or	r4,r5,r17
1000d690:	20003e26 	beq	r4,zero,1000d78c <__subdf3+0x644>
1000d694:	0084303a 	nor	r2,zero,r2
1000d698:	10003a1e 	bne	r2,zero,1000d784 <__subdf3+0x63c>
1000d69c:	3463c83a 	sub	r17,r6,r17
1000d6a0:	194bc83a 	sub	r5,r3,r5
1000d6a4:	344d803a 	cmpltu	r6,r6,r17
1000d6a8:	298bc83a 	sub	r5,r5,r6
1000d6ac:	5021883a 	mov	r16,r10
1000d6b0:	3825883a 	mov	r18,r7
1000d6b4:	003f0406 	br	1000d2c8 <__alt_data_end+0xf800d2c8>
1000d6b8:	1023883a 	mov	r17,r2
1000d6bc:	003f0706 	br	1000d2dc <__alt_data_end+0xf800d2dc>
1000d6c0:	0101ffc4 	movi	r4,2047
1000d6c4:	813f331e 	bne	r16,r4,1000d394 <__alt_data_end+0xf800d394>
1000d6c8:	003ec206 	br	1000d1d4 <__alt_data_end+0xf800d1d4>
1000d6cc:	0027883a 	mov	r19,zero
1000d6d0:	003fb006 	br	1000d594 <__alt_data_end+0xf800d594>
1000d6d4:	0005883a 	mov	r2,zero
1000d6d8:	003fbb06 	br	1000d5c8 <__alt_data_end+0xf800d5c8>
1000d6dc:	2c44b03a 	or	r2,r5,r17
1000d6e0:	80008b1e 	bne	r16,zero,1000d910 <__subdf3+0x7c8>
1000d6e4:	1000b526 	beq	r2,zero,1000d9bc <__subdf3+0x874>
1000d6e8:	1984b03a 	or	r2,r3,r6
1000d6ec:	103eb926 	beq	r2,zero,1000d1d4 <__alt_data_end+0xf800d1d4>
1000d6f0:	3449883a 	add	r4,r6,r17
1000d6f4:	2463803a 	cmpltu	r17,r4,r17
1000d6f8:	194b883a 	add	r5,r3,r5
1000d6fc:	2c4b883a 	add	r5,r5,r17
1000d700:	2880202c 	andhi	r2,r5,128
1000d704:	2023883a 	mov	r17,r4
1000d708:	103f5c26 	beq	r2,zero,1000d47c <__alt_data_end+0xf800d47c>
1000d70c:	00bfe034 	movhi	r2,65408
1000d710:	10bfffc4 	addi	r2,r2,-1
1000d714:	4821883a 	mov	r16,r9
1000d718:	288a703a 	and	r5,r5,r2
1000d71c:	003ead06 	br	1000d1d4 <__alt_data_end+0xf800d1d4>
1000d720:	2c44b03a 	or	r2,r5,r17
1000d724:	8000291e 	bne	r16,zero,1000d7cc <__subdf3+0x684>
1000d728:	10004f1e 	bne	r2,zero,1000d868 <__subdf3+0x720>
1000d72c:	1984b03a 	or	r2,r3,r6
1000d730:	10000426 	beq	r2,zero,1000d744 <__subdf3+0x5fc>
1000d734:	180b883a 	mov	r5,r3
1000d738:	3023883a 	mov	r17,r6
1000d73c:	3825883a 	mov	r18,r7
1000d740:	003ea406 	br	1000d1d4 <__alt_data_end+0xf800d1d4>
1000d744:	0011883a 	mov	r8,zero
1000d748:	000b883a 	mov	r5,zero
1000d74c:	0023883a 	mov	r17,zero
1000d750:	003f0006 	br	1000d354 <__alt_data_end+0xf800d354>
1000d754:	11fff804 	addi	r7,r2,-32
1000d758:	19c8d83a 	srl	r4,r3,r7
1000d75c:	01c00804 	movi	r7,32
1000d760:	11c07e26 	beq	r2,r7,1000d95c <__subdf3+0x814>
1000d764:	01c01004 	movi	r7,64
1000d768:	3885c83a 	sub	r2,r7,r2
1000d76c:	1884983a 	sll	r2,r3,r2
1000d770:	118cb03a 	or	r6,r2,r6
1000d774:	300ec03a 	cmpne	r7,r6,zero
1000d778:	390eb03a 	or	r7,r7,r4
1000d77c:	0005883a 	mov	r2,zero
1000d780:	003f0906 	br	1000d3a8 <__alt_data_end+0xf800d3a8>
1000d784:	0101ffc4 	movi	r4,2047
1000d788:	513f991e 	bne	r10,r4,1000d5f0 <__alt_data_end+0xf800d5f0>
1000d78c:	180b883a 	mov	r5,r3
1000d790:	3023883a 	mov	r17,r6
1000d794:	5021883a 	mov	r16,r10
1000d798:	3825883a 	mov	r18,r7
1000d79c:	003e8d06 	br	1000d1d4 <__alt_data_end+0xf800d1d4>
1000d7a0:	80001a1e 	bne	r16,zero,1000d80c <__subdf3+0x6c4>
1000d7a4:	2c48b03a 	or	r4,r5,r17
1000d7a8:	20005526 	beq	r4,zero,1000d900 <__subdf3+0x7b8>
1000d7ac:	0084303a 	nor	r2,zero,r2
1000d7b0:	1000511e 	bne	r2,zero,1000d8f8 <__subdf3+0x7b0>
1000d7b4:	89a3883a 	add	r17,r17,r6
1000d7b8:	194b883a 	add	r5,r3,r5
1000d7bc:	898d803a 	cmpltu	r6,r17,r6
1000d7c0:	298b883a 	add	r5,r5,r6
1000d7c4:	5021883a 	mov	r16,r10
1000d7c8:	003efc06 	br	1000d3bc <__alt_data_end+0xf800d3bc>
1000d7cc:	1000341e 	bne	r2,zero,1000d8a0 <__subdf3+0x758>
1000d7d0:	1984b03a 	or	r2,r3,r6
1000d7d4:	10006f26 	beq	r2,zero,1000d994 <__subdf3+0x84c>
1000d7d8:	180b883a 	mov	r5,r3
1000d7dc:	3023883a 	mov	r17,r6
1000d7e0:	3825883a 	mov	r18,r7
1000d7e4:	0401ffc4 	movi	r16,2047
1000d7e8:	003e7a06 	br	1000d1d4 <__alt_data_end+0xf800d1d4>
1000d7ec:	2c62b03a 	or	r17,r5,r17
1000d7f0:	8822c03a 	cmpne	r17,r17,zero
1000d7f4:	0005883a 	mov	r2,zero
1000d7f8:	003f8a06 	br	1000d624 <__alt_data_end+0xf800d624>
1000d7fc:	3821883a 	mov	r16,r7
1000d800:	000b883a 	mov	r5,zero
1000d804:	0023883a 	mov	r17,zero
1000d808:	003ed206 	br	1000d354 <__alt_data_end+0xf800d354>
1000d80c:	0101ffc4 	movi	r4,2047
1000d810:	51003b26 	beq	r10,r4,1000d900 <__subdf3+0x7b8>
1000d814:	0085c83a 	sub	r2,zero,r2
1000d818:	29402034 	orhi	r5,r5,128
1000d81c:	01000e04 	movi	r4,56
1000d820:	20806216 	blt	r4,r2,1000d9ac <__subdf3+0x864>
1000d824:	010007c4 	movi	r4,31
1000d828:	20806b16 	blt	r4,r2,1000d9d8 <__subdf3+0x890>
1000d82c:	01000804 	movi	r4,32
1000d830:	2089c83a 	sub	r4,r4,r2
1000d834:	2912983a 	sll	r9,r5,r4
1000d838:	888ed83a 	srl	r7,r17,r2
1000d83c:	8908983a 	sll	r4,r17,r4
1000d840:	2884d83a 	srl	r2,r5,r2
1000d844:	49e2b03a 	or	r17,r9,r7
1000d848:	2008c03a 	cmpne	r4,r4,zero
1000d84c:	8922b03a 	or	r17,r17,r4
1000d850:	89a3883a 	add	r17,r17,r6
1000d854:	10c5883a 	add	r2,r2,r3
1000d858:	898d803a 	cmpltu	r6,r17,r6
1000d85c:	118b883a 	add	r5,r2,r6
1000d860:	5021883a 	mov	r16,r10
1000d864:	003ed506 	br	1000d3bc <__alt_data_end+0xf800d3bc>
1000d868:	1984b03a 	or	r2,r3,r6
1000d86c:	103e5926 	beq	r2,zero,1000d1d4 <__alt_data_end+0xf800d1d4>
1000d870:	8989c83a 	sub	r4,r17,r6
1000d874:	8911803a 	cmpltu	r8,r17,r4
1000d878:	28c5c83a 	sub	r2,r5,r3
1000d87c:	1205c83a 	sub	r2,r2,r8
1000d880:	1200202c 	andhi	r8,r2,128
1000d884:	403ef926 	beq	r8,zero,1000d46c <__alt_data_end+0xf800d46c>
1000d888:	3463c83a 	sub	r17,r6,r17
1000d88c:	194bc83a 	sub	r5,r3,r5
1000d890:	344d803a 	cmpltu	r6,r6,r17
1000d894:	298bc83a 	sub	r5,r5,r6
1000d898:	3825883a 	mov	r18,r7
1000d89c:	003e4d06 	br	1000d1d4 <__alt_data_end+0xf800d1d4>
1000d8a0:	1984b03a 	or	r2,r3,r6
1000d8a4:	10002b26 	beq	r2,zero,1000d954 <__subdf3+0x80c>
1000d8a8:	2808d0fa 	srli	r4,r5,3
1000d8ac:	8822d0fa 	srli	r17,r17,3
1000d8b0:	280a977a 	slli	r5,r5,29
1000d8b4:	2080022c 	andhi	r2,r4,8
1000d8b8:	2c62b03a 	or	r17,r5,r17
1000d8bc:	10000826 	beq	r2,zero,1000d8e0 <__subdf3+0x798>
1000d8c0:	1810d0fa 	srli	r8,r3,3
1000d8c4:	4080022c 	andhi	r2,r8,8
1000d8c8:	1000051e 	bne	r2,zero,1000d8e0 <__subdf3+0x798>
1000d8cc:	300cd0fa 	srli	r6,r6,3
1000d8d0:	1804977a 	slli	r2,r3,29
1000d8d4:	4009883a 	mov	r4,r8
1000d8d8:	3825883a 	mov	r18,r7
1000d8dc:	11a2b03a 	or	r17,r2,r6
1000d8e0:	880ad77a 	srli	r5,r17,29
1000d8e4:	200890fa 	slli	r4,r4,3
1000d8e8:	882290fa 	slli	r17,r17,3
1000d8ec:	0401ffc4 	movi	r16,2047
1000d8f0:	290ab03a 	or	r5,r5,r4
1000d8f4:	003e3706 	br	1000d1d4 <__alt_data_end+0xf800d1d4>
1000d8f8:	0101ffc4 	movi	r4,2047
1000d8fc:	513fc71e 	bne	r10,r4,1000d81c <__alt_data_end+0xf800d81c>
1000d900:	180b883a 	mov	r5,r3
1000d904:	3023883a 	mov	r17,r6
1000d908:	5021883a 	mov	r16,r10
1000d90c:	003e3106 	br	1000d1d4 <__alt_data_end+0xf800d1d4>
1000d910:	10002d26 	beq	r2,zero,1000d9c8 <__subdf3+0x880>
1000d914:	1984b03a 	or	r2,r3,r6
1000d918:	10000e26 	beq	r2,zero,1000d954 <__subdf3+0x80c>
1000d91c:	2808d0fa 	srli	r4,r5,3
1000d920:	8822d0fa 	srli	r17,r17,3
1000d924:	280a977a 	slli	r5,r5,29
1000d928:	2080022c 	andhi	r2,r4,8
1000d92c:	2c62b03a 	or	r17,r5,r17
1000d930:	103feb26 	beq	r2,zero,1000d8e0 <__alt_data_end+0xf800d8e0>
1000d934:	180ed0fa 	srli	r7,r3,3
1000d938:	3880022c 	andhi	r2,r7,8
1000d93c:	103fe81e 	bne	r2,zero,1000d8e0 <__alt_data_end+0xf800d8e0>
1000d940:	300cd0fa 	srli	r6,r6,3
1000d944:	1804977a 	slli	r2,r3,29
1000d948:	3809883a 	mov	r4,r7
1000d94c:	11a2b03a 	or	r17,r2,r6
1000d950:	003fe306 	br	1000d8e0 <__alt_data_end+0xf800d8e0>
1000d954:	0401ffc4 	movi	r16,2047
1000d958:	003e1e06 	br	1000d1d4 <__alt_data_end+0xf800d1d4>
1000d95c:	0005883a 	mov	r2,zero
1000d960:	003f8306 	br	1000d770 <__alt_data_end+0xf800d770>
1000d964:	113ff804 	addi	r4,r2,-32
1000d968:	02000804 	movi	r8,32
1000d96c:	2908d83a 	srl	r4,r5,r4
1000d970:	12002526 	beq	r2,r8,1000da08 <__subdf3+0x8c0>
1000d974:	02001004 	movi	r8,64
1000d978:	4085c83a 	sub	r2,r8,r2
1000d97c:	288a983a 	sll	r5,r5,r2
1000d980:	2c62b03a 	or	r17,r5,r17
1000d984:	8822c03a 	cmpne	r17,r17,zero
1000d988:	8922b03a 	or	r17,r17,r4
1000d98c:	0005883a 	mov	r2,zero
1000d990:	003f2406 	br	1000d624 <__alt_data_end+0xf800d624>
1000d994:	01402034 	movhi	r5,128
1000d998:	0011883a 	mov	r8,zero
1000d99c:	297fffc4 	addi	r5,r5,-1
1000d9a0:	047ffe04 	movi	r17,-8
1000d9a4:	0401ffc4 	movi	r16,2047
1000d9a8:	003e6a06 	br	1000d354 <__alt_data_end+0xf800d354>
1000d9ac:	2c62b03a 	or	r17,r5,r17
1000d9b0:	8822c03a 	cmpne	r17,r17,zero
1000d9b4:	0005883a 	mov	r2,zero
1000d9b8:	003fa506 	br	1000d850 <__alt_data_end+0xf800d850>
1000d9bc:	180b883a 	mov	r5,r3
1000d9c0:	3023883a 	mov	r17,r6
1000d9c4:	003e0306 	br	1000d1d4 <__alt_data_end+0xf800d1d4>
1000d9c8:	180b883a 	mov	r5,r3
1000d9cc:	3023883a 	mov	r17,r6
1000d9d0:	0401ffc4 	movi	r16,2047
1000d9d4:	003dff06 	br	1000d1d4 <__alt_data_end+0xf800d1d4>
1000d9d8:	113ff804 	addi	r4,r2,-32
1000d9dc:	01c00804 	movi	r7,32
1000d9e0:	2908d83a 	srl	r4,r5,r4
1000d9e4:	11c00a26 	beq	r2,r7,1000da10 <__subdf3+0x8c8>
1000d9e8:	01c01004 	movi	r7,64
1000d9ec:	3885c83a 	sub	r2,r7,r2
1000d9f0:	288a983a 	sll	r5,r5,r2
1000d9f4:	2c62b03a 	or	r17,r5,r17
1000d9f8:	8822c03a 	cmpne	r17,r17,zero
1000d9fc:	8922b03a 	or	r17,r17,r4
1000da00:	0005883a 	mov	r2,zero
1000da04:	003f9206 	br	1000d850 <__alt_data_end+0xf800d850>
1000da08:	000b883a 	mov	r5,zero
1000da0c:	003fdc06 	br	1000d980 <__alt_data_end+0xf800d980>
1000da10:	000b883a 	mov	r5,zero
1000da14:	003ff706 	br	1000d9f4 <__alt_data_end+0xf800d9f4>

1000da18 <__fixdfsi>:
1000da18:	2806d53a 	srli	r3,r5,20
1000da1c:	00800434 	movhi	r2,16
1000da20:	10bfffc4 	addi	r2,r2,-1
1000da24:	18c1ffcc 	andi	r3,r3,2047
1000da28:	0180ff84 	movi	r6,1022
1000da2c:	2884703a 	and	r2,r5,r2
1000da30:	280ad7fa 	srli	r5,r5,31
1000da34:	30c0130e 	bge	r6,r3,1000da84 <__fixdfsi+0x6c>
1000da38:	01810744 	movi	r6,1053
1000da3c:	30c00d16 	blt	r6,r3,1000da74 <__fixdfsi+0x5c>
1000da40:	01810cc4 	movi	r6,1075
1000da44:	30cdc83a 	sub	r6,r6,r3
1000da48:	01c007c4 	movi	r7,31
1000da4c:	10800434 	orhi	r2,r2,16
1000da50:	39800e0e 	bge	r7,r6,1000da8c <__fixdfsi+0x74>
1000da54:	010104c4 	movi	r4,1043
1000da58:	20c7c83a 	sub	r3,r4,r3
1000da5c:	10c6d83a 	srl	r3,r2,r3
1000da60:	29403fcc 	andi	r5,r5,255
1000da64:	0145c83a 	sub	r2,zero,r5
1000da68:	1884f03a 	xor	r2,r3,r2
1000da6c:	1145883a 	add	r2,r2,r5
1000da70:	f800283a 	ret
1000da74:	00a00034 	movhi	r2,32768
1000da78:	10bfffc4 	addi	r2,r2,-1
1000da7c:	2885883a 	add	r2,r5,r2
1000da80:	f800283a 	ret
1000da84:	0005883a 	mov	r2,zero
1000da88:	f800283a 	ret
1000da8c:	18fefb44 	addi	r3,r3,-1043
1000da90:	2188d83a 	srl	r4,r4,r6
1000da94:	10c6983a 	sll	r3,r2,r3
1000da98:	20c6b03a 	or	r3,r4,r3
1000da9c:	003ff006 	br	1000da60 <__alt_data_end+0xf800da60>

1000daa0 <__floatsidf>:
1000daa0:	defffd04 	addi	sp,sp,-12
1000daa4:	dc400115 	stw	r17,4(sp)
1000daa8:	dfc00215 	stw	ra,8(sp)
1000daac:	dc000015 	stw	r16,0(sp)
1000dab0:	2023883a 	mov	r17,r4
1000dab4:	20001426 	beq	r4,zero,1000db08 <__floatsidf+0x68>
1000dab8:	2020d7fa 	srli	r16,r4,31
1000dabc:	80000126 	beq	r16,zero,1000dac4 <__floatsidf+0x24>
1000dac0:	0123c83a 	sub	r17,zero,r4
1000dac4:	8809883a 	mov	r4,r17
1000dac8:	000dc140 	call	1000dc14 <__clzsi2>
1000dacc:	01410784 	movi	r5,1054
1000dad0:	00c00284 	movi	r3,10
1000dad4:	288bc83a 	sub	r5,r5,r2
1000dad8:	18801c16 	blt	r3,r2,1000db4c <__floatsidf+0xac>
1000dadc:	00c002c4 	movi	r3,11
1000dae0:	1887c83a 	sub	r3,r3,r2
1000dae4:	88c8d83a 	srl	r4,r17,r3
1000dae8:	00c00434 	movhi	r3,16
1000daec:	18ffffc4 	addi	r3,r3,-1
1000daf0:	10800544 	addi	r2,r2,21
1000daf4:	20c8703a 	and	r4,r4,r3
1000daf8:	8884983a 	sll	r2,r17,r2
1000dafc:	28c1ffcc 	andi	r3,r5,2047
1000db00:	800d883a 	mov	r6,r16
1000db04:	00000406 	br	1000db18 <__floatsidf+0x78>
1000db08:	000d883a 	mov	r6,zero
1000db0c:	0007883a 	mov	r3,zero
1000db10:	0009883a 	mov	r4,zero
1000db14:	0005883a 	mov	r2,zero
1000db18:	180a953a 	slli	r5,r3,20
1000db1c:	31803fcc 	andi	r6,r6,255
1000db20:	00c00434 	movhi	r3,16
1000db24:	300c97fa 	slli	r6,r6,31
1000db28:	18ffffc4 	addi	r3,r3,-1
1000db2c:	20c6703a 	and	r3,r4,r3
1000db30:	1946b03a 	or	r3,r3,r5
1000db34:	1986b03a 	or	r3,r3,r6
1000db38:	dfc00217 	ldw	ra,8(sp)
1000db3c:	dc400117 	ldw	r17,4(sp)
1000db40:	dc000017 	ldw	r16,0(sp)
1000db44:	dec00304 	addi	sp,sp,12
1000db48:	f800283a 	ret
1000db4c:	10fffd44 	addi	r3,r2,-11
1000db50:	88c8983a 	sll	r4,r17,r3
1000db54:	00800434 	movhi	r2,16
1000db58:	10bfffc4 	addi	r2,r2,-1
1000db5c:	2088703a 	and	r4,r4,r2
1000db60:	28c1ffcc 	andi	r3,r5,2047
1000db64:	800d883a 	mov	r6,r16
1000db68:	0005883a 	mov	r2,zero
1000db6c:	003fea06 	br	1000db18 <__alt_data_end+0xf800db18>

1000db70 <__floatunsidf>:
1000db70:	defffe04 	addi	sp,sp,-8
1000db74:	dc000015 	stw	r16,0(sp)
1000db78:	dfc00115 	stw	ra,4(sp)
1000db7c:	2021883a 	mov	r16,r4
1000db80:	20001026 	beq	r4,zero,1000dbc4 <__floatunsidf+0x54>
1000db84:	000dc140 	call	1000dc14 <__clzsi2>
1000db88:	01410784 	movi	r5,1054
1000db8c:	100d883a 	mov	r6,r2
1000db90:	288bc83a 	sub	r5,r5,r2
1000db94:	00800284 	movi	r2,10
1000db98:	11801616 	blt	r2,r6,1000dbf4 <__floatunsidf+0x84>
1000db9c:	008002c4 	movi	r2,11
1000dba0:	1185c83a 	sub	r2,r2,r6
1000dba4:	8084d83a 	srl	r2,r16,r2
1000dba8:	00c00434 	movhi	r3,16
1000dbac:	31c00544 	addi	r7,r6,21
1000dbb0:	18ffffc4 	addi	r3,r3,-1
1000dbb4:	81e0983a 	sll	r16,r16,r7
1000dbb8:	10cc703a 	and	r6,r2,r3
1000dbbc:	2941ffcc 	andi	r5,r5,2047
1000dbc0:	00000206 	br	1000dbcc <__floatunsidf+0x5c>
1000dbc4:	000b883a 	mov	r5,zero
1000dbc8:	000d883a 	mov	r6,zero
1000dbcc:	280a953a 	slli	r5,r5,20
1000dbd0:	00c00434 	movhi	r3,16
1000dbd4:	18ffffc4 	addi	r3,r3,-1
1000dbd8:	30c6703a 	and	r3,r6,r3
1000dbdc:	8005883a 	mov	r2,r16
1000dbe0:	1946b03a 	or	r3,r3,r5
1000dbe4:	dfc00117 	ldw	ra,4(sp)
1000dbe8:	dc000017 	ldw	r16,0(sp)
1000dbec:	dec00204 	addi	sp,sp,8
1000dbf0:	f800283a 	ret
1000dbf4:	31bffd44 	addi	r6,r6,-11
1000dbf8:	818c983a 	sll	r6,r16,r6
1000dbfc:	00800434 	movhi	r2,16
1000dc00:	10bfffc4 	addi	r2,r2,-1
1000dc04:	2941ffcc 	andi	r5,r5,2047
1000dc08:	0021883a 	mov	r16,zero
1000dc0c:	308c703a 	and	r6,r6,r2
1000dc10:	003fee06 	br	1000dbcc <__alt_data_end+0xf800dbcc>

1000dc14 <__clzsi2>:
1000dc14:	00bfffd4 	movui	r2,65535
1000dc18:	11000b36 	bltu	r2,r4,1000dc48 <__clzsi2+0x34>
1000dc1c:	00803fc4 	movi	r2,255
1000dc20:	1100122e 	bgeu	r2,r4,1000dc6c <__clzsi2+0x58>
1000dc24:	00c00204 	movi	r3,8
1000dc28:	01400604 	movi	r5,24
1000dc2c:	20c8d83a 	srl	r4,r4,r3
1000dc30:	00840074 	movhi	r2,4097
1000dc34:	10821104 	addi	r2,r2,2116
1000dc38:	1109883a 	add	r4,r2,r4
1000dc3c:	20800003 	ldbu	r2,0(r4)
1000dc40:	2885c83a 	sub	r2,r5,r2
1000dc44:	f800283a 	ret
1000dc48:	00804034 	movhi	r2,256
1000dc4c:	10bfffc4 	addi	r2,r2,-1
1000dc50:	11000336 	bltu	r2,r4,1000dc60 <__clzsi2+0x4c>
1000dc54:	00c00404 	movi	r3,16
1000dc58:	180b883a 	mov	r5,r3
1000dc5c:	003ff306 	br	1000dc2c <__alt_data_end+0xf800dc2c>
1000dc60:	00c00604 	movi	r3,24
1000dc64:	01400204 	movi	r5,8
1000dc68:	003ff006 	br	1000dc2c <__alt_data_end+0xf800dc2c>
1000dc6c:	0007883a 	mov	r3,zero
1000dc70:	01400804 	movi	r5,32
1000dc74:	003fed06 	br	1000dc2c <__alt_data_end+0xf800dc2c>

1000dc78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000dc78:	defffe04 	addi	sp,sp,-8
1000dc7c:	dfc00115 	stw	ra,4(sp)
1000dc80:	df000015 	stw	fp,0(sp)
1000dc84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000dc88:	00840074 	movhi	r2,4097
1000dc8c:	108aa304 	addi	r2,r2,10892
1000dc90:	10800017 	ldw	r2,0(r2)
1000dc94:	10000526 	beq	r2,zero,1000dcac <alt_get_errno+0x34>
1000dc98:	00840074 	movhi	r2,4097
1000dc9c:	108aa304 	addi	r2,r2,10892
1000dca0:	10800017 	ldw	r2,0(r2)
1000dca4:	103ee83a 	callr	r2
1000dca8:	00000206 	br	1000dcb4 <alt_get_errno+0x3c>
1000dcac:	00840074 	movhi	r2,4097
1000dcb0:	1092f804 	addi	r2,r2,19424
}
1000dcb4:	e037883a 	mov	sp,fp
1000dcb8:	dfc00117 	ldw	ra,4(sp)
1000dcbc:	df000017 	ldw	fp,0(sp)
1000dcc0:	dec00204 	addi	sp,sp,8
1000dcc4:	f800283a 	ret

1000dcc8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000dcc8:	defffb04 	addi	sp,sp,-20
1000dccc:	dfc00415 	stw	ra,16(sp)
1000dcd0:	df000315 	stw	fp,12(sp)
1000dcd4:	df000304 	addi	fp,sp,12
1000dcd8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000dcdc:	e0bfff17 	ldw	r2,-4(fp)
1000dce0:	10000816 	blt	r2,zero,1000dd04 <close+0x3c>
1000dce4:	e13fff17 	ldw	r4,-4(fp)
1000dce8:	01400304 	movi	r5,12
1000dcec:	000b4540 	call	1000b454 <__mulsi3>
1000dcf0:	1007883a 	mov	r3,r2
1000dcf4:	00840074 	movhi	r2,4097
1000dcf8:	10862004 	addi	r2,r2,6272
1000dcfc:	1885883a 	add	r2,r3,r2
1000dd00:	00000106 	br	1000dd08 <close+0x40>
1000dd04:	0005883a 	mov	r2,zero
1000dd08:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000dd0c:	e0bffd17 	ldw	r2,-12(fp)
1000dd10:	10001926 	beq	r2,zero,1000dd78 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000dd14:	e0bffd17 	ldw	r2,-12(fp)
1000dd18:	10800017 	ldw	r2,0(r2)
1000dd1c:	10800417 	ldw	r2,16(r2)
1000dd20:	10000626 	beq	r2,zero,1000dd3c <close+0x74>
1000dd24:	e0bffd17 	ldw	r2,-12(fp)
1000dd28:	10800017 	ldw	r2,0(r2)
1000dd2c:	10800417 	ldw	r2,16(r2)
1000dd30:	e13ffd17 	ldw	r4,-12(fp)
1000dd34:	103ee83a 	callr	r2
1000dd38:	00000106 	br	1000dd40 <close+0x78>
1000dd3c:	0005883a 	mov	r2,zero
1000dd40:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000dd44:	e13fff17 	ldw	r4,-4(fp)
1000dd48:	000e3ec0 	call	1000e3ec <alt_release_fd>
    if (rval < 0)
1000dd4c:	e0bffe17 	ldw	r2,-8(fp)
1000dd50:	1000070e 	bge	r2,zero,1000dd70 <close+0xa8>
    {
      ALT_ERRNO = -rval;
1000dd54:	000dc780 	call	1000dc78 <alt_get_errno>
1000dd58:	1007883a 	mov	r3,r2
1000dd5c:	e0bffe17 	ldw	r2,-8(fp)
1000dd60:	0085c83a 	sub	r2,zero,r2
1000dd64:	18800015 	stw	r2,0(r3)
      return -1;
1000dd68:	00bfffc4 	movi	r2,-1
1000dd6c:	00000706 	br	1000dd8c <close+0xc4>
    }
    return 0;
1000dd70:	0005883a 	mov	r2,zero
1000dd74:	00000506 	br	1000dd8c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000dd78:	000dc780 	call	1000dc78 <alt_get_errno>
1000dd7c:	1007883a 	mov	r3,r2
1000dd80:	00801444 	movi	r2,81
1000dd84:	18800015 	stw	r2,0(r3)
    return -1;
1000dd88:	00bfffc4 	movi	r2,-1
  }
}
1000dd8c:	e037883a 	mov	sp,fp
1000dd90:	dfc00117 	ldw	ra,4(sp)
1000dd94:	df000017 	ldw	fp,0(sp)
1000dd98:	dec00204 	addi	sp,sp,8
1000dd9c:	f800283a 	ret

1000dda0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000dda0:	defffc04 	addi	sp,sp,-16
1000dda4:	df000315 	stw	fp,12(sp)
1000dda8:	df000304 	addi	fp,sp,12
1000ddac:	e13ffd15 	stw	r4,-12(fp)
1000ddb0:	e17ffe15 	stw	r5,-8(fp)
1000ddb4:	e1bfff15 	stw	r6,-4(fp)
  return len;
1000ddb8:	e0bfff17 	ldw	r2,-4(fp)
}
1000ddbc:	e037883a 	mov	sp,fp
1000ddc0:	df000017 	ldw	fp,0(sp)
1000ddc4:	dec00104 	addi	sp,sp,4
1000ddc8:	f800283a 	ret

1000ddcc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000ddcc:	defffe04 	addi	sp,sp,-8
1000ddd0:	dfc00115 	stw	ra,4(sp)
1000ddd4:	df000015 	stw	fp,0(sp)
1000ddd8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000dddc:	00840074 	movhi	r2,4097
1000dde0:	108aa304 	addi	r2,r2,10892
1000dde4:	10800017 	ldw	r2,0(r2)
1000dde8:	10000526 	beq	r2,zero,1000de00 <alt_get_errno+0x34>
1000ddec:	00840074 	movhi	r2,4097
1000ddf0:	108aa304 	addi	r2,r2,10892
1000ddf4:	10800017 	ldw	r2,0(r2)
1000ddf8:	103ee83a 	callr	r2
1000ddfc:	00000206 	br	1000de08 <alt_get_errno+0x3c>
1000de00:	00840074 	movhi	r2,4097
1000de04:	1092f804 	addi	r2,r2,19424
}
1000de08:	e037883a 	mov	sp,fp
1000de0c:	dfc00117 	ldw	ra,4(sp)
1000de10:	df000017 	ldw	fp,0(sp)
1000de14:	dec00204 	addi	sp,sp,8
1000de18:	f800283a 	ret

1000de1c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000de1c:	defffb04 	addi	sp,sp,-20
1000de20:	dfc00415 	stw	ra,16(sp)
1000de24:	df000315 	stw	fp,12(sp)
1000de28:	df000304 	addi	fp,sp,12
1000de2c:	e13ffe15 	stw	r4,-8(fp)
1000de30:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000de34:	e0bffe17 	ldw	r2,-8(fp)
1000de38:	10000816 	blt	r2,zero,1000de5c <fstat+0x40>
1000de3c:	e13ffe17 	ldw	r4,-8(fp)
1000de40:	01400304 	movi	r5,12
1000de44:	000b4540 	call	1000b454 <__mulsi3>
1000de48:	1007883a 	mov	r3,r2
1000de4c:	00840074 	movhi	r2,4097
1000de50:	10862004 	addi	r2,r2,6272
1000de54:	1885883a 	add	r2,r3,r2
1000de58:	00000106 	br	1000de60 <fstat+0x44>
1000de5c:	0005883a 	mov	r2,zero
1000de60:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1000de64:	e0bffd17 	ldw	r2,-12(fp)
1000de68:	10001026 	beq	r2,zero,1000deac <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000de6c:	e0bffd17 	ldw	r2,-12(fp)
1000de70:	10800017 	ldw	r2,0(r2)
1000de74:	10800817 	ldw	r2,32(r2)
1000de78:	10000726 	beq	r2,zero,1000de98 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
1000de7c:	e0bffd17 	ldw	r2,-12(fp)
1000de80:	10800017 	ldw	r2,0(r2)
1000de84:	10800817 	ldw	r2,32(r2)
1000de88:	e13ffd17 	ldw	r4,-12(fp)
1000de8c:	e17fff17 	ldw	r5,-4(fp)
1000de90:	103ee83a 	callr	r2
1000de94:	00000a06 	br	1000dec0 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000de98:	e0bfff17 	ldw	r2,-4(fp)
1000de9c:	00c80004 	movi	r3,8192
1000dea0:	10c00115 	stw	r3,4(r2)
      return 0;
1000dea4:	0005883a 	mov	r2,zero
1000dea8:	00000506 	br	1000dec0 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000deac:	000ddcc0 	call	1000ddcc <alt_get_errno>
1000deb0:	1007883a 	mov	r3,r2
1000deb4:	00801444 	movi	r2,81
1000deb8:	18800015 	stw	r2,0(r3)
    return -1;
1000debc:	00bfffc4 	movi	r2,-1
  }
}
1000dec0:	e037883a 	mov	sp,fp
1000dec4:	dfc00117 	ldw	ra,4(sp)
1000dec8:	df000017 	ldw	fp,0(sp)
1000decc:	dec00204 	addi	sp,sp,8
1000ded0:	f800283a 	ret

1000ded4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000ded4:	defffe04 	addi	sp,sp,-8
1000ded8:	dfc00115 	stw	ra,4(sp)
1000dedc:	df000015 	stw	fp,0(sp)
1000dee0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000dee4:	00840074 	movhi	r2,4097
1000dee8:	108aa304 	addi	r2,r2,10892
1000deec:	10800017 	ldw	r2,0(r2)
1000def0:	10000526 	beq	r2,zero,1000df08 <alt_get_errno+0x34>
1000def4:	00840074 	movhi	r2,4097
1000def8:	108aa304 	addi	r2,r2,10892
1000defc:	10800017 	ldw	r2,0(r2)
1000df00:	103ee83a 	callr	r2
1000df04:	00000206 	br	1000df10 <alt_get_errno+0x3c>
1000df08:	00840074 	movhi	r2,4097
1000df0c:	1092f804 	addi	r2,r2,19424
}
1000df10:	e037883a 	mov	sp,fp
1000df14:	dfc00117 	ldw	ra,4(sp)
1000df18:	df000017 	ldw	fp,0(sp)
1000df1c:	dec00204 	addi	sp,sp,8
1000df20:	f800283a 	ret

1000df24 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000df24:	deffed04 	addi	sp,sp,-76
1000df28:	dfc01215 	stw	ra,72(sp)
1000df2c:	df001115 	stw	fp,68(sp)
1000df30:	df001104 	addi	fp,sp,68
1000df34:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000df38:	e0bfff17 	ldw	r2,-4(fp)
1000df3c:	10000816 	blt	r2,zero,1000df60 <isatty+0x3c>
1000df40:	e13fff17 	ldw	r4,-4(fp)
1000df44:	01400304 	movi	r5,12
1000df48:	000b4540 	call	1000b454 <__mulsi3>
1000df4c:	1007883a 	mov	r3,r2
1000df50:	00840074 	movhi	r2,4097
1000df54:	10862004 	addi	r2,r2,6272
1000df58:	1885883a 	add	r2,r3,r2
1000df5c:	00000106 	br	1000df64 <isatty+0x40>
1000df60:	0005883a 	mov	r2,zero
1000df64:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1000df68:	e0bfef17 	ldw	r2,-68(fp)
1000df6c:	10000e26 	beq	r2,zero,1000dfa8 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000df70:	e0bfef17 	ldw	r2,-68(fp)
1000df74:	10800017 	ldw	r2,0(r2)
1000df78:	10800817 	ldw	r2,32(r2)
1000df7c:	1000021e 	bne	r2,zero,1000df88 <isatty+0x64>
    {
      return 1;
1000df80:	00800044 	movi	r2,1
1000df84:	00000d06 	br	1000dfbc <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000df88:	e0bff004 	addi	r2,fp,-64
1000df8c:	e13fff17 	ldw	r4,-4(fp)
1000df90:	100b883a 	mov	r5,r2
1000df94:	000de1c0 	call	1000de1c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000df98:	e0bff117 	ldw	r2,-60(fp)
1000df9c:	10880020 	cmpeqi	r2,r2,8192
1000dfa0:	10803fcc 	andi	r2,r2,255
1000dfa4:	00000506 	br	1000dfbc <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000dfa8:	000ded40 	call	1000ded4 <alt_get_errno>
1000dfac:	1007883a 	mov	r3,r2
1000dfb0:	00801444 	movi	r2,81
1000dfb4:	18800015 	stw	r2,0(r3)
    return 0;
1000dfb8:	0005883a 	mov	r2,zero
  }
}
1000dfbc:	e037883a 	mov	sp,fp
1000dfc0:	dfc00117 	ldw	ra,4(sp)
1000dfc4:	df000017 	ldw	fp,0(sp)
1000dfc8:	dec00204 	addi	sp,sp,8
1000dfcc:	f800283a 	ret

1000dfd0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000dfd0:	defffc04 	addi	sp,sp,-16
1000dfd4:	df000315 	stw	fp,12(sp)
1000dfd8:	df000304 	addi	fp,sp,12
1000dfdc:	e13ffd15 	stw	r4,-12(fp)
1000dfe0:	e17ffe15 	stw	r5,-8(fp)
1000dfe4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1000dfe8:	e0fffe17 	ldw	r3,-8(fp)
1000dfec:	e0bffd17 	ldw	r2,-12(fp)
1000dff0:	18800c26 	beq	r3,r2,1000e024 <alt_load_section+0x54>
  {
    while( to != end )
1000dff4:	00000806 	br	1000e018 <alt_load_section+0x48>
    {
      *to++ = *from++;
1000dff8:	e0bffe17 	ldw	r2,-8(fp)
1000dffc:	10c00104 	addi	r3,r2,4
1000e000:	e0fffe15 	stw	r3,-8(fp)
1000e004:	e0fffd17 	ldw	r3,-12(fp)
1000e008:	19000104 	addi	r4,r3,4
1000e00c:	e13ffd15 	stw	r4,-12(fp)
1000e010:	18c00017 	ldw	r3,0(r3)
1000e014:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1000e018:	e0fffe17 	ldw	r3,-8(fp)
1000e01c:	e0bfff17 	ldw	r2,-4(fp)
1000e020:	18bff51e 	bne	r3,r2,1000dff8 <__alt_data_end+0xf800dff8>
    {
      *to++ = *from++;
    }
  }
}
1000e024:	e037883a 	mov	sp,fp
1000e028:	df000017 	ldw	fp,0(sp)
1000e02c:	dec00104 	addi	sp,sp,4
1000e030:	f800283a 	ret

1000e034 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000e034:	defffe04 	addi	sp,sp,-8
1000e038:	dfc00115 	stw	ra,4(sp)
1000e03c:	df000015 	stw	fp,0(sp)
1000e040:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000e044:	01040074 	movhi	r4,4097
1000e048:	210aa804 	addi	r4,r4,10912
1000e04c:	01440074 	movhi	r5,4097
1000e050:	29425e04 	addi	r5,r5,2424
1000e054:	01840074 	movhi	r6,4097
1000e058:	318aa804 	addi	r6,r6,10912
1000e05c:	000dfd00 	call	1000dfd0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000e060:	01040034 	movhi	r4,4096
1000e064:	21000804 	addi	r4,r4,32
1000e068:	01440034 	movhi	r5,4096
1000e06c:	29400804 	addi	r5,r5,32
1000e070:	01840034 	movhi	r6,4096
1000e074:	31808b04 	addi	r6,r6,556
1000e078:	000dfd00 	call	1000dfd0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1000e07c:	01040074 	movhi	r4,4097
1000e080:	2100f404 	addi	r4,r4,976
1000e084:	01440074 	movhi	r5,4097
1000e088:	2940f404 	addi	r5,r5,976
1000e08c:	01840074 	movhi	r6,4097
1000e090:	31825e04 	addi	r6,r6,2424
1000e094:	000dfd00 	call	1000dfd0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000e098:	000f2ac0 	call	1000f2ac <alt_dcache_flush_all>
  alt_icache_flush_all();
1000e09c:	000f4740 	call	1000f474 <alt_icache_flush_all>
}
1000e0a0:	e037883a 	mov	sp,fp
1000e0a4:	dfc00117 	ldw	ra,4(sp)
1000e0a8:	df000017 	ldw	fp,0(sp)
1000e0ac:	dec00204 	addi	sp,sp,8
1000e0b0:	f800283a 	ret

1000e0b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000e0b4:	defffe04 	addi	sp,sp,-8
1000e0b8:	dfc00115 	stw	ra,4(sp)
1000e0bc:	df000015 	stw	fp,0(sp)
1000e0c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000e0c4:	00840074 	movhi	r2,4097
1000e0c8:	108aa304 	addi	r2,r2,10892
1000e0cc:	10800017 	ldw	r2,0(r2)
1000e0d0:	10000526 	beq	r2,zero,1000e0e8 <alt_get_errno+0x34>
1000e0d4:	00840074 	movhi	r2,4097
1000e0d8:	108aa304 	addi	r2,r2,10892
1000e0dc:	10800017 	ldw	r2,0(r2)
1000e0e0:	103ee83a 	callr	r2
1000e0e4:	00000206 	br	1000e0f0 <alt_get_errno+0x3c>
1000e0e8:	00840074 	movhi	r2,4097
1000e0ec:	1092f804 	addi	r2,r2,19424
}
1000e0f0:	e037883a 	mov	sp,fp
1000e0f4:	dfc00117 	ldw	ra,4(sp)
1000e0f8:	df000017 	ldw	fp,0(sp)
1000e0fc:	dec00204 	addi	sp,sp,8
1000e100:	f800283a 	ret

1000e104 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000e104:	defff904 	addi	sp,sp,-28
1000e108:	dfc00615 	stw	ra,24(sp)
1000e10c:	df000515 	stw	fp,20(sp)
1000e110:	df000504 	addi	fp,sp,20
1000e114:	e13ffd15 	stw	r4,-12(fp)
1000e118:	e17ffe15 	stw	r5,-8(fp)
1000e11c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000e120:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000e124:	e0bffd17 	ldw	r2,-12(fp)
1000e128:	10000816 	blt	r2,zero,1000e14c <lseek+0x48>
1000e12c:	e13ffd17 	ldw	r4,-12(fp)
1000e130:	01400304 	movi	r5,12
1000e134:	000b4540 	call	1000b454 <__mulsi3>
1000e138:	1007883a 	mov	r3,r2
1000e13c:	00840074 	movhi	r2,4097
1000e140:	10862004 	addi	r2,r2,6272
1000e144:	1885883a 	add	r2,r3,r2
1000e148:	00000106 	br	1000e150 <lseek+0x4c>
1000e14c:	0005883a 	mov	r2,zero
1000e150:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1000e154:	e0bffc17 	ldw	r2,-16(fp)
1000e158:	10001026 	beq	r2,zero,1000e19c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1000e15c:	e0bffc17 	ldw	r2,-16(fp)
1000e160:	10800017 	ldw	r2,0(r2)
1000e164:	10800717 	ldw	r2,28(r2)
1000e168:	10000926 	beq	r2,zero,1000e190 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1000e16c:	e0bffc17 	ldw	r2,-16(fp)
1000e170:	10800017 	ldw	r2,0(r2)
1000e174:	10800717 	ldw	r2,28(r2)
1000e178:	e13ffc17 	ldw	r4,-16(fp)
1000e17c:	e17ffe17 	ldw	r5,-8(fp)
1000e180:	e1bfff17 	ldw	r6,-4(fp)
1000e184:	103ee83a 	callr	r2
1000e188:	e0bffb15 	stw	r2,-20(fp)
1000e18c:	00000506 	br	1000e1a4 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1000e190:	00bfde84 	movi	r2,-134
1000e194:	e0bffb15 	stw	r2,-20(fp)
1000e198:	00000206 	br	1000e1a4 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
1000e19c:	00bfebc4 	movi	r2,-81
1000e1a0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1000e1a4:	e0bffb17 	ldw	r2,-20(fp)
1000e1a8:	1000070e 	bge	r2,zero,1000e1c8 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
1000e1ac:	000e0b40 	call	1000e0b4 <alt_get_errno>
1000e1b0:	1007883a 	mov	r3,r2
1000e1b4:	e0bffb17 	ldw	r2,-20(fp)
1000e1b8:	0085c83a 	sub	r2,zero,r2
1000e1bc:	18800015 	stw	r2,0(r3)
    rc = -1;
1000e1c0:	00bfffc4 	movi	r2,-1
1000e1c4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1000e1c8:	e0bffb17 	ldw	r2,-20(fp)
}
1000e1cc:	e037883a 	mov	sp,fp
1000e1d0:	dfc00117 	ldw	ra,4(sp)
1000e1d4:	df000017 	ldw	fp,0(sp)
1000e1d8:	dec00204 	addi	sp,sp,8
1000e1dc:	f800283a 	ret

1000e1e0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000e1e0:	defffd04 	addi	sp,sp,-12
1000e1e4:	dfc00215 	stw	ra,8(sp)
1000e1e8:	df000115 	stw	fp,4(sp)
1000e1ec:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000e1f0:	0009883a 	mov	r4,zero
1000e1f4:	000e6a40 	call	1000e6a4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000e1f8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000e1fc:	000e6d80 	call	1000e6d8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000e200:	01040074 	movhi	r4,4097
1000e204:	21025404 	addi	r4,r4,2384
1000e208:	01440074 	movhi	r5,4097
1000e20c:	29425404 	addi	r5,r5,2384
1000e210:	01840074 	movhi	r6,4097
1000e214:	31825404 	addi	r6,r6,2384
1000e218:	000f8400 	call	1000f840 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000e21c:	000f3bc0 	call	1000f3bc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000e220:	01040074 	movhi	r4,4097
1000e224:	213d0604 	addi	r4,r4,-3048
1000e228:	001002c0 	call	1001002c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000e22c:	d1286117 	ldw	r4,-24188(gp)
1000e230:	d0e86217 	ldw	r3,-24184(gp)
1000e234:	d0a86317 	ldw	r2,-24180(gp)
1000e238:	180b883a 	mov	r5,r3
1000e23c:	100d883a 	mov	r6,r2
1000e240:	0000edc0 	call	10000edc <main>
1000e244:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000e248:	01000044 	movi	r4,1
1000e24c:	000dcc80 	call	1000dcc8 <close>
  exit (result);
1000e250:	e13fff17 	ldw	r4,-4(fp)
1000e254:	00100400 	call	10010040 <exit>

1000e258 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1000e258:	defffe04 	addi	sp,sp,-8
1000e25c:	df000115 	stw	fp,4(sp)
1000e260:	df000104 	addi	fp,sp,4
1000e264:	e13fff15 	stw	r4,-4(fp)
}
1000e268:	e037883a 	mov	sp,fp
1000e26c:	df000017 	ldw	fp,0(sp)
1000e270:	dec00104 	addi	sp,sp,4
1000e274:	f800283a 	ret

1000e278 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1000e278:	defffe04 	addi	sp,sp,-8
1000e27c:	df000115 	stw	fp,4(sp)
1000e280:	df000104 	addi	fp,sp,4
1000e284:	e13fff15 	stw	r4,-4(fp)
}
1000e288:	e037883a 	mov	sp,fp
1000e28c:	df000017 	ldw	fp,0(sp)
1000e290:	dec00104 	addi	sp,sp,4
1000e294:	f800283a 	ret

1000e298 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000e298:	defffe04 	addi	sp,sp,-8
1000e29c:	dfc00115 	stw	ra,4(sp)
1000e2a0:	df000015 	stw	fp,0(sp)
1000e2a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000e2a8:	00840074 	movhi	r2,4097
1000e2ac:	108aa304 	addi	r2,r2,10892
1000e2b0:	10800017 	ldw	r2,0(r2)
1000e2b4:	10000526 	beq	r2,zero,1000e2cc <alt_get_errno+0x34>
1000e2b8:	00840074 	movhi	r2,4097
1000e2bc:	108aa304 	addi	r2,r2,10892
1000e2c0:	10800017 	ldw	r2,0(r2)
1000e2c4:	103ee83a 	callr	r2
1000e2c8:	00000206 	br	1000e2d4 <alt_get_errno+0x3c>
1000e2cc:	00840074 	movhi	r2,4097
1000e2d0:	1092f804 	addi	r2,r2,19424
}
1000e2d4:	e037883a 	mov	sp,fp
1000e2d8:	dfc00117 	ldw	ra,4(sp)
1000e2dc:	df000017 	ldw	fp,0(sp)
1000e2e0:	dec00204 	addi	sp,sp,8
1000e2e4:	f800283a 	ret

1000e2e8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1000e2e8:	defff904 	addi	sp,sp,-28
1000e2ec:	dfc00615 	stw	ra,24(sp)
1000e2f0:	df000515 	stw	fp,20(sp)
1000e2f4:	df000504 	addi	fp,sp,20
1000e2f8:	e13ffd15 	stw	r4,-12(fp)
1000e2fc:	e17ffe15 	stw	r5,-8(fp)
1000e300:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000e304:	e0bffd17 	ldw	r2,-12(fp)
1000e308:	10000816 	blt	r2,zero,1000e32c <read+0x44>
1000e30c:	e13ffd17 	ldw	r4,-12(fp)
1000e310:	01400304 	movi	r5,12
1000e314:	000b4540 	call	1000b454 <__mulsi3>
1000e318:	1007883a 	mov	r3,r2
1000e31c:	00840074 	movhi	r2,4097
1000e320:	10862004 	addi	r2,r2,6272
1000e324:	1885883a 	add	r2,r3,r2
1000e328:	00000106 	br	1000e330 <read+0x48>
1000e32c:	0005883a 	mov	r2,zero
1000e330:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000e334:	e0bffb17 	ldw	r2,-20(fp)
1000e338:	10002226 	beq	r2,zero,1000e3c4 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000e33c:	e0bffb17 	ldw	r2,-20(fp)
1000e340:	10800217 	ldw	r2,8(r2)
1000e344:	108000cc 	andi	r2,r2,3
1000e348:	10800060 	cmpeqi	r2,r2,1
1000e34c:	1000181e 	bne	r2,zero,1000e3b0 <read+0xc8>
        (fd->dev->read))
1000e350:	e0bffb17 	ldw	r2,-20(fp)
1000e354:	10800017 	ldw	r2,0(r2)
1000e358:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000e35c:	10001426 	beq	r2,zero,1000e3b0 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1000e360:	e0bffb17 	ldw	r2,-20(fp)
1000e364:	10800017 	ldw	r2,0(r2)
1000e368:	10800517 	ldw	r2,20(r2)
1000e36c:	e0ffff17 	ldw	r3,-4(fp)
1000e370:	e13ffb17 	ldw	r4,-20(fp)
1000e374:	e17ffe17 	ldw	r5,-8(fp)
1000e378:	180d883a 	mov	r6,r3
1000e37c:	103ee83a 	callr	r2
1000e380:	e0bffc15 	stw	r2,-16(fp)
1000e384:	e0bffc17 	ldw	r2,-16(fp)
1000e388:	1000070e 	bge	r2,zero,1000e3a8 <read+0xc0>
        {
          ALT_ERRNO = -rval;
1000e38c:	000e2980 	call	1000e298 <alt_get_errno>
1000e390:	1007883a 	mov	r3,r2
1000e394:	e0bffc17 	ldw	r2,-16(fp)
1000e398:	0085c83a 	sub	r2,zero,r2
1000e39c:	18800015 	stw	r2,0(r3)
          return -1;
1000e3a0:	00bfffc4 	movi	r2,-1
1000e3a4:	00000c06 	br	1000e3d8 <read+0xf0>
        }
        return rval;
1000e3a8:	e0bffc17 	ldw	r2,-16(fp)
1000e3ac:	00000a06 	br	1000e3d8 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
1000e3b0:	000e2980 	call	1000e298 <alt_get_errno>
1000e3b4:	1007883a 	mov	r3,r2
1000e3b8:	00800344 	movi	r2,13
1000e3bc:	18800015 	stw	r2,0(r3)
1000e3c0:	00000406 	br	1000e3d4 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1000e3c4:	000e2980 	call	1000e298 <alt_get_errno>
1000e3c8:	1007883a 	mov	r3,r2
1000e3cc:	00801444 	movi	r2,81
1000e3d0:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000e3d4:	00bfffc4 	movi	r2,-1
}
1000e3d8:	e037883a 	mov	sp,fp
1000e3dc:	dfc00117 	ldw	ra,4(sp)
1000e3e0:	df000017 	ldw	fp,0(sp)
1000e3e4:	dec00204 	addi	sp,sp,8
1000e3e8:	f800283a 	ret

1000e3ec <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1000e3ec:	defffc04 	addi	sp,sp,-16
1000e3f0:	dfc00315 	stw	ra,12(sp)
1000e3f4:	df000215 	stw	fp,8(sp)
1000e3f8:	dc000115 	stw	r16,4(sp)
1000e3fc:	df000204 	addi	fp,sp,8
1000e400:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
1000e404:	e0bffe17 	ldw	r2,-8(fp)
1000e408:	108000d0 	cmplti	r2,r2,3
1000e40c:	1000111e 	bne	r2,zero,1000e454 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
1000e410:	04040074 	movhi	r16,4097
1000e414:	84062004 	addi	r16,r16,6272
1000e418:	e0bffe17 	ldw	r2,-8(fp)
1000e41c:	1009883a 	mov	r4,r2
1000e420:	01400304 	movi	r5,12
1000e424:	000b4540 	call	1000b454 <__mulsi3>
1000e428:	8085883a 	add	r2,r16,r2
1000e42c:	10800204 	addi	r2,r2,8
1000e430:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1000e434:	04040074 	movhi	r16,4097
1000e438:	84062004 	addi	r16,r16,6272
1000e43c:	e0bffe17 	ldw	r2,-8(fp)
1000e440:	1009883a 	mov	r4,r2
1000e444:	01400304 	movi	r5,12
1000e448:	000b4540 	call	1000b454 <__mulsi3>
1000e44c:	8085883a 	add	r2,r16,r2
1000e450:	10000015 	stw	zero,0(r2)
  }
}
1000e454:	e6ffff04 	addi	sp,fp,-4
1000e458:	dfc00217 	ldw	ra,8(sp)
1000e45c:	df000117 	ldw	fp,4(sp)
1000e460:	dc000017 	ldw	r16,0(sp)
1000e464:	dec00304 	addi	sp,sp,12
1000e468:	f800283a 	ret

1000e46c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1000e46c:	defff904 	addi	sp,sp,-28
1000e470:	df000615 	stw	fp,24(sp)
1000e474:	df000604 	addi	fp,sp,24
1000e478:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000e47c:	0005303a 	rdctl	r2,status
1000e480:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000e484:	e0fffc17 	ldw	r3,-16(fp)
1000e488:	00bfff84 	movi	r2,-2
1000e48c:	1884703a 	and	r2,r3,r2
1000e490:	1001703a 	wrctl	status,r2
  
  return context;
1000e494:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1000e498:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1000e49c:	d0a00c17 	ldw	r2,-32720(gp)
1000e4a0:	10c000c4 	addi	r3,r2,3
1000e4a4:	00bfff04 	movi	r2,-4
1000e4a8:	1884703a 	and	r2,r3,r2
1000e4ac:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1000e4b0:	d0e00c17 	ldw	r3,-32720(gp)
1000e4b4:	e0bfff17 	ldw	r2,-4(fp)
1000e4b8:	1887883a 	add	r3,r3,r2
1000e4bc:	00860034 	movhi	r2,6144
1000e4c0:	10800004 	addi	r2,r2,0
1000e4c4:	10c0062e 	bgeu	r2,r3,1000e4e0 <sbrk+0x74>
1000e4c8:	e0bffa17 	ldw	r2,-24(fp)
1000e4cc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000e4d0:	e0bffd17 	ldw	r2,-12(fp)
1000e4d4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1000e4d8:	00bfffc4 	movi	r2,-1
1000e4dc:	00000b06 	br	1000e50c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1000e4e0:	d0a00c17 	ldw	r2,-32720(gp)
1000e4e4:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
1000e4e8:	d0e00c17 	ldw	r3,-32720(gp)
1000e4ec:	e0bfff17 	ldw	r2,-4(fp)
1000e4f0:	1885883a 	add	r2,r3,r2
1000e4f4:	d0a00c15 	stw	r2,-32720(gp)
1000e4f8:	e0bffa17 	ldw	r2,-24(fp)
1000e4fc:	e0bffe15 	stw	r2,-8(fp)
1000e500:	e0bffe17 	ldw	r2,-8(fp)
1000e504:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1000e508:	e0bffb17 	ldw	r2,-20(fp)
} 
1000e50c:	e037883a 	mov	sp,fp
1000e510:	df000017 	ldw	fp,0(sp)
1000e514:	dec00104 	addi	sp,sp,4
1000e518:	f800283a 	ret

1000e51c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000e51c:	defffe04 	addi	sp,sp,-8
1000e520:	dfc00115 	stw	ra,4(sp)
1000e524:	df000015 	stw	fp,0(sp)
1000e528:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000e52c:	00840074 	movhi	r2,4097
1000e530:	108aa304 	addi	r2,r2,10892
1000e534:	10800017 	ldw	r2,0(r2)
1000e538:	10000526 	beq	r2,zero,1000e550 <alt_get_errno+0x34>
1000e53c:	00840074 	movhi	r2,4097
1000e540:	108aa304 	addi	r2,r2,10892
1000e544:	10800017 	ldw	r2,0(r2)
1000e548:	103ee83a 	callr	r2
1000e54c:	00000206 	br	1000e558 <alt_get_errno+0x3c>
1000e550:	00840074 	movhi	r2,4097
1000e554:	1092f804 	addi	r2,r2,19424
}
1000e558:	e037883a 	mov	sp,fp
1000e55c:	dfc00117 	ldw	ra,4(sp)
1000e560:	df000017 	ldw	fp,0(sp)
1000e564:	dec00204 	addi	sp,sp,8
1000e568:	f800283a 	ret

1000e56c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1000e56c:	defff904 	addi	sp,sp,-28
1000e570:	dfc00615 	stw	ra,24(sp)
1000e574:	df000515 	stw	fp,20(sp)
1000e578:	df000504 	addi	fp,sp,20
1000e57c:	e13ffd15 	stw	r4,-12(fp)
1000e580:	e17ffe15 	stw	r5,-8(fp)
1000e584:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000e588:	e0bffd17 	ldw	r2,-12(fp)
1000e58c:	10000816 	blt	r2,zero,1000e5b0 <write+0x44>
1000e590:	e13ffd17 	ldw	r4,-12(fp)
1000e594:	01400304 	movi	r5,12
1000e598:	000b4540 	call	1000b454 <__mulsi3>
1000e59c:	1007883a 	mov	r3,r2
1000e5a0:	00840074 	movhi	r2,4097
1000e5a4:	10862004 	addi	r2,r2,6272
1000e5a8:	1885883a 	add	r2,r3,r2
1000e5ac:	00000106 	br	1000e5b4 <write+0x48>
1000e5b0:	0005883a 	mov	r2,zero
1000e5b4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000e5b8:	e0bffb17 	ldw	r2,-20(fp)
1000e5bc:	10002126 	beq	r2,zero,1000e644 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1000e5c0:	e0bffb17 	ldw	r2,-20(fp)
1000e5c4:	10800217 	ldw	r2,8(r2)
1000e5c8:	108000cc 	andi	r2,r2,3
1000e5cc:	10001826 	beq	r2,zero,1000e630 <write+0xc4>
1000e5d0:	e0bffb17 	ldw	r2,-20(fp)
1000e5d4:	10800017 	ldw	r2,0(r2)
1000e5d8:	10800617 	ldw	r2,24(r2)
1000e5dc:	10001426 	beq	r2,zero,1000e630 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1000e5e0:	e0bffb17 	ldw	r2,-20(fp)
1000e5e4:	10800017 	ldw	r2,0(r2)
1000e5e8:	10800617 	ldw	r2,24(r2)
1000e5ec:	e0ffff17 	ldw	r3,-4(fp)
1000e5f0:	e13ffb17 	ldw	r4,-20(fp)
1000e5f4:	e17ffe17 	ldw	r5,-8(fp)
1000e5f8:	180d883a 	mov	r6,r3
1000e5fc:	103ee83a 	callr	r2
1000e600:	e0bffc15 	stw	r2,-16(fp)
1000e604:	e0bffc17 	ldw	r2,-16(fp)
1000e608:	1000070e 	bge	r2,zero,1000e628 <write+0xbc>
      {
        ALT_ERRNO = -rval;
1000e60c:	000e51c0 	call	1000e51c <alt_get_errno>
1000e610:	1007883a 	mov	r3,r2
1000e614:	e0bffc17 	ldw	r2,-16(fp)
1000e618:	0085c83a 	sub	r2,zero,r2
1000e61c:	18800015 	stw	r2,0(r3)
        return -1;
1000e620:	00bfffc4 	movi	r2,-1
1000e624:	00000c06 	br	1000e658 <write+0xec>
      }
      return rval;
1000e628:	e0bffc17 	ldw	r2,-16(fp)
1000e62c:	00000a06 	br	1000e658 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
1000e630:	000e51c0 	call	1000e51c <alt_get_errno>
1000e634:	1007883a 	mov	r3,r2
1000e638:	00800344 	movi	r2,13
1000e63c:	18800015 	stw	r2,0(r3)
1000e640:	00000406 	br	1000e654 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1000e644:	000e51c0 	call	1000e51c <alt_get_errno>
1000e648:	1007883a 	mov	r3,r2
1000e64c:	00801444 	movi	r2,81
1000e650:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000e654:	00bfffc4 	movi	r2,-1
}
1000e658:	e037883a 	mov	sp,fp
1000e65c:	dfc00117 	ldw	ra,4(sp)
1000e660:	df000017 	ldw	fp,0(sp)
1000e664:	dec00204 	addi	sp,sp,8
1000e668:	f800283a 	ret

1000e66c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1000e66c:	defffd04 	addi	sp,sp,-12
1000e670:	dfc00215 	stw	ra,8(sp)
1000e674:	df000115 	stw	fp,4(sp)
1000e678:	df000104 	addi	fp,sp,4
1000e67c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1000e680:	e13fff17 	ldw	r4,-4(fp)
1000e684:	01440074 	movhi	r5,4097
1000e688:	294aa004 	addi	r5,r5,10880
1000e68c:	000f3180 	call	1000f318 <alt_dev_llist_insert>
}
1000e690:	e037883a 	mov	sp,fp
1000e694:	dfc00117 	ldw	ra,4(sp)
1000e698:	df000017 	ldw	fp,0(sp)
1000e69c:	dec00204 	addi	sp,sp,8
1000e6a0:	f800283a 	ret

1000e6a4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1000e6a4:	defffd04 	addi	sp,sp,-12
1000e6a8:	dfc00215 	stw	ra,8(sp)
1000e6ac:	df000115 	stw	fp,4(sp)
1000e6b0:	df000104 	addi	fp,sp,4
1000e6b4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
1000e6b8:	000fcf80 	call	1000fcf8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1000e6bc:	00800044 	movi	r2,1
1000e6c0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1000e6c4:	e037883a 	mov	sp,fp
1000e6c8:	dfc00117 	ldw	ra,4(sp)
1000e6cc:	df000017 	ldw	fp,0(sp)
1000e6d0:	dec00204 	addi	sp,sp,8
1000e6d4:	f800283a 	ret

1000e6d8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1000e6d8:	defffe04 	addi	sp,sp,-8
1000e6dc:	dfc00115 	stw	ra,4(sp)
1000e6e0:	df000015 	stw	fp,0(sp)
1000e6e4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1000e6e8:	01040074 	movhi	r4,4097
1000e6ec:	21068a04 	addi	r4,r4,6696
1000e6f0:	000b883a 	mov	r5,zero
1000e6f4:	01800144 	movi	r6,5
1000e6f8:	000e8840 	call	1000e884 <altera_avalon_jtag_uart_init>
1000e6fc:	01040074 	movhi	r4,4097
1000e700:	21068004 	addi	r4,r4,6656
1000e704:	000e66c0 	call	1000e66c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
1000e708:	0001883a 	nop
}
1000e70c:	e037883a 	mov	sp,fp
1000e710:	dfc00117 	ldw	ra,4(sp)
1000e714:	df000017 	ldw	fp,0(sp)
1000e718:	dec00204 	addi	sp,sp,8
1000e71c:	f800283a 	ret

1000e720 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1000e720:	defffa04 	addi	sp,sp,-24
1000e724:	dfc00515 	stw	ra,20(sp)
1000e728:	df000415 	stw	fp,16(sp)
1000e72c:	df000404 	addi	fp,sp,16
1000e730:	e13ffd15 	stw	r4,-12(fp)
1000e734:	e17ffe15 	stw	r5,-8(fp)
1000e738:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000e73c:	e0bffd17 	ldw	r2,-12(fp)
1000e740:	10800017 	ldw	r2,0(r2)
1000e744:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1000e748:	e0bffc17 	ldw	r2,-16(fp)
1000e74c:	10c00a04 	addi	r3,r2,40
1000e750:	e0bffd17 	ldw	r2,-12(fp)
1000e754:	10800217 	ldw	r2,8(r2)
1000e758:	1809883a 	mov	r4,r3
1000e75c:	e17ffe17 	ldw	r5,-8(fp)
1000e760:	e1bfff17 	ldw	r6,-4(fp)
1000e764:	100f883a 	mov	r7,r2
1000e768:	000ed480 	call	1000ed48 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1000e76c:	e037883a 	mov	sp,fp
1000e770:	dfc00117 	ldw	ra,4(sp)
1000e774:	df000017 	ldw	fp,0(sp)
1000e778:	dec00204 	addi	sp,sp,8
1000e77c:	f800283a 	ret

1000e780 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1000e780:	defffa04 	addi	sp,sp,-24
1000e784:	dfc00515 	stw	ra,20(sp)
1000e788:	df000415 	stw	fp,16(sp)
1000e78c:	df000404 	addi	fp,sp,16
1000e790:	e13ffd15 	stw	r4,-12(fp)
1000e794:	e17ffe15 	stw	r5,-8(fp)
1000e798:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000e79c:	e0bffd17 	ldw	r2,-12(fp)
1000e7a0:	10800017 	ldw	r2,0(r2)
1000e7a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1000e7a8:	e0bffc17 	ldw	r2,-16(fp)
1000e7ac:	10c00a04 	addi	r3,r2,40
1000e7b0:	e0bffd17 	ldw	r2,-12(fp)
1000e7b4:	10800217 	ldw	r2,8(r2)
1000e7b8:	1809883a 	mov	r4,r3
1000e7bc:	e17ffe17 	ldw	r5,-8(fp)
1000e7c0:	e1bfff17 	ldw	r6,-4(fp)
1000e7c4:	100f883a 	mov	r7,r2
1000e7c8:	000ef540 	call	1000ef54 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1000e7cc:	e037883a 	mov	sp,fp
1000e7d0:	dfc00117 	ldw	ra,4(sp)
1000e7d4:	df000017 	ldw	fp,0(sp)
1000e7d8:	dec00204 	addi	sp,sp,8
1000e7dc:	f800283a 	ret

1000e7e0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1000e7e0:	defffc04 	addi	sp,sp,-16
1000e7e4:	dfc00315 	stw	ra,12(sp)
1000e7e8:	df000215 	stw	fp,8(sp)
1000e7ec:	df000204 	addi	fp,sp,8
1000e7f0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000e7f4:	e0bfff17 	ldw	r2,-4(fp)
1000e7f8:	10800017 	ldw	r2,0(r2)
1000e7fc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1000e800:	e0bffe17 	ldw	r2,-8(fp)
1000e804:	10c00a04 	addi	r3,r2,40
1000e808:	e0bfff17 	ldw	r2,-4(fp)
1000e80c:	10800217 	ldw	r2,8(r2)
1000e810:	1809883a 	mov	r4,r3
1000e814:	100b883a 	mov	r5,r2
1000e818:	000ebf40 	call	1000ebf4 <altera_avalon_jtag_uart_close>
}
1000e81c:	e037883a 	mov	sp,fp
1000e820:	dfc00117 	ldw	ra,4(sp)
1000e824:	df000017 	ldw	fp,0(sp)
1000e828:	dec00204 	addi	sp,sp,8
1000e82c:	f800283a 	ret

1000e830 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1000e830:	defffa04 	addi	sp,sp,-24
1000e834:	dfc00515 	stw	ra,20(sp)
1000e838:	df000415 	stw	fp,16(sp)
1000e83c:	df000404 	addi	fp,sp,16
1000e840:	e13ffd15 	stw	r4,-12(fp)
1000e844:	e17ffe15 	stw	r5,-8(fp)
1000e848:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1000e84c:	e0bffd17 	ldw	r2,-12(fp)
1000e850:	10800017 	ldw	r2,0(r2)
1000e854:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1000e858:	e0bffc17 	ldw	r2,-16(fp)
1000e85c:	10800a04 	addi	r2,r2,40
1000e860:	1009883a 	mov	r4,r2
1000e864:	e17ffe17 	ldw	r5,-8(fp)
1000e868:	e1bfff17 	ldw	r6,-4(fp)
1000e86c:	000ec5c0 	call	1000ec5c <altera_avalon_jtag_uart_ioctl>
}
1000e870:	e037883a 	mov	sp,fp
1000e874:	dfc00117 	ldw	ra,4(sp)
1000e878:	df000017 	ldw	fp,0(sp)
1000e87c:	dec00204 	addi	sp,sp,8
1000e880:	f800283a 	ret

1000e884 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1000e884:	defffa04 	addi	sp,sp,-24
1000e888:	dfc00515 	stw	ra,20(sp)
1000e88c:	df000415 	stw	fp,16(sp)
1000e890:	df000404 	addi	fp,sp,16
1000e894:	e13ffd15 	stw	r4,-12(fp)
1000e898:	e17ffe15 	stw	r5,-8(fp)
1000e89c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000e8a0:	e0bffd17 	ldw	r2,-12(fp)
1000e8a4:	00c00044 	movi	r3,1
1000e8a8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1000e8ac:	e0bffd17 	ldw	r2,-12(fp)
1000e8b0:	10800017 	ldw	r2,0(r2)
1000e8b4:	10800104 	addi	r2,r2,4
1000e8b8:	1007883a 	mov	r3,r2
1000e8bc:	e0bffd17 	ldw	r2,-12(fp)
1000e8c0:	10800817 	ldw	r2,32(r2)
1000e8c4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1000e8c8:	e0fffe17 	ldw	r3,-8(fp)
1000e8cc:	e0bfff17 	ldw	r2,-4(fp)
1000e8d0:	d8000015 	stw	zero,0(sp)
1000e8d4:	1809883a 	mov	r4,r3
1000e8d8:	100b883a 	mov	r5,r2
1000e8dc:	01840074 	movhi	r6,4097
1000e8e0:	31ba5204 	addi	r6,r6,-5816
1000e8e4:	e1fffd17 	ldw	r7,-12(fp)
1000e8e8:	000f4900 	call	1000f490 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1000e8ec:	e0bffd17 	ldw	r2,-12(fp)
1000e8f0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1000e8f4:	e0bffd17 	ldw	r2,-12(fp)
1000e8f8:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1000e8fc:	00840074 	movhi	r2,4097
1000e900:	1092fd04 	addi	r2,r2,19444
1000e904:	10800017 	ldw	r2,0(r2)
1000e908:	1809883a 	mov	r4,r3
1000e90c:	100b883a 	mov	r5,r2
1000e910:	01840074 	movhi	r6,4097
1000e914:	31bad304 	addi	r6,r6,-5300
1000e918:	e1fffd17 	ldw	r7,-12(fp)
1000e91c:	000f16c0 	call	1000f16c <alt_alarm_start>
1000e920:	1000040e 	bge	r2,zero,1000e934 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1000e924:	e0fffd17 	ldw	r3,-12(fp)
1000e928:	00a00034 	movhi	r2,32768
1000e92c:	10bfffc4 	addi	r2,r2,-1
1000e930:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1000e934:	e037883a 	mov	sp,fp
1000e938:	dfc00117 	ldw	ra,4(sp)
1000e93c:	df000017 	ldw	fp,0(sp)
1000e940:	dec00204 	addi	sp,sp,8
1000e944:	f800283a 	ret

1000e948 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1000e948:	defff804 	addi	sp,sp,-32
1000e94c:	df000715 	stw	fp,28(sp)
1000e950:	df000704 	addi	fp,sp,28
1000e954:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1000e958:	e0bfff17 	ldw	r2,-4(fp)
1000e95c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1000e960:	e0bffb17 	ldw	r2,-20(fp)
1000e964:	10800017 	ldw	r2,0(r2)
1000e968:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000e96c:	e0bffc17 	ldw	r2,-16(fp)
1000e970:	10800104 	addi	r2,r2,4
1000e974:	10800037 	ldwio	r2,0(r2)
1000e978:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1000e97c:	e0bffd17 	ldw	r2,-12(fp)
1000e980:	1080c00c 	andi	r2,r2,768
1000e984:	1000011e 	bne	r2,zero,1000e98c <altera_avalon_jtag_uart_irq+0x44>
      break;
1000e988:	00006c06 	br	1000eb3c <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1000e98c:	e0bffd17 	ldw	r2,-12(fp)
1000e990:	1080400c 	andi	r2,r2,256
1000e994:	10003426 	beq	r2,zero,1000ea68 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1000e998:	00800074 	movhi	r2,1
1000e99c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000e9a0:	e0bffb17 	ldw	r2,-20(fp)
1000e9a4:	10800a17 	ldw	r2,40(r2)
1000e9a8:	10800044 	addi	r2,r2,1
1000e9ac:	1081ffcc 	andi	r2,r2,2047
1000e9b0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1000e9b4:	e0bffb17 	ldw	r2,-20(fp)
1000e9b8:	10c00b17 	ldw	r3,44(r2)
1000e9bc:	e0bffe17 	ldw	r2,-8(fp)
1000e9c0:	1880011e 	bne	r3,r2,1000e9c8 <altera_avalon_jtag_uart_irq+0x80>
          break;
1000e9c4:	00001606 	br	1000ea20 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1000e9c8:	e0bffc17 	ldw	r2,-16(fp)
1000e9cc:	10800037 	ldwio	r2,0(r2)
1000e9d0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1000e9d4:	e0bff917 	ldw	r2,-28(fp)
1000e9d8:	10a0000c 	andi	r2,r2,32768
1000e9dc:	1000011e 	bne	r2,zero,1000e9e4 <altera_avalon_jtag_uart_irq+0x9c>
          break;
1000e9e0:	00000f06 	br	1000ea20 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1000e9e4:	e0bffb17 	ldw	r2,-20(fp)
1000e9e8:	10800a17 	ldw	r2,40(r2)
1000e9ec:	e0fff917 	ldw	r3,-28(fp)
1000e9f0:	1809883a 	mov	r4,r3
1000e9f4:	e0fffb17 	ldw	r3,-20(fp)
1000e9f8:	1885883a 	add	r2,r3,r2
1000e9fc:	10800e04 	addi	r2,r2,56
1000ea00:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000ea04:	e0bffb17 	ldw	r2,-20(fp)
1000ea08:	10800a17 	ldw	r2,40(r2)
1000ea0c:	10800044 	addi	r2,r2,1
1000ea10:	10c1ffcc 	andi	r3,r2,2047
1000ea14:	e0bffb17 	ldw	r2,-20(fp)
1000ea18:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1000ea1c:	003fe006 	br	1000e9a0 <__alt_data_end+0xf800e9a0>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1000ea20:	e0bff917 	ldw	r2,-28(fp)
1000ea24:	10bfffec 	andhi	r2,r2,65535
1000ea28:	10000f26 	beq	r2,zero,1000ea68 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000ea2c:	e0bffb17 	ldw	r2,-20(fp)
1000ea30:	10c00817 	ldw	r3,32(r2)
1000ea34:	00bfff84 	movi	r2,-2
1000ea38:	1886703a 	and	r3,r3,r2
1000ea3c:	e0bffb17 	ldw	r2,-20(fp)
1000ea40:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1000ea44:	e0bffc17 	ldw	r2,-16(fp)
1000ea48:	10800104 	addi	r2,r2,4
1000ea4c:	1007883a 	mov	r3,r2
1000ea50:	e0bffb17 	ldw	r2,-20(fp)
1000ea54:	10800817 	ldw	r2,32(r2)
1000ea58:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000ea5c:	e0bffc17 	ldw	r2,-16(fp)
1000ea60:	10800104 	addi	r2,r2,4
1000ea64:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1000ea68:	e0bffd17 	ldw	r2,-12(fp)
1000ea6c:	1080800c 	andi	r2,r2,512
1000ea70:	10003126 	beq	r2,zero,1000eb38 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1000ea74:	e0bffd17 	ldw	r2,-12(fp)
1000ea78:	1004d43a 	srli	r2,r2,16
1000ea7c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1000ea80:	00001406 	br	1000ead4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1000ea84:	e0bffc17 	ldw	r2,-16(fp)
1000ea88:	e0fffb17 	ldw	r3,-20(fp)
1000ea8c:	18c00d17 	ldw	r3,52(r3)
1000ea90:	e13ffb17 	ldw	r4,-20(fp)
1000ea94:	20c7883a 	add	r3,r4,r3
1000ea98:	18c20e04 	addi	r3,r3,2104
1000ea9c:	18c00003 	ldbu	r3,0(r3)
1000eaa0:	18c03fcc 	andi	r3,r3,255
1000eaa4:	18c0201c 	xori	r3,r3,128
1000eaa8:	18ffe004 	addi	r3,r3,-128
1000eaac:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000eab0:	e0bffb17 	ldw	r2,-20(fp)
1000eab4:	10800d17 	ldw	r2,52(r2)
1000eab8:	10800044 	addi	r2,r2,1
1000eabc:	10c1ffcc 	andi	r3,r2,2047
1000eac0:	e0bffb17 	ldw	r2,-20(fp)
1000eac4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1000eac8:	e0bffa17 	ldw	r2,-24(fp)
1000eacc:	10bfffc4 	addi	r2,r2,-1
1000ead0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1000ead4:	e0bffa17 	ldw	r2,-24(fp)
1000ead8:	10000526 	beq	r2,zero,1000eaf0 <altera_avalon_jtag_uart_irq+0x1a8>
1000eadc:	e0bffb17 	ldw	r2,-20(fp)
1000eae0:	10c00d17 	ldw	r3,52(r2)
1000eae4:	e0bffb17 	ldw	r2,-20(fp)
1000eae8:	10800c17 	ldw	r2,48(r2)
1000eaec:	18bfe51e 	bne	r3,r2,1000ea84 <__alt_data_end+0xf800ea84>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1000eaf0:	e0bffa17 	ldw	r2,-24(fp)
1000eaf4:	10001026 	beq	r2,zero,1000eb38 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000eaf8:	e0bffb17 	ldw	r2,-20(fp)
1000eafc:	10c00817 	ldw	r3,32(r2)
1000eb00:	00bfff44 	movi	r2,-3
1000eb04:	1886703a 	and	r3,r3,r2
1000eb08:	e0bffb17 	ldw	r2,-20(fp)
1000eb0c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000eb10:	e0bffb17 	ldw	r2,-20(fp)
1000eb14:	10800017 	ldw	r2,0(r2)
1000eb18:	10800104 	addi	r2,r2,4
1000eb1c:	1007883a 	mov	r3,r2
1000eb20:	e0bffb17 	ldw	r2,-20(fp)
1000eb24:	10800817 	ldw	r2,32(r2)
1000eb28:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000eb2c:	e0bffc17 	ldw	r2,-16(fp)
1000eb30:	10800104 	addi	r2,r2,4
1000eb34:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1000eb38:	003f8c06 	br	1000e96c <__alt_data_end+0xf800e96c>
}
1000eb3c:	e037883a 	mov	sp,fp
1000eb40:	df000017 	ldw	fp,0(sp)
1000eb44:	dec00104 	addi	sp,sp,4
1000eb48:	f800283a 	ret

1000eb4c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1000eb4c:	defff804 	addi	sp,sp,-32
1000eb50:	df000715 	stw	fp,28(sp)
1000eb54:	df000704 	addi	fp,sp,28
1000eb58:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1000eb5c:	e0bffb17 	ldw	r2,-20(fp)
1000eb60:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1000eb64:	e0bff917 	ldw	r2,-28(fp)
1000eb68:	10800017 	ldw	r2,0(r2)
1000eb6c:	10800104 	addi	r2,r2,4
1000eb70:	10800037 	ldwio	r2,0(r2)
1000eb74:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1000eb78:	e0bffa17 	ldw	r2,-24(fp)
1000eb7c:	1081000c 	andi	r2,r2,1024
1000eb80:	10000b26 	beq	r2,zero,1000ebb0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1000eb84:	e0bff917 	ldw	r2,-28(fp)
1000eb88:	10800017 	ldw	r2,0(r2)
1000eb8c:	10800104 	addi	r2,r2,4
1000eb90:	1007883a 	mov	r3,r2
1000eb94:	e0bff917 	ldw	r2,-28(fp)
1000eb98:	10800817 	ldw	r2,32(r2)
1000eb9c:	10810014 	ori	r2,r2,1024
1000eba0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
1000eba4:	e0bff917 	ldw	r2,-28(fp)
1000eba8:	10000915 	stw	zero,36(r2)
1000ebac:	00000a06 	br	1000ebd8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1000ebb0:	e0bff917 	ldw	r2,-28(fp)
1000ebb4:	10c00917 	ldw	r3,36(r2)
1000ebb8:	00a00034 	movhi	r2,32768
1000ebbc:	10bfff04 	addi	r2,r2,-4
1000ebc0:	10c00536 	bltu	r2,r3,1000ebd8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
1000ebc4:	e0bff917 	ldw	r2,-28(fp)
1000ebc8:	10800917 	ldw	r2,36(r2)
1000ebcc:	10c00044 	addi	r3,r2,1
1000ebd0:	e0bff917 	ldw	r2,-28(fp)
1000ebd4:	10c00915 	stw	r3,36(r2)
1000ebd8:	00840074 	movhi	r2,4097
1000ebdc:	1092fd04 	addi	r2,r2,19444
1000ebe0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1000ebe4:	e037883a 	mov	sp,fp
1000ebe8:	df000017 	ldw	fp,0(sp)
1000ebec:	dec00104 	addi	sp,sp,4
1000ebf0:	f800283a 	ret

1000ebf4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1000ebf4:	defffd04 	addi	sp,sp,-12
1000ebf8:	df000215 	stw	fp,8(sp)
1000ebfc:	df000204 	addi	fp,sp,8
1000ec00:	e13ffe15 	stw	r4,-8(fp)
1000ec04:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000ec08:	00000506 	br	1000ec20 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
1000ec0c:	e0bfff17 	ldw	r2,-4(fp)
1000ec10:	1090000c 	andi	r2,r2,16384
1000ec14:	10000226 	beq	r2,zero,1000ec20 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1000ec18:	00bffd44 	movi	r2,-11
1000ec1c:	00000b06 	br	1000ec4c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000ec20:	e0bffe17 	ldw	r2,-8(fp)
1000ec24:	10c00d17 	ldw	r3,52(r2)
1000ec28:	e0bffe17 	ldw	r2,-8(fp)
1000ec2c:	10800c17 	ldw	r2,48(r2)
1000ec30:	18800526 	beq	r3,r2,1000ec48 <altera_avalon_jtag_uart_close+0x54>
1000ec34:	e0bffe17 	ldw	r2,-8(fp)
1000ec38:	10c00917 	ldw	r3,36(r2)
1000ec3c:	e0bffe17 	ldw	r2,-8(fp)
1000ec40:	10800117 	ldw	r2,4(r2)
1000ec44:	18bff136 	bltu	r3,r2,1000ec0c <__alt_data_end+0xf800ec0c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1000ec48:	0005883a 	mov	r2,zero
}
1000ec4c:	e037883a 	mov	sp,fp
1000ec50:	df000017 	ldw	fp,0(sp)
1000ec54:	dec00104 	addi	sp,sp,4
1000ec58:	f800283a 	ret

1000ec5c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
1000ec5c:	defffa04 	addi	sp,sp,-24
1000ec60:	df000515 	stw	fp,20(sp)
1000ec64:	df000504 	addi	fp,sp,20
1000ec68:	e13ffd15 	stw	r4,-12(fp)
1000ec6c:	e17ffe15 	stw	r5,-8(fp)
1000ec70:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1000ec74:	00bff9c4 	movi	r2,-25
1000ec78:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
1000ec7c:	e0bffe17 	ldw	r2,-8(fp)
1000ec80:	10da8060 	cmpeqi	r3,r2,27137
1000ec84:	1800031e 	bne	r3,zero,1000ec94 <altera_avalon_jtag_uart_ioctl+0x38>
1000ec88:	109a80a0 	cmpeqi	r2,r2,27138
1000ec8c:	1000191e 	bne	r2,zero,1000ecf4 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
1000ec90:	00002806 	br	1000ed34 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1000ec94:	e0bffd17 	ldw	r2,-12(fp)
1000ec98:	10c00117 	ldw	r3,4(r2)
1000ec9c:	00a00034 	movhi	r2,32768
1000eca0:	10bfffc4 	addi	r2,r2,-1
1000eca4:	18801226 	beq	r3,r2,1000ecf0 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
1000eca8:	e0bfff17 	ldw	r2,-4(fp)
1000ecac:	10800017 	ldw	r2,0(r2)
1000ecb0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1000ecb4:	e0bffc17 	ldw	r2,-16(fp)
1000ecb8:	10800090 	cmplti	r2,r2,2
1000ecbc:	1000061e 	bne	r2,zero,1000ecd8 <altera_avalon_jtag_uart_ioctl+0x7c>
1000ecc0:	e0fffc17 	ldw	r3,-16(fp)
1000ecc4:	00a00034 	movhi	r2,32768
1000ecc8:	10bfffc4 	addi	r2,r2,-1
1000eccc:	18800226 	beq	r3,r2,1000ecd8 <altera_avalon_jtag_uart_ioctl+0x7c>
1000ecd0:	e0bffc17 	ldw	r2,-16(fp)
1000ecd4:	00000206 	br	1000ece0 <altera_avalon_jtag_uart_ioctl+0x84>
1000ecd8:	00a00034 	movhi	r2,32768
1000ecdc:	10bfff84 	addi	r2,r2,-2
1000ece0:	e0fffd17 	ldw	r3,-12(fp)
1000ece4:	18800115 	stw	r2,4(r3)
      rc = 0;
1000ece8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000ecec:	00001106 	br	1000ed34 <altera_avalon_jtag_uart_ioctl+0xd8>
1000ecf0:	00001006 	br	1000ed34 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1000ecf4:	e0bffd17 	ldw	r2,-12(fp)
1000ecf8:	10c00117 	ldw	r3,4(r2)
1000ecfc:	00a00034 	movhi	r2,32768
1000ed00:	10bfffc4 	addi	r2,r2,-1
1000ed04:	18800a26 	beq	r3,r2,1000ed30 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1000ed08:	e0bffd17 	ldw	r2,-12(fp)
1000ed0c:	10c00917 	ldw	r3,36(r2)
1000ed10:	e0bffd17 	ldw	r2,-12(fp)
1000ed14:	10800117 	ldw	r2,4(r2)
1000ed18:	1885803a 	cmpltu	r2,r3,r2
1000ed1c:	10c03fcc 	andi	r3,r2,255
1000ed20:	e0bfff17 	ldw	r2,-4(fp)
1000ed24:	10c00015 	stw	r3,0(r2)
      rc = 0;
1000ed28:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000ed2c:	00000006 	br	1000ed30 <altera_avalon_jtag_uart_ioctl+0xd4>
1000ed30:	0001883a 	nop

  default:
    break;
  }

  return rc;
1000ed34:	e0bffb17 	ldw	r2,-20(fp)
}
1000ed38:	e037883a 	mov	sp,fp
1000ed3c:	df000017 	ldw	fp,0(sp)
1000ed40:	dec00104 	addi	sp,sp,4
1000ed44:	f800283a 	ret

1000ed48 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1000ed48:	defff304 	addi	sp,sp,-52
1000ed4c:	dfc00c15 	stw	ra,48(sp)
1000ed50:	df000b15 	stw	fp,44(sp)
1000ed54:	df000b04 	addi	fp,sp,44
1000ed58:	e13ffc15 	stw	r4,-16(fp)
1000ed5c:	e17ffd15 	stw	r5,-12(fp)
1000ed60:	e1bffe15 	stw	r6,-8(fp)
1000ed64:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1000ed68:	e0bffd17 	ldw	r2,-12(fp)
1000ed6c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000ed70:	00004906 	br	1000ee98 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
1000ed74:	e0bffc17 	ldw	r2,-16(fp)
1000ed78:	10800a17 	ldw	r2,40(r2)
1000ed7c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1000ed80:	e0bffc17 	ldw	r2,-16(fp)
1000ed84:	10800b17 	ldw	r2,44(r2)
1000ed88:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1000ed8c:	e0fff717 	ldw	r3,-36(fp)
1000ed90:	e0bff817 	ldw	r2,-32(fp)
1000ed94:	18800536 	bltu	r3,r2,1000edac <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1000ed98:	e0fff717 	ldw	r3,-36(fp)
1000ed9c:	e0bff817 	ldw	r2,-32(fp)
1000eda0:	1885c83a 	sub	r2,r3,r2
1000eda4:	e0bff615 	stw	r2,-40(fp)
1000eda8:	00000406 	br	1000edbc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1000edac:	00c20004 	movi	r3,2048
1000edb0:	e0bff817 	ldw	r2,-32(fp)
1000edb4:	1885c83a 	sub	r2,r3,r2
1000edb8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000edbc:	e0bff617 	ldw	r2,-40(fp)
1000edc0:	1000011e 	bne	r2,zero,1000edc8 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
1000edc4:	00001d06 	br	1000ee3c <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
1000edc8:	e0fffe17 	ldw	r3,-8(fp)
1000edcc:	e0bff617 	ldw	r2,-40(fp)
1000edd0:	1880022e 	bgeu	r3,r2,1000eddc <altera_avalon_jtag_uart_read+0x94>
        n = space;
1000edd4:	e0bffe17 	ldw	r2,-8(fp)
1000edd8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1000eddc:	e0bff817 	ldw	r2,-32(fp)
1000ede0:	10800e04 	addi	r2,r2,56
1000ede4:	e0fffc17 	ldw	r3,-16(fp)
1000ede8:	1885883a 	add	r2,r3,r2
1000edec:	e13ff517 	ldw	r4,-44(fp)
1000edf0:	100b883a 	mov	r5,r2
1000edf4:	e1bff617 	ldw	r6,-40(fp)
1000edf8:	00013140 	call	10001314 <memcpy>
      ptr   += n;
1000edfc:	e0fff517 	ldw	r3,-44(fp)
1000ee00:	e0bff617 	ldw	r2,-40(fp)
1000ee04:	1885883a 	add	r2,r3,r2
1000ee08:	e0bff515 	stw	r2,-44(fp)
      space -= n;
1000ee0c:	e0fffe17 	ldw	r3,-8(fp)
1000ee10:	e0bff617 	ldw	r2,-40(fp)
1000ee14:	1885c83a 	sub	r2,r3,r2
1000ee18:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000ee1c:	e0fff817 	ldw	r3,-32(fp)
1000ee20:	e0bff617 	ldw	r2,-40(fp)
1000ee24:	1885883a 	add	r2,r3,r2
1000ee28:	10c1ffcc 	andi	r3,r2,2047
1000ee2c:	e0bffc17 	ldw	r2,-16(fp)
1000ee30:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1000ee34:	e0bffe17 	ldw	r2,-8(fp)
1000ee38:	00bfce16 	blt	zero,r2,1000ed74 <__alt_data_end+0xf800ed74>

    /* If we read any data then return it */
    if (ptr != buffer)
1000ee3c:	e0fff517 	ldw	r3,-44(fp)
1000ee40:	e0bffd17 	ldw	r2,-12(fp)
1000ee44:	18800126 	beq	r3,r2,1000ee4c <altera_avalon_jtag_uart_read+0x104>
      break;
1000ee48:	00001506 	br	1000eea0 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1000ee4c:	e0bfff17 	ldw	r2,-4(fp)
1000ee50:	1090000c 	andi	r2,r2,16384
1000ee54:	10000126 	beq	r2,zero,1000ee5c <altera_avalon_jtag_uart_read+0x114>
      break;
1000ee58:	00001106 	br	1000eea0 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
1000ee5c:	0001883a 	nop
1000ee60:	e0bffc17 	ldw	r2,-16(fp)
1000ee64:	10c00a17 	ldw	r3,40(r2)
1000ee68:	e0bff717 	ldw	r2,-36(fp)
1000ee6c:	1880051e 	bne	r3,r2,1000ee84 <altera_avalon_jtag_uart_read+0x13c>
1000ee70:	e0bffc17 	ldw	r2,-16(fp)
1000ee74:	10c00917 	ldw	r3,36(r2)
1000ee78:	e0bffc17 	ldw	r2,-16(fp)
1000ee7c:	10800117 	ldw	r2,4(r2)
1000ee80:	18bff736 	bltu	r3,r2,1000ee60 <__alt_data_end+0xf800ee60>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1000ee84:	e0bffc17 	ldw	r2,-16(fp)
1000ee88:	10c00a17 	ldw	r3,40(r2)
1000ee8c:	e0bff717 	ldw	r2,-36(fp)
1000ee90:	1880011e 	bne	r3,r2,1000ee98 <altera_avalon_jtag_uart_read+0x150>
      break;
1000ee94:	00000206 	br	1000eea0 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000ee98:	e0bffe17 	ldw	r2,-8(fp)
1000ee9c:	00bfb516 	blt	zero,r2,1000ed74 <__alt_data_end+0xf800ed74>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
1000eea0:	e0fff517 	ldw	r3,-44(fp)
1000eea4:	e0bffd17 	ldw	r2,-12(fp)
1000eea8:	18801826 	beq	r3,r2,1000ef0c <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000eeac:	0005303a 	rdctl	r2,status
1000eeb0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000eeb4:	e0fffa17 	ldw	r3,-24(fp)
1000eeb8:	00bfff84 	movi	r2,-2
1000eebc:	1884703a 	and	r2,r3,r2
1000eec0:	1001703a 	wrctl	status,r2
  
  return context;
1000eec4:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1000eec8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000eecc:	e0bffc17 	ldw	r2,-16(fp)
1000eed0:	10800817 	ldw	r2,32(r2)
1000eed4:	10c00054 	ori	r3,r2,1
1000eed8:	e0bffc17 	ldw	r2,-16(fp)
1000eedc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000eee0:	e0bffc17 	ldw	r2,-16(fp)
1000eee4:	10800017 	ldw	r2,0(r2)
1000eee8:	10800104 	addi	r2,r2,4
1000eeec:	1007883a 	mov	r3,r2
1000eef0:	e0bffc17 	ldw	r2,-16(fp)
1000eef4:	10800817 	ldw	r2,32(r2)
1000eef8:	18800035 	stwio	r2,0(r3)
1000eefc:	e0bff917 	ldw	r2,-28(fp)
1000ef00:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000ef04:	e0bffb17 	ldw	r2,-20(fp)
1000ef08:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1000ef0c:	e0fff517 	ldw	r3,-44(fp)
1000ef10:	e0bffd17 	ldw	r2,-12(fp)
1000ef14:	18800426 	beq	r3,r2,1000ef28 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
1000ef18:	e0fff517 	ldw	r3,-44(fp)
1000ef1c:	e0bffd17 	ldw	r2,-12(fp)
1000ef20:	1885c83a 	sub	r2,r3,r2
1000ef24:	00000606 	br	1000ef40 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
1000ef28:	e0bfff17 	ldw	r2,-4(fp)
1000ef2c:	1090000c 	andi	r2,r2,16384
1000ef30:	10000226 	beq	r2,zero,1000ef3c <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
1000ef34:	00bffd44 	movi	r2,-11
1000ef38:	00000106 	br	1000ef40 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
1000ef3c:	00bffec4 	movi	r2,-5
}
1000ef40:	e037883a 	mov	sp,fp
1000ef44:	dfc00117 	ldw	ra,4(sp)
1000ef48:	df000017 	ldw	fp,0(sp)
1000ef4c:	dec00204 	addi	sp,sp,8
1000ef50:	f800283a 	ret

1000ef54 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
1000ef54:	defff304 	addi	sp,sp,-52
1000ef58:	dfc00c15 	stw	ra,48(sp)
1000ef5c:	df000b15 	stw	fp,44(sp)
1000ef60:	df000b04 	addi	fp,sp,44
1000ef64:	e13ffc15 	stw	r4,-16(fp)
1000ef68:	e17ffd15 	stw	r5,-12(fp)
1000ef6c:	e1bffe15 	stw	r6,-8(fp)
1000ef70:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
1000ef74:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1000ef78:	e0bffd17 	ldw	r2,-12(fp)
1000ef7c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000ef80:	00003806 	br	1000f064 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
1000ef84:	e0bffc17 	ldw	r2,-16(fp)
1000ef88:	10800c17 	ldw	r2,48(r2)
1000ef8c:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
1000ef90:	e0bffc17 	ldw	r2,-16(fp)
1000ef94:	10800d17 	ldw	r2,52(r2)
1000ef98:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
1000ef9c:	e0fff817 	ldw	r3,-32(fp)
1000efa0:	e0bff517 	ldw	r2,-44(fp)
1000efa4:	1880062e 	bgeu	r3,r2,1000efc0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
1000efa8:	e0fff517 	ldw	r3,-44(fp)
1000efac:	e0bff817 	ldw	r2,-32(fp)
1000efb0:	1885c83a 	sub	r2,r3,r2
1000efb4:	10bfffc4 	addi	r2,r2,-1
1000efb8:	e0bff615 	stw	r2,-40(fp)
1000efbc:	00000b06 	br	1000efec <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
1000efc0:	e0bff517 	ldw	r2,-44(fp)
1000efc4:	10000526 	beq	r2,zero,1000efdc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1000efc8:	00c20004 	movi	r3,2048
1000efcc:	e0bff817 	ldw	r2,-32(fp)
1000efd0:	1885c83a 	sub	r2,r3,r2
1000efd4:	e0bff615 	stw	r2,-40(fp)
1000efd8:	00000406 	br	1000efec <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1000efdc:	00c1ffc4 	movi	r3,2047
1000efe0:	e0bff817 	ldw	r2,-32(fp)
1000efe4:	1885c83a 	sub	r2,r3,r2
1000efe8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000efec:	e0bff617 	ldw	r2,-40(fp)
1000eff0:	1000011e 	bne	r2,zero,1000eff8 <altera_avalon_jtag_uart_write+0xa4>
        break;
1000eff4:	00001d06 	br	1000f06c <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
1000eff8:	e0fffe17 	ldw	r3,-8(fp)
1000effc:	e0bff617 	ldw	r2,-40(fp)
1000f000:	1880022e 	bgeu	r3,r2,1000f00c <altera_avalon_jtag_uart_write+0xb8>
        n = count;
1000f004:	e0bffe17 	ldw	r2,-8(fp)
1000f008:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
1000f00c:	e0bff817 	ldw	r2,-32(fp)
1000f010:	10820e04 	addi	r2,r2,2104
1000f014:	e0fffc17 	ldw	r3,-16(fp)
1000f018:	1885883a 	add	r2,r3,r2
1000f01c:	1009883a 	mov	r4,r2
1000f020:	e17ffd17 	ldw	r5,-12(fp)
1000f024:	e1bff617 	ldw	r6,-40(fp)
1000f028:	00013140 	call	10001314 <memcpy>
      ptr   += n;
1000f02c:	e0fffd17 	ldw	r3,-12(fp)
1000f030:	e0bff617 	ldw	r2,-40(fp)
1000f034:	1885883a 	add	r2,r3,r2
1000f038:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1000f03c:	e0fffe17 	ldw	r3,-8(fp)
1000f040:	e0bff617 	ldw	r2,-40(fp)
1000f044:	1885c83a 	sub	r2,r3,r2
1000f048:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000f04c:	e0fff817 	ldw	r3,-32(fp)
1000f050:	e0bff617 	ldw	r2,-40(fp)
1000f054:	1885883a 	add	r2,r3,r2
1000f058:	10c1ffcc 	andi	r3,r2,2047
1000f05c:	e0bffc17 	ldw	r2,-16(fp)
1000f060:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000f064:	e0bffe17 	ldw	r2,-8(fp)
1000f068:	00bfc616 	blt	zero,r2,1000ef84 <__alt_data_end+0xf800ef84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f06c:	0005303a 	rdctl	r2,status
1000f070:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f074:	e0fffa17 	ldw	r3,-24(fp)
1000f078:	00bfff84 	movi	r2,-2
1000f07c:	1884703a 	and	r2,r3,r2
1000f080:	1001703a 	wrctl	status,r2
  
  return context;
1000f084:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1000f088:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000f08c:	e0bffc17 	ldw	r2,-16(fp)
1000f090:	10800817 	ldw	r2,32(r2)
1000f094:	10c00094 	ori	r3,r2,2
1000f098:	e0bffc17 	ldw	r2,-16(fp)
1000f09c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000f0a0:	e0bffc17 	ldw	r2,-16(fp)
1000f0a4:	10800017 	ldw	r2,0(r2)
1000f0a8:	10800104 	addi	r2,r2,4
1000f0ac:	1007883a 	mov	r3,r2
1000f0b0:	e0bffc17 	ldw	r2,-16(fp)
1000f0b4:	10800817 	ldw	r2,32(r2)
1000f0b8:	18800035 	stwio	r2,0(r3)
1000f0bc:	e0bff917 	ldw	r2,-28(fp)
1000f0c0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f0c4:	e0bffb17 	ldw	r2,-20(fp)
1000f0c8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
1000f0cc:	e0bffe17 	ldw	r2,-8(fp)
1000f0d0:	0080120e 	bge	zero,r2,1000f11c <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
1000f0d4:	e0bfff17 	ldw	r2,-4(fp)
1000f0d8:	1090000c 	andi	r2,r2,16384
1000f0dc:	10000126 	beq	r2,zero,1000f0e4 <altera_avalon_jtag_uart_write+0x190>
        break;
1000f0e0:	00001006 	br	1000f124 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
1000f0e4:	0001883a 	nop
1000f0e8:	e0bffc17 	ldw	r2,-16(fp)
1000f0ec:	10c00d17 	ldw	r3,52(r2)
1000f0f0:	e0bff517 	ldw	r2,-44(fp)
1000f0f4:	1880051e 	bne	r3,r2,1000f10c <altera_avalon_jtag_uart_write+0x1b8>
1000f0f8:	e0bffc17 	ldw	r2,-16(fp)
1000f0fc:	10c00917 	ldw	r3,36(r2)
1000f100:	e0bffc17 	ldw	r2,-16(fp)
1000f104:	10800117 	ldw	r2,4(r2)
1000f108:	18bff736 	bltu	r3,r2,1000f0e8 <__alt_data_end+0xf800f0e8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
1000f10c:	e0bffc17 	ldw	r2,-16(fp)
1000f110:	10800917 	ldw	r2,36(r2)
1000f114:	10000126 	beq	r2,zero,1000f11c <altera_avalon_jtag_uart_write+0x1c8>
         break;
1000f118:	00000206 	br	1000f124 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
1000f11c:	e0bffe17 	ldw	r2,-8(fp)
1000f120:	00bf9716 	blt	zero,r2,1000ef80 <__alt_data_end+0xf800ef80>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1000f124:	e0fffd17 	ldw	r3,-12(fp)
1000f128:	e0bff717 	ldw	r2,-36(fp)
1000f12c:	18800426 	beq	r3,r2,1000f140 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
1000f130:	e0fffd17 	ldw	r3,-12(fp)
1000f134:	e0bff717 	ldw	r2,-36(fp)
1000f138:	1885c83a 	sub	r2,r3,r2
1000f13c:	00000606 	br	1000f158 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
1000f140:	e0bfff17 	ldw	r2,-4(fp)
1000f144:	1090000c 	andi	r2,r2,16384
1000f148:	10000226 	beq	r2,zero,1000f154 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
1000f14c:	00bffd44 	movi	r2,-11
1000f150:	00000106 	br	1000f158 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
1000f154:	00bffec4 	movi	r2,-5
}
1000f158:	e037883a 	mov	sp,fp
1000f15c:	dfc00117 	ldw	ra,4(sp)
1000f160:	df000017 	ldw	fp,0(sp)
1000f164:	dec00204 	addi	sp,sp,8
1000f168:	f800283a 	ret

1000f16c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1000f16c:	defff504 	addi	sp,sp,-44
1000f170:	df000a15 	stw	fp,40(sp)
1000f174:	df000a04 	addi	fp,sp,40
1000f178:	e13ffc15 	stw	r4,-16(fp)
1000f17c:	e17ffd15 	stw	r5,-12(fp)
1000f180:	e1bffe15 	stw	r6,-8(fp)
1000f184:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
1000f188:	e03ff615 	stw	zero,-40(fp)
1000f18c:	00840074 	movhi	r2,4097
1000f190:	1092fd04 	addi	r2,r2,19444
1000f194:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
1000f198:	10003f26 	beq	r2,zero,1000f298 <alt_alarm_start+0x12c>
  {
    if (alarm)
1000f19c:	e0bffc17 	ldw	r2,-16(fp)
1000f1a0:	10003b26 	beq	r2,zero,1000f290 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
1000f1a4:	e0bffc17 	ldw	r2,-16(fp)
1000f1a8:	e0fffe17 	ldw	r3,-8(fp)
1000f1ac:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1000f1b0:	e0bffc17 	ldw	r2,-16(fp)
1000f1b4:	e0ffff17 	ldw	r3,-4(fp)
1000f1b8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f1bc:	0005303a 	rdctl	r2,status
1000f1c0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f1c4:	e0fff817 	ldw	r3,-32(fp)
1000f1c8:	00bfff84 	movi	r2,-2
1000f1cc:	1884703a 	and	r2,r3,r2
1000f1d0:	1001703a 	wrctl	status,r2
  
  return context;
1000f1d4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
1000f1d8:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
1000f1dc:	00840074 	movhi	r2,4097
1000f1e0:	1092fe04 	addi	r2,r2,19448
1000f1e4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
1000f1e8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1000f1ec:	e0fffd17 	ldw	r3,-12(fp)
1000f1f0:	e0bff617 	ldw	r2,-40(fp)
1000f1f4:	1885883a 	add	r2,r3,r2
1000f1f8:	10c00044 	addi	r3,r2,1
1000f1fc:	e0bffc17 	ldw	r2,-16(fp)
1000f200:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
1000f204:	e0bffc17 	ldw	r2,-16(fp)
1000f208:	10c00217 	ldw	r3,8(r2)
1000f20c:	e0bff617 	ldw	r2,-40(fp)
1000f210:	1880042e 	bgeu	r3,r2,1000f224 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
1000f214:	e0bffc17 	ldw	r2,-16(fp)
1000f218:	00c00044 	movi	r3,1
1000f21c:	10c00405 	stb	r3,16(r2)
1000f220:	00000206 	br	1000f22c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
1000f224:	e0bffc17 	ldw	r2,-16(fp)
1000f228:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1000f22c:	e0fffc17 	ldw	r3,-16(fp)
1000f230:	00840074 	movhi	r2,4097
1000f234:	108aa604 	addi	r2,r2,10904
1000f238:	e0bff915 	stw	r2,-28(fp)
1000f23c:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000f240:	e0bffa17 	ldw	r2,-24(fp)
1000f244:	e0fff917 	ldw	r3,-28(fp)
1000f248:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000f24c:	e0bff917 	ldw	r2,-28(fp)
1000f250:	10c00017 	ldw	r3,0(r2)
1000f254:	e0bffa17 	ldw	r2,-24(fp)
1000f258:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000f25c:	e0bff917 	ldw	r2,-28(fp)
1000f260:	10800017 	ldw	r2,0(r2)
1000f264:	e0fffa17 	ldw	r3,-24(fp)
1000f268:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000f26c:	e0bff917 	ldw	r2,-28(fp)
1000f270:	e0fffa17 	ldw	r3,-24(fp)
1000f274:	10c00015 	stw	r3,0(r2)
1000f278:	e0bff717 	ldw	r2,-36(fp)
1000f27c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f280:	e0bffb17 	ldw	r2,-20(fp)
1000f284:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
1000f288:	0005883a 	mov	r2,zero
1000f28c:	00000306 	br	1000f29c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
1000f290:	00bffa84 	movi	r2,-22
1000f294:	00000106 	br	1000f29c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
1000f298:	00bfde84 	movi	r2,-134
  }
}
1000f29c:	e037883a 	mov	sp,fp
1000f2a0:	df000017 	ldw	fp,0(sp)
1000f2a4:	dec00104 	addi	sp,sp,4
1000f2a8:	f800283a 	ret

1000f2ac <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
1000f2ac:	deffff04 	addi	sp,sp,-4
1000f2b0:	df000015 	stw	fp,0(sp)
1000f2b4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
1000f2b8:	e037883a 	mov	sp,fp
1000f2bc:	df000017 	ldw	fp,0(sp)
1000f2c0:	dec00104 	addi	sp,sp,4
1000f2c4:	f800283a 	ret

1000f2c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f2c8:	defffe04 	addi	sp,sp,-8
1000f2cc:	dfc00115 	stw	ra,4(sp)
1000f2d0:	df000015 	stw	fp,0(sp)
1000f2d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f2d8:	00840074 	movhi	r2,4097
1000f2dc:	108aa304 	addi	r2,r2,10892
1000f2e0:	10800017 	ldw	r2,0(r2)
1000f2e4:	10000526 	beq	r2,zero,1000f2fc <alt_get_errno+0x34>
1000f2e8:	00840074 	movhi	r2,4097
1000f2ec:	108aa304 	addi	r2,r2,10892
1000f2f0:	10800017 	ldw	r2,0(r2)
1000f2f4:	103ee83a 	callr	r2
1000f2f8:	00000206 	br	1000f304 <alt_get_errno+0x3c>
1000f2fc:	00840074 	movhi	r2,4097
1000f300:	1092f804 	addi	r2,r2,19424
}
1000f304:	e037883a 	mov	sp,fp
1000f308:	dfc00117 	ldw	ra,4(sp)
1000f30c:	df000017 	ldw	fp,0(sp)
1000f310:	dec00204 	addi	sp,sp,8
1000f314:	f800283a 	ret

1000f318 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
1000f318:	defffa04 	addi	sp,sp,-24
1000f31c:	dfc00515 	stw	ra,20(sp)
1000f320:	df000415 	stw	fp,16(sp)
1000f324:	df000404 	addi	fp,sp,16
1000f328:	e13ffe15 	stw	r4,-8(fp)
1000f32c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
1000f330:	e0bffe17 	ldw	r2,-8(fp)
1000f334:	10000326 	beq	r2,zero,1000f344 <alt_dev_llist_insert+0x2c>
1000f338:	e0bffe17 	ldw	r2,-8(fp)
1000f33c:	10800217 	ldw	r2,8(r2)
1000f340:	1000061e 	bne	r2,zero,1000f35c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
1000f344:	000f2c80 	call	1000f2c8 <alt_get_errno>
1000f348:	1007883a 	mov	r3,r2
1000f34c:	00800584 	movi	r2,22
1000f350:	18800015 	stw	r2,0(r3)
    return -EINVAL;
1000f354:	00bffa84 	movi	r2,-22
1000f358:	00001306 	br	1000f3a8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
1000f35c:	e0bffe17 	ldw	r2,-8(fp)
1000f360:	e0ffff17 	ldw	r3,-4(fp)
1000f364:	e0fffc15 	stw	r3,-16(fp)
1000f368:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000f36c:	e0bffd17 	ldw	r2,-12(fp)
1000f370:	e0fffc17 	ldw	r3,-16(fp)
1000f374:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000f378:	e0bffc17 	ldw	r2,-16(fp)
1000f37c:	10c00017 	ldw	r3,0(r2)
1000f380:	e0bffd17 	ldw	r2,-12(fp)
1000f384:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000f388:	e0bffc17 	ldw	r2,-16(fp)
1000f38c:	10800017 	ldw	r2,0(r2)
1000f390:	e0fffd17 	ldw	r3,-12(fp)
1000f394:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000f398:	e0bffc17 	ldw	r2,-16(fp)
1000f39c:	e0fffd17 	ldw	r3,-12(fp)
1000f3a0:	10c00015 	stw	r3,0(r2)

  return 0;  
1000f3a4:	0005883a 	mov	r2,zero
}
1000f3a8:	e037883a 	mov	sp,fp
1000f3ac:	dfc00117 	ldw	ra,4(sp)
1000f3b0:	df000017 	ldw	fp,0(sp)
1000f3b4:	dec00204 	addi	sp,sp,8
1000f3b8:	f800283a 	ret

1000f3bc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
1000f3bc:	defffd04 	addi	sp,sp,-12
1000f3c0:	dfc00215 	stw	ra,8(sp)
1000f3c4:	df000115 	stw	fp,4(sp)
1000f3c8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1000f3cc:	00840074 	movhi	r2,4097
1000f3d0:	1080f304 	addi	r2,r2,972
1000f3d4:	e0bfff15 	stw	r2,-4(fp)
1000f3d8:	00000606 	br	1000f3f4 <_do_ctors+0x38>
        (*ctor) (); 
1000f3dc:	e0bfff17 	ldw	r2,-4(fp)
1000f3e0:	10800017 	ldw	r2,0(r2)
1000f3e4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1000f3e8:	e0bfff17 	ldw	r2,-4(fp)
1000f3ec:	10bfff04 	addi	r2,r2,-4
1000f3f0:	e0bfff15 	stw	r2,-4(fp)
1000f3f4:	e0ffff17 	ldw	r3,-4(fp)
1000f3f8:	00840074 	movhi	r2,4097
1000f3fc:	1080f404 	addi	r2,r2,976
1000f400:	18bff62e 	bgeu	r3,r2,1000f3dc <__alt_data_end+0xf800f3dc>
        (*ctor) (); 
}
1000f404:	e037883a 	mov	sp,fp
1000f408:	dfc00117 	ldw	ra,4(sp)
1000f40c:	df000017 	ldw	fp,0(sp)
1000f410:	dec00204 	addi	sp,sp,8
1000f414:	f800283a 	ret

1000f418 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
1000f418:	defffd04 	addi	sp,sp,-12
1000f41c:	dfc00215 	stw	ra,8(sp)
1000f420:	df000115 	stw	fp,4(sp)
1000f424:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1000f428:	00840074 	movhi	r2,4097
1000f42c:	1080f304 	addi	r2,r2,972
1000f430:	e0bfff15 	stw	r2,-4(fp)
1000f434:	00000606 	br	1000f450 <_do_dtors+0x38>
        (*dtor) (); 
1000f438:	e0bfff17 	ldw	r2,-4(fp)
1000f43c:	10800017 	ldw	r2,0(r2)
1000f440:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1000f444:	e0bfff17 	ldw	r2,-4(fp)
1000f448:	10bfff04 	addi	r2,r2,-4
1000f44c:	e0bfff15 	stw	r2,-4(fp)
1000f450:	e0ffff17 	ldw	r3,-4(fp)
1000f454:	00840074 	movhi	r2,4097
1000f458:	1080f404 	addi	r2,r2,976
1000f45c:	18bff62e 	bgeu	r3,r2,1000f438 <__alt_data_end+0xf800f438>
        (*dtor) (); 
}
1000f460:	e037883a 	mov	sp,fp
1000f464:	dfc00117 	ldw	ra,4(sp)
1000f468:	df000017 	ldw	fp,0(sp)
1000f46c:	dec00204 	addi	sp,sp,8
1000f470:	f800283a 	ret

1000f474 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
1000f474:	deffff04 	addi	sp,sp,-4
1000f478:	df000015 	stw	fp,0(sp)
1000f47c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
1000f480:	e037883a 	mov	sp,fp
1000f484:	df000017 	ldw	fp,0(sp)
1000f488:	dec00104 	addi	sp,sp,4
1000f48c:	f800283a 	ret

1000f490 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1000f490:	defff904 	addi	sp,sp,-28
1000f494:	dfc00615 	stw	ra,24(sp)
1000f498:	df000515 	stw	fp,20(sp)
1000f49c:	df000504 	addi	fp,sp,20
1000f4a0:	e13ffc15 	stw	r4,-16(fp)
1000f4a4:	e17ffd15 	stw	r5,-12(fp)
1000f4a8:	e1bffe15 	stw	r6,-8(fp)
1000f4ac:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
1000f4b0:	e0800217 	ldw	r2,8(fp)
1000f4b4:	d8800015 	stw	r2,0(sp)
1000f4b8:	e13ffc17 	ldw	r4,-16(fp)
1000f4bc:	e17ffd17 	ldw	r5,-12(fp)
1000f4c0:	e1bffe17 	ldw	r6,-8(fp)
1000f4c4:	e1ffff17 	ldw	r7,-4(fp)
1000f4c8:	000f6700 	call	1000f670 <alt_iic_isr_register>
}  
1000f4cc:	e037883a 	mov	sp,fp
1000f4d0:	dfc00117 	ldw	ra,4(sp)
1000f4d4:	df000017 	ldw	fp,0(sp)
1000f4d8:	dec00204 	addi	sp,sp,8
1000f4dc:	f800283a 	ret

1000f4e0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
1000f4e0:	defff904 	addi	sp,sp,-28
1000f4e4:	df000615 	stw	fp,24(sp)
1000f4e8:	df000604 	addi	fp,sp,24
1000f4ec:	e13ffe15 	stw	r4,-8(fp)
1000f4f0:	e17fff15 	stw	r5,-4(fp)
1000f4f4:	e0bfff17 	ldw	r2,-4(fp)
1000f4f8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f4fc:	0005303a 	rdctl	r2,status
1000f500:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f504:	e0fffb17 	ldw	r3,-20(fp)
1000f508:	00bfff84 	movi	r2,-2
1000f50c:	1884703a 	and	r2,r3,r2
1000f510:	1001703a 	wrctl	status,r2
  
  return context;
1000f514:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000f518:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
1000f51c:	e0bffa17 	ldw	r2,-24(fp)
1000f520:	00c00044 	movi	r3,1
1000f524:	1884983a 	sll	r2,r3,r2
1000f528:	1007883a 	mov	r3,r2
1000f52c:	00840074 	movhi	r2,4097
1000f530:	1092fc04 	addi	r2,r2,19440
1000f534:	10800017 	ldw	r2,0(r2)
1000f538:	1886b03a 	or	r3,r3,r2
1000f53c:	00840074 	movhi	r2,4097
1000f540:	1092fc04 	addi	r2,r2,19440
1000f544:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1000f548:	00840074 	movhi	r2,4097
1000f54c:	1092fc04 	addi	r2,r2,19440
1000f550:	10800017 	ldw	r2,0(r2)
1000f554:	100170fa 	wrctl	ienable,r2
1000f558:	e0bffc17 	ldw	r2,-16(fp)
1000f55c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f560:	e0bffd17 	ldw	r2,-12(fp)
1000f564:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1000f568:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
1000f56c:	0001883a 	nop
}
1000f570:	e037883a 	mov	sp,fp
1000f574:	df000017 	ldw	fp,0(sp)
1000f578:	dec00104 	addi	sp,sp,4
1000f57c:	f800283a 	ret

1000f580 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
1000f580:	defff904 	addi	sp,sp,-28
1000f584:	df000615 	stw	fp,24(sp)
1000f588:	df000604 	addi	fp,sp,24
1000f58c:	e13ffe15 	stw	r4,-8(fp)
1000f590:	e17fff15 	stw	r5,-4(fp)
1000f594:	e0bfff17 	ldw	r2,-4(fp)
1000f598:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f59c:	0005303a 	rdctl	r2,status
1000f5a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f5a4:	e0fffb17 	ldw	r3,-20(fp)
1000f5a8:	00bfff84 	movi	r2,-2
1000f5ac:	1884703a 	and	r2,r3,r2
1000f5b0:	1001703a 	wrctl	status,r2
  
  return context;
1000f5b4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000f5b8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
1000f5bc:	e0bffa17 	ldw	r2,-24(fp)
1000f5c0:	00c00044 	movi	r3,1
1000f5c4:	1884983a 	sll	r2,r3,r2
1000f5c8:	0084303a 	nor	r2,zero,r2
1000f5cc:	1007883a 	mov	r3,r2
1000f5d0:	00840074 	movhi	r2,4097
1000f5d4:	1092fc04 	addi	r2,r2,19440
1000f5d8:	10800017 	ldw	r2,0(r2)
1000f5dc:	1886703a 	and	r3,r3,r2
1000f5e0:	00840074 	movhi	r2,4097
1000f5e4:	1092fc04 	addi	r2,r2,19440
1000f5e8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1000f5ec:	00840074 	movhi	r2,4097
1000f5f0:	1092fc04 	addi	r2,r2,19440
1000f5f4:	10800017 	ldw	r2,0(r2)
1000f5f8:	100170fa 	wrctl	ienable,r2
1000f5fc:	e0bffc17 	ldw	r2,-16(fp)
1000f600:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f604:	e0bffd17 	ldw	r2,-12(fp)
1000f608:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1000f60c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
1000f610:	0001883a 	nop
}
1000f614:	e037883a 	mov	sp,fp
1000f618:	df000017 	ldw	fp,0(sp)
1000f61c:	dec00104 	addi	sp,sp,4
1000f620:	f800283a 	ret

1000f624 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
1000f624:	defffc04 	addi	sp,sp,-16
1000f628:	df000315 	stw	fp,12(sp)
1000f62c:	df000304 	addi	fp,sp,12
1000f630:	e13ffe15 	stw	r4,-8(fp)
1000f634:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
1000f638:	000530fa 	rdctl	r2,ienable
1000f63c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
1000f640:	e0bfff17 	ldw	r2,-4(fp)
1000f644:	00c00044 	movi	r3,1
1000f648:	1884983a 	sll	r2,r3,r2
1000f64c:	1007883a 	mov	r3,r2
1000f650:	e0bffd17 	ldw	r2,-12(fp)
1000f654:	1884703a 	and	r2,r3,r2
1000f658:	1004c03a 	cmpne	r2,r2,zero
1000f65c:	10803fcc 	andi	r2,r2,255
}
1000f660:	e037883a 	mov	sp,fp
1000f664:	df000017 	ldw	fp,0(sp)
1000f668:	dec00104 	addi	sp,sp,4
1000f66c:	f800283a 	ret

1000f670 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1000f670:	defff504 	addi	sp,sp,-44
1000f674:	dfc00a15 	stw	ra,40(sp)
1000f678:	df000915 	stw	fp,36(sp)
1000f67c:	df000904 	addi	fp,sp,36
1000f680:	e13ffc15 	stw	r4,-16(fp)
1000f684:	e17ffd15 	stw	r5,-12(fp)
1000f688:	e1bffe15 	stw	r6,-8(fp)
1000f68c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
1000f690:	00bffa84 	movi	r2,-22
1000f694:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
1000f698:	e0bffd17 	ldw	r2,-12(fp)
1000f69c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
1000f6a0:	e0bff817 	ldw	r2,-32(fp)
1000f6a4:	10800808 	cmpgei	r2,r2,32
1000f6a8:	1000271e 	bne	r2,zero,1000f748 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f6ac:	0005303a 	rdctl	r2,status
1000f6b0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f6b4:	e0fffa17 	ldw	r3,-24(fp)
1000f6b8:	00bfff84 	movi	r2,-2
1000f6bc:	1884703a 	and	r2,r3,r2
1000f6c0:	1001703a 	wrctl	status,r2
  
  return context;
1000f6c4:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
1000f6c8:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
1000f6cc:	00840074 	movhi	r2,4097
1000f6d0:	10930a04 	addi	r2,r2,19496
1000f6d4:	e0fff817 	ldw	r3,-32(fp)
1000f6d8:	180690fa 	slli	r3,r3,3
1000f6dc:	10c5883a 	add	r2,r2,r3
1000f6e0:	e0fffe17 	ldw	r3,-8(fp)
1000f6e4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
1000f6e8:	00840074 	movhi	r2,4097
1000f6ec:	10930a04 	addi	r2,r2,19496
1000f6f0:	e0fff817 	ldw	r3,-32(fp)
1000f6f4:	180690fa 	slli	r3,r3,3
1000f6f8:	10c5883a 	add	r2,r2,r3
1000f6fc:	10800104 	addi	r2,r2,4
1000f700:	e0ffff17 	ldw	r3,-4(fp)
1000f704:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
1000f708:	e0bffe17 	ldw	r2,-8(fp)
1000f70c:	10000526 	beq	r2,zero,1000f724 <alt_iic_isr_register+0xb4>
1000f710:	e0bff817 	ldw	r2,-32(fp)
1000f714:	e13ffc17 	ldw	r4,-16(fp)
1000f718:	100b883a 	mov	r5,r2
1000f71c:	000f4e00 	call	1000f4e0 <alt_ic_irq_enable>
1000f720:	00000406 	br	1000f734 <alt_iic_isr_register+0xc4>
1000f724:	e0bff817 	ldw	r2,-32(fp)
1000f728:	e13ffc17 	ldw	r4,-16(fp)
1000f72c:	100b883a 	mov	r5,r2
1000f730:	000f5800 	call	1000f580 <alt_ic_irq_disable>
1000f734:	e0bff715 	stw	r2,-36(fp)
1000f738:	e0bff917 	ldw	r2,-28(fp)
1000f73c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f740:	e0bffb17 	ldw	r2,-20(fp)
1000f744:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
1000f748:	e0bff717 	ldw	r2,-36(fp)
}
1000f74c:	e037883a 	mov	sp,fp
1000f750:	dfc00117 	ldw	ra,4(sp)
1000f754:	df000017 	ldw	fp,0(sp)
1000f758:	dec00204 	addi	sp,sp,8
1000f75c:	f800283a 	ret

1000f760 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
1000f760:	defff804 	addi	sp,sp,-32
1000f764:	dfc00715 	stw	ra,28(sp)
1000f768:	df000615 	stw	fp,24(sp)
1000f76c:	dc000515 	stw	r16,20(sp)
1000f770:	df000604 	addi	fp,sp,24
1000f774:	e13ffb15 	stw	r4,-20(fp)
1000f778:	e17ffc15 	stw	r5,-16(fp)
1000f77c:	e1bffd15 	stw	r6,-12(fp)
1000f780:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
1000f784:	e13ffc17 	ldw	r4,-16(fp)
1000f788:	e17ffd17 	ldw	r5,-12(fp)
1000f78c:	e1bffe17 	ldw	r6,-8(fp)
1000f790:	000f9fc0 	call	1000f9fc <open>
1000f794:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
1000f798:	e0bffa17 	ldw	r2,-24(fp)
1000f79c:	10002216 	blt	r2,zero,1000f828 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
1000f7a0:	04040074 	movhi	r16,4097
1000f7a4:	84062004 	addi	r16,r16,6272
1000f7a8:	e0bffa17 	ldw	r2,-24(fp)
1000f7ac:	1009883a 	mov	r4,r2
1000f7b0:	01400304 	movi	r5,12
1000f7b4:	000b4540 	call	1000b454 <__mulsi3>
1000f7b8:	8085883a 	add	r2,r16,r2
1000f7bc:	10c00017 	ldw	r3,0(r2)
1000f7c0:	e0bffb17 	ldw	r2,-20(fp)
1000f7c4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
1000f7c8:	04040074 	movhi	r16,4097
1000f7cc:	84062004 	addi	r16,r16,6272
1000f7d0:	e0bffa17 	ldw	r2,-24(fp)
1000f7d4:	1009883a 	mov	r4,r2
1000f7d8:	01400304 	movi	r5,12
1000f7dc:	000b4540 	call	1000b454 <__mulsi3>
1000f7e0:	8085883a 	add	r2,r16,r2
1000f7e4:	10800104 	addi	r2,r2,4
1000f7e8:	10c00017 	ldw	r3,0(r2)
1000f7ec:	e0bffb17 	ldw	r2,-20(fp)
1000f7f0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
1000f7f4:	04040074 	movhi	r16,4097
1000f7f8:	84062004 	addi	r16,r16,6272
1000f7fc:	e0bffa17 	ldw	r2,-24(fp)
1000f800:	1009883a 	mov	r4,r2
1000f804:	01400304 	movi	r5,12
1000f808:	000b4540 	call	1000b454 <__mulsi3>
1000f80c:	8085883a 	add	r2,r16,r2
1000f810:	10800204 	addi	r2,r2,8
1000f814:	10c00017 	ldw	r3,0(r2)
1000f818:	e0bffb17 	ldw	r2,-20(fp)
1000f81c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
1000f820:	e13ffa17 	ldw	r4,-24(fp)
1000f824:	000e3ec0 	call	1000e3ec <alt_release_fd>
  }
} 
1000f828:	e6ffff04 	addi	sp,fp,-4
1000f82c:	dfc00217 	ldw	ra,8(sp)
1000f830:	df000117 	ldw	fp,4(sp)
1000f834:	dc000017 	ldw	r16,0(sp)
1000f838:	dec00304 	addi	sp,sp,12
1000f83c:	f800283a 	ret

1000f840 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
1000f840:	defffb04 	addi	sp,sp,-20
1000f844:	dfc00415 	stw	ra,16(sp)
1000f848:	df000315 	stw	fp,12(sp)
1000f84c:	df000304 	addi	fp,sp,12
1000f850:	e13ffd15 	stw	r4,-12(fp)
1000f854:	e17ffe15 	stw	r5,-8(fp)
1000f858:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
1000f85c:	01040074 	movhi	r4,4097
1000f860:	21062304 	addi	r4,r4,6284
1000f864:	e17ffd17 	ldw	r5,-12(fp)
1000f868:	01800044 	movi	r6,1
1000f86c:	01c07fc4 	movi	r7,511
1000f870:	000f7600 	call	1000f760 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
1000f874:	01040074 	movhi	r4,4097
1000f878:	21062004 	addi	r4,r4,6272
1000f87c:	e17ffe17 	ldw	r5,-8(fp)
1000f880:	000d883a 	mov	r6,zero
1000f884:	01c07fc4 	movi	r7,511
1000f888:	000f7600 	call	1000f760 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
1000f88c:	01040074 	movhi	r4,4097
1000f890:	21062604 	addi	r4,r4,6296
1000f894:	e17fff17 	ldw	r5,-4(fp)
1000f898:	01800044 	movi	r6,1
1000f89c:	01c07fc4 	movi	r7,511
1000f8a0:	000f7600 	call	1000f760 <alt_open_fd>
}  
1000f8a4:	e037883a 	mov	sp,fp
1000f8a8:	dfc00117 	ldw	ra,4(sp)
1000f8ac:	df000017 	ldw	fp,0(sp)
1000f8b0:	dec00204 	addi	sp,sp,8
1000f8b4:	f800283a 	ret

1000f8b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f8b8:	defffe04 	addi	sp,sp,-8
1000f8bc:	dfc00115 	stw	ra,4(sp)
1000f8c0:	df000015 	stw	fp,0(sp)
1000f8c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f8c8:	00840074 	movhi	r2,4097
1000f8cc:	108aa304 	addi	r2,r2,10892
1000f8d0:	10800017 	ldw	r2,0(r2)
1000f8d4:	10000526 	beq	r2,zero,1000f8ec <alt_get_errno+0x34>
1000f8d8:	00840074 	movhi	r2,4097
1000f8dc:	108aa304 	addi	r2,r2,10892
1000f8e0:	10800017 	ldw	r2,0(r2)
1000f8e4:	103ee83a 	callr	r2
1000f8e8:	00000206 	br	1000f8f4 <alt_get_errno+0x3c>
1000f8ec:	00840074 	movhi	r2,4097
1000f8f0:	1092f804 	addi	r2,r2,19424
}
1000f8f4:	e037883a 	mov	sp,fp
1000f8f8:	dfc00117 	ldw	ra,4(sp)
1000f8fc:	df000017 	ldw	fp,0(sp)
1000f900:	dec00204 	addi	sp,sp,8
1000f904:	f800283a 	ret

1000f908 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
1000f908:	defffb04 	addi	sp,sp,-20
1000f90c:	dfc00415 	stw	ra,16(sp)
1000f910:	df000315 	stw	fp,12(sp)
1000f914:	dc000215 	stw	r16,8(sp)
1000f918:	df000304 	addi	fp,sp,12
1000f91c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
1000f920:	e0bffe17 	ldw	r2,-8(fp)
1000f924:	10800217 	ldw	r2,8(r2)
1000f928:	10d00034 	orhi	r3,r2,16384
1000f92c:	e0bffe17 	ldw	r2,-8(fp)
1000f930:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1000f934:	e03ffd15 	stw	zero,-12(fp)
1000f938:	00002306 	br	1000f9c8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1000f93c:	04040074 	movhi	r16,4097
1000f940:	84062004 	addi	r16,r16,6272
1000f944:	e0bffd17 	ldw	r2,-12(fp)
1000f948:	1009883a 	mov	r4,r2
1000f94c:	01400304 	movi	r5,12
1000f950:	000b4540 	call	1000b454 <__mulsi3>
1000f954:	8085883a 	add	r2,r16,r2
1000f958:	10c00017 	ldw	r3,0(r2)
1000f95c:	e0bffe17 	ldw	r2,-8(fp)
1000f960:	10800017 	ldw	r2,0(r2)
1000f964:	1880151e 	bne	r3,r2,1000f9bc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1000f968:	04040074 	movhi	r16,4097
1000f96c:	84062004 	addi	r16,r16,6272
1000f970:	e0bffd17 	ldw	r2,-12(fp)
1000f974:	1009883a 	mov	r4,r2
1000f978:	01400304 	movi	r5,12
1000f97c:	000b4540 	call	1000b454 <__mulsi3>
1000f980:	8085883a 	add	r2,r16,r2
1000f984:	10800204 	addi	r2,r2,8
1000f988:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1000f98c:	10000b0e 	bge	r2,zero,1000f9bc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
1000f990:	e13ffd17 	ldw	r4,-12(fp)
1000f994:	01400304 	movi	r5,12
1000f998:	000b4540 	call	1000b454 <__mulsi3>
1000f99c:	1007883a 	mov	r3,r2
1000f9a0:	00840074 	movhi	r2,4097
1000f9a4:	10862004 	addi	r2,r2,6272
1000f9a8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1000f9ac:	e0bffe17 	ldw	r2,-8(fp)
1000f9b0:	18800226 	beq	r3,r2,1000f9bc <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
1000f9b4:	00bffcc4 	movi	r2,-13
1000f9b8:	00000a06 	br	1000f9e4 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1000f9bc:	e0bffd17 	ldw	r2,-12(fp)
1000f9c0:	10800044 	addi	r2,r2,1
1000f9c4:	e0bffd15 	stw	r2,-12(fp)
1000f9c8:	00840074 	movhi	r2,4097
1000f9cc:	108aa204 	addi	r2,r2,10888
1000f9d0:	10800017 	ldw	r2,0(r2)
1000f9d4:	1007883a 	mov	r3,r2
1000f9d8:	e0bffd17 	ldw	r2,-12(fp)
1000f9dc:	18bfd72e 	bgeu	r3,r2,1000f93c <__alt_data_end+0xf800f93c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
1000f9e0:	0005883a 	mov	r2,zero
}
1000f9e4:	e6ffff04 	addi	sp,fp,-4
1000f9e8:	dfc00217 	ldw	ra,8(sp)
1000f9ec:	df000117 	ldw	fp,4(sp)
1000f9f0:	dc000017 	ldw	r16,0(sp)
1000f9f4:	dec00304 	addi	sp,sp,12
1000f9f8:	f800283a 	ret

1000f9fc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
1000f9fc:	defff604 	addi	sp,sp,-40
1000fa00:	dfc00915 	stw	ra,36(sp)
1000fa04:	df000815 	stw	fp,32(sp)
1000fa08:	df000804 	addi	fp,sp,32
1000fa0c:	e13ffd15 	stw	r4,-12(fp)
1000fa10:	e17ffe15 	stw	r5,-8(fp)
1000fa14:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1000fa18:	00bfffc4 	movi	r2,-1
1000fa1c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
1000fa20:	00bffb44 	movi	r2,-19
1000fa24:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1000fa28:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
1000fa2c:	e13ffd17 	ldw	r4,-12(fp)
1000fa30:	01440074 	movhi	r5,4097
1000fa34:	294aa004 	addi	r5,r5,10880
1000fa38:	000fd180 	call	1000fd18 <alt_find_dev>
1000fa3c:	e0bff815 	stw	r2,-32(fp)
1000fa40:	e0bff817 	ldw	r2,-32(fp)
1000fa44:	1000051e 	bne	r2,zero,1000fa5c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
1000fa48:	e13ffd17 	ldw	r4,-12(fp)
1000fa4c:	000fda80 	call	1000fda8 <alt_find_file>
1000fa50:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
1000fa54:	00800044 	movi	r2,1
1000fa58:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
1000fa5c:	e0bff817 	ldw	r2,-32(fp)
1000fa60:	10002b26 	beq	r2,zero,1000fb10 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
1000fa64:	e13ff817 	ldw	r4,-32(fp)
1000fa68:	000febc0 	call	1000febc <alt_get_fd>
1000fa6c:	e0bff915 	stw	r2,-28(fp)
1000fa70:	e0bff917 	ldw	r2,-28(fp)
1000fa74:	1000030e 	bge	r2,zero,1000fa84 <open+0x88>
    {
      status = index;
1000fa78:	e0bff917 	ldw	r2,-28(fp)
1000fa7c:	e0bffa15 	stw	r2,-24(fp)
1000fa80:	00002506 	br	1000fb18 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
1000fa84:	e13ff917 	ldw	r4,-28(fp)
1000fa88:	01400304 	movi	r5,12
1000fa8c:	000b4540 	call	1000b454 <__mulsi3>
1000fa90:	1007883a 	mov	r3,r2
1000fa94:	00840074 	movhi	r2,4097
1000fa98:	10862004 	addi	r2,r2,6272
1000fa9c:	1885883a 	add	r2,r3,r2
1000faa0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
1000faa4:	e0fffe17 	ldw	r3,-8(fp)
1000faa8:	00900034 	movhi	r2,16384
1000faac:	10bfffc4 	addi	r2,r2,-1
1000fab0:	1886703a 	and	r3,r3,r2
1000fab4:	e0bffc17 	ldw	r2,-16(fp)
1000fab8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
1000fabc:	e0bffb17 	ldw	r2,-20(fp)
1000fac0:	1000051e 	bne	r2,zero,1000fad8 <open+0xdc>
1000fac4:	e13ffc17 	ldw	r4,-16(fp)
1000fac8:	000f9080 	call	1000f908 <alt_file_locked>
1000facc:	e0bffa15 	stw	r2,-24(fp)
1000fad0:	e0bffa17 	ldw	r2,-24(fp)
1000fad4:	10001016 	blt	r2,zero,1000fb18 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
1000fad8:	e0bff817 	ldw	r2,-32(fp)
1000fadc:	10800317 	ldw	r2,12(r2)
1000fae0:	10000826 	beq	r2,zero,1000fb04 <open+0x108>
1000fae4:	e0bff817 	ldw	r2,-32(fp)
1000fae8:	10800317 	ldw	r2,12(r2)
1000faec:	e13ffc17 	ldw	r4,-16(fp)
1000faf0:	e17ffd17 	ldw	r5,-12(fp)
1000faf4:	e1bffe17 	ldw	r6,-8(fp)
1000faf8:	e1ffff17 	ldw	r7,-4(fp)
1000fafc:	103ee83a 	callr	r2
1000fb00:	00000106 	br	1000fb08 <open+0x10c>
1000fb04:	0005883a 	mov	r2,zero
1000fb08:	e0bffa15 	stw	r2,-24(fp)
1000fb0c:	00000206 	br	1000fb18 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
1000fb10:	00bffb44 	movi	r2,-19
1000fb14:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
1000fb18:	e0bffa17 	ldw	r2,-24(fp)
1000fb1c:	1000090e 	bge	r2,zero,1000fb44 <open+0x148>
  {
    alt_release_fd (index);  
1000fb20:	e13ff917 	ldw	r4,-28(fp)
1000fb24:	000e3ec0 	call	1000e3ec <alt_release_fd>
    ALT_ERRNO = -status;
1000fb28:	000f8b80 	call	1000f8b8 <alt_get_errno>
1000fb2c:	1007883a 	mov	r3,r2
1000fb30:	e0bffa17 	ldw	r2,-24(fp)
1000fb34:	0085c83a 	sub	r2,zero,r2
1000fb38:	18800015 	stw	r2,0(r3)
    return -1;
1000fb3c:	00bfffc4 	movi	r2,-1
1000fb40:	00000106 	br	1000fb48 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
1000fb44:	e0bff917 	ldw	r2,-28(fp)
}
1000fb48:	e037883a 	mov	sp,fp
1000fb4c:	dfc00117 	ldw	ra,4(sp)
1000fb50:	df000017 	ldw	fp,0(sp)
1000fb54:	dec00204 	addi	sp,sp,8
1000fb58:	f800283a 	ret

1000fb5c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
1000fb5c:	defffa04 	addi	sp,sp,-24
1000fb60:	df000515 	stw	fp,20(sp)
1000fb64:	df000504 	addi	fp,sp,20
1000fb68:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000fb6c:	0005303a 	rdctl	r2,status
1000fb70:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000fb74:	e0fffc17 	ldw	r3,-16(fp)
1000fb78:	00bfff84 	movi	r2,-2
1000fb7c:	1884703a 	and	r2,r3,r2
1000fb80:	1001703a 	wrctl	status,r2
  
  return context;
1000fb84:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
1000fb88:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
1000fb8c:	e0bfff17 	ldw	r2,-4(fp)
1000fb90:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
1000fb94:	e0bffd17 	ldw	r2,-12(fp)
1000fb98:	10800017 	ldw	r2,0(r2)
1000fb9c:	e0fffd17 	ldw	r3,-12(fp)
1000fba0:	18c00117 	ldw	r3,4(r3)
1000fba4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
1000fba8:	e0bffd17 	ldw	r2,-12(fp)
1000fbac:	10800117 	ldw	r2,4(r2)
1000fbb0:	e0fffd17 	ldw	r3,-12(fp)
1000fbb4:	18c00017 	ldw	r3,0(r3)
1000fbb8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
1000fbbc:	e0bffd17 	ldw	r2,-12(fp)
1000fbc0:	e0fffd17 	ldw	r3,-12(fp)
1000fbc4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
1000fbc8:	e0bffd17 	ldw	r2,-12(fp)
1000fbcc:	e0fffd17 	ldw	r3,-12(fp)
1000fbd0:	10c00015 	stw	r3,0(r2)
1000fbd4:	e0bffb17 	ldw	r2,-20(fp)
1000fbd8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000fbdc:	e0bffe17 	ldw	r2,-8(fp)
1000fbe0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
1000fbe4:	e037883a 	mov	sp,fp
1000fbe8:	df000017 	ldw	fp,0(sp)
1000fbec:	dec00104 	addi	sp,sp,4
1000fbf0:	f800283a 	ret

1000fbf4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
1000fbf4:	defffb04 	addi	sp,sp,-20
1000fbf8:	dfc00415 	stw	ra,16(sp)
1000fbfc:	df000315 	stw	fp,12(sp)
1000fc00:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
1000fc04:	d0a00e17 	ldw	r2,-32712(gp)
1000fc08:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
1000fc0c:	d0a86617 	ldw	r2,-24168(gp)
1000fc10:	10800044 	addi	r2,r2,1
1000fc14:	d0a86615 	stw	r2,-24168(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1000fc18:	00002e06 	br	1000fcd4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
1000fc1c:	e0bffd17 	ldw	r2,-12(fp)
1000fc20:	10800017 	ldw	r2,0(r2)
1000fc24:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
1000fc28:	e0bffd17 	ldw	r2,-12(fp)
1000fc2c:	10800403 	ldbu	r2,16(r2)
1000fc30:	10803fcc 	andi	r2,r2,255
1000fc34:	10000426 	beq	r2,zero,1000fc48 <alt_tick+0x54>
1000fc38:	d0a86617 	ldw	r2,-24168(gp)
1000fc3c:	1000021e 	bne	r2,zero,1000fc48 <alt_tick+0x54>
    {
      alarm->rollover = 0;
1000fc40:	e0bffd17 	ldw	r2,-12(fp)
1000fc44:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
1000fc48:	e0bffd17 	ldw	r2,-12(fp)
1000fc4c:	10800217 	ldw	r2,8(r2)
1000fc50:	d0e86617 	ldw	r3,-24168(gp)
1000fc54:	18801d36 	bltu	r3,r2,1000fccc <alt_tick+0xd8>
1000fc58:	e0bffd17 	ldw	r2,-12(fp)
1000fc5c:	10800403 	ldbu	r2,16(r2)
1000fc60:	10803fcc 	andi	r2,r2,255
1000fc64:	1000191e 	bne	r2,zero,1000fccc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
1000fc68:	e0bffd17 	ldw	r2,-12(fp)
1000fc6c:	10800317 	ldw	r2,12(r2)
1000fc70:	e0fffd17 	ldw	r3,-12(fp)
1000fc74:	18c00517 	ldw	r3,20(r3)
1000fc78:	1809883a 	mov	r4,r3
1000fc7c:	103ee83a 	callr	r2
1000fc80:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
1000fc84:	e0bfff17 	ldw	r2,-4(fp)
1000fc88:	1000031e 	bne	r2,zero,1000fc98 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
1000fc8c:	e13ffd17 	ldw	r4,-12(fp)
1000fc90:	000fb5c0 	call	1000fb5c <alt_alarm_stop>
1000fc94:	00000d06 	br	1000fccc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
1000fc98:	e0bffd17 	ldw	r2,-12(fp)
1000fc9c:	10c00217 	ldw	r3,8(r2)
1000fca0:	e0bfff17 	ldw	r2,-4(fp)
1000fca4:	1887883a 	add	r3,r3,r2
1000fca8:	e0bffd17 	ldw	r2,-12(fp)
1000fcac:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
1000fcb0:	e0bffd17 	ldw	r2,-12(fp)
1000fcb4:	10c00217 	ldw	r3,8(r2)
1000fcb8:	d0a86617 	ldw	r2,-24168(gp)
1000fcbc:	1880032e 	bgeu	r3,r2,1000fccc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
1000fcc0:	e0bffd17 	ldw	r2,-12(fp)
1000fcc4:	00c00044 	movi	r3,1
1000fcc8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
1000fccc:	e0bffe17 	ldw	r2,-8(fp)
1000fcd0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1000fcd4:	e0fffd17 	ldw	r3,-12(fp)
1000fcd8:	d0a00e04 	addi	r2,gp,-32712
1000fcdc:	18bfcf1e 	bne	r3,r2,1000fc1c <__alt_data_end+0xf800fc1c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
1000fce0:	0001883a 	nop
}
1000fce4:	e037883a 	mov	sp,fp
1000fce8:	dfc00117 	ldw	ra,4(sp)
1000fcec:	df000017 	ldw	fp,0(sp)
1000fcf0:	dec00204 	addi	sp,sp,8
1000fcf4:	f800283a 	ret

1000fcf8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
1000fcf8:	deffff04 	addi	sp,sp,-4
1000fcfc:	df000015 	stw	fp,0(sp)
1000fd00:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
1000fd04:	000170fa 	wrctl	ienable,zero
}
1000fd08:	e037883a 	mov	sp,fp
1000fd0c:	df000017 	ldw	fp,0(sp)
1000fd10:	dec00104 	addi	sp,sp,4
1000fd14:	f800283a 	ret

1000fd18 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
1000fd18:	defffa04 	addi	sp,sp,-24
1000fd1c:	dfc00515 	stw	ra,20(sp)
1000fd20:	df000415 	stw	fp,16(sp)
1000fd24:	df000404 	addi	fp,sp,16
1000fd28:	e13ffe15 	stw	r4,-8(fp)
1000fd2c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
1000fd30:	e0bfff17 	ldw	r2,-4(fp)
1000fd34:	10800017 	ldw	r2,0(r2)
1000fd38:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
1000fd3c:	e13ffe17 	ldw	r4,-8(fp)
1000fd40:	00015800 	call	10001580 <strlen>
1000fd44:	10800044 	addi	r2,r2,1
1000fd48:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1000fd4c:	00000d06 	br	1000fd84 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
1000fd50:	e0bffc17 	ldw	r2,-16(fp)
1000fd54:	10c00217 	ldw	r3,8(r2)
1000fd58:	e0bffd17 	ldw	r2,-12(fp)
1000fd5c:	1809883a 	mov	r4,r3
1000fd60:	e17ffe17 	ldw	r5,-8(fp)
1000fd64:	100d883a 	mov	r6,r2
1000fd68:	00100780 	call	10010078 <memcmp>
1000fd6c:	1000021e 	bne	r2,zero,1000fd78 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
1000fd70:	e0bffc17 	ldw	r2,-16(fp)
1000fd74:	00000706 	br	1000fd94 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
1000fd78:	e0bffc17 	ldw	r2,-16(fp)
1000fd7c:	10800017 	ldw	r2,0(r2)
1000fd80:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1000fd84:	e0fffc17 	ldw	r3,-16(fp)
1000fd88:	e0bfff17 	ldw	r2,-4(fp)
1000fd8c:	18bff01e 	bne	r3,r2,1000fd50 <__alt_data_end+0xf800fd50>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
1000fd90:	0005883a 	mov	r2,zero
}
1000fd94:	e037883a 	mov	sp,fp
1000fd98:	dfc00117 	ldw	ra,4(sp)
1000fd9c:	df000017 	ldw	fp,0(sp)
1000fda0:	dec00204 	addi	sp,sp,8
1000fda4:	f800283a 	ret

1000fda8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
1000fda8:	defffb04 	addi	sp,sp,-20
1000fdac:	dfc00415 	stw	ra,16(sp)
1000fdb0:	df000315 	stw	fp,12(sp)
1000fdb4:	df000304 	addi	fp,sp,12
1000fdb8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
1000fdbc:	00840074 	movhi	r2,4097
1000fdc0:	108a9e04 	addi	r2,r2,10872
1000fdc4:	10800017 	ldw	r2,0(r2)
1000fdc8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1000fdcc:	00003106 	br	1000fe94 <alt_find_file+0xec>
  {
    len = strlen(next->name);
1000fdd0:	e0bffd17 	ldw	r2,-12(fp)
1000fdd4:	10800217 	ldw	r2,8(r2)
1000fdd8:	1009883a 	mov	r4,r2
1000fddc:	00015800 	call	10001580 <strlen>
1000fde0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
1000fde4:	e0bffd17 	ldw	r2,-12(fp)
1000fde8:	10c00217 	ldw	r3,8(r2)
1000fdec:	e0bffe17 	ldw	r2,-8(fp)
1000fdf0:	10bfffc4 	addi	r2,r2,-1
1000fdf4:	1885883a 	add	r2,r3,r2
1000fdf8:	10800003 	ldbu	r2,0(r2)
1000fdfc:	10803fcc 	andi	r2,r2,255
1000fe00:	1080201c 	xori	r2,r2,128
1000fe04:	10bfe004 	addi	r2,r2,-128
1000fe08:	10800bd8 	cmpnei	r2,r2,47
1000fe0c:	1000031e 	bne	r2,zero,1000fe1c <alt_find_file+0x74>
    {
      len -= 1;
1000fe10:	e0bffe17 	ldw	r2,-8(fp)
1000fe14:	10bfffc4 	addi	r2,r2,-1
1000fe18:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1000fe1c:	e0bffe17 	ldw	r2,-8(fp)
1000fe20:	e0ffff17 	ldw	r3,-4(fp)
1000fe24:	1885883a 	add	r2,r3,r2
1000fe28:	10800003 	ldbu	r2,0(r2)
1000fe2c:	10803fcc 	andi	r2,r2,255
1000fe30:	1080201c 	xori	r2,r2,128
1000fe34:	10bfe004 	addi	r2,r2,-128
1000fe38:	10800be0 	cmpeqi	r2,r2,47
1000fe3c:	1000081e 	bne	r2,zero,1000fe60 <alt_find_file+0xb8>
1000fe40:	e0bffe17 	ldw	r2,-8(fp)
1000fe44:	e0ffff17 	ldw	r3,-4(fp)
1000fe48:	1885883a 	add	r2,r3,r2
1000fe4c:	10800003 	ldbu	r2,0(r2)
1000fe50:	10803fcc 	andi	r2,r2,255
1000fe54:	1080201c 	xori	r2,r2,128
1000fe58:	10bfe004 	addi	r2,r2,-128
1000fe5c:	10000a1e 	bne	r2,zero,1000fe88 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
1000fe60:	e0bffd17 	ldw	r2,-12(fp)
1000fe64:	10c00217 	ldw	r3,8(r2)
1000fe68:	e0bffe17 	ldw	r2,-8(fp)
1000fe6c:	1809883a 	mov	r4,r3
1000fe70:	e17fff17 	ldw	r5,-4(fp)
1000fe74:	100d883a 	mov	r6,r2
1000fe78:	00100780 	call	10010078 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1000fe7c:	1000021e 	bne	r2,zero,1000fe88 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
1000fe80:	e0bffd17 	ldw	r2,-12(fp)
1000fe84:	00000806 	br	1000fea8 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
1000fe88:	e0bffd17 	ldw	r2,-12(fp)
1000fe8c:	10800017 	ldw	r2,0(r2)
1000fe90:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1000fe94:	e0fffd17 	ldw	r3,-12(fp)
1000fe98:	00840074 	movhi	r2,4097
1000fe9c:	108a9e04 	addi	r2,r2,10872
1000fea0:	18bfcb1e 	bne	r3,r2,1000fdd0 <__alt_data_end+0xf800fdd0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
1000fea4:	0005883a 	mov	r2,zero
}
1000fea8:	e037883a 	mov	sp,fp
1000feac:	dfc00117 	ldw	ra,4(sp)
1000feb0:	df000017 	ldw	fp,0(sp)
1000feb4:	dec00204 	addi	sp,sp,8
1000feb8:	f800283a 	ret

1000febc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
1000febc:	defffa04 	addi	sp,sp,-24
1000fec0:	dfc00515 	stw	ra,20(sp)
1000fec4:	df000415 	stw	fp,16(sp)
1000fec8:	dc000315 	stw	r16,12(sp)
1000fecc:	df000404 	addi	fp,sp,16
1000fed0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
1000fed4:	00bffa04 	movi	r2,-24
1000fed8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1000fedc:	e03ffc15 	stw	zero,-16(fp)
1000fee0:	00002106 	br	1000ff68 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
1000fee4:	04040074 	movhi	r16,4097
1000fee8:	84062004 	addi	r16,r16,6272
1000feec:	e0bffc17 	ldw	r2,-16(fp)
1000fef0:	1009883a 	mov	r4,r2
1000fef4:	01400304 	movi	r5,12
1000fef8:	000b4540 	call	1000b454 <__mulsi3>
1000fefc:	8085883a 	add	r2,r16,r2
1000ff00:	10800017 	ldw	r2,0(r2)
1000ff04:	1000151e 	bne	r2,zero,1000ff5c <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
1000ff08:	04040074 	movhi	r16,4097
1000ff0c:	84062004 	addi	r16,r16,6272
1000ff10:	e0bffc17 	ldw	r2,-16(fp)
1000ff14:	1009883a 	mov	r4,r2
1000ff18:	01400304 	movi	r5,12
1000ff1c:	000b4540 	call	1000b454 <__mulsi3>
1000ff20:	8085883a 	add	r2,r16,r2
1000ff24:	e0fffe17 	ldw	r3,-8(fp)
1000ff28:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
1000ff2c:	00840074 	movhi	r2,4097
1000ff30:	108aa204 	addi	r2,r2,10888
1000ff34:	10c00017 	ldw	r3,0(r2)
1000ff38:	e0bffc17 	ldw	r2,-16(fp)
1000ff3c:	1880040e 	bge	r3,r2,1000ff50 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
1000ff40:	00840074 	movhi	r2,4097
1000ff44:	108aa204 	addi	r2,r2,10888
1000ff48:	e0fffc17 	ldw	r3,-16(fp)
1000ff4c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
1000ff50:	e0bffc17 	ldw	r2,-16(fp)
1000ff54:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
1000ff58:	00000606 	br	1000ff74 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1000ff5c:	e0bffc17 	ldw	r2,-16(fp)
1000ff60:	10800044 	addi	r2,r2,1
1000ff64:	e0bffc15 	stw	r2,-16(fp)
1000ff68:	e0bffc17 	ldw	r2,-16(fp)
1000ff6c:	10800810 	cmplti	r2,r2,32
1000ff70:	103fdc1e 	bne	r2,zero,1000fee4 <__alt_data_end+0xf800fee4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
1000ff74:	e0bffd17 	ldw	r2,-12(fp)
}
1000ff78:	e6ffff04 	addi	sp,fp,-4
1000ff7c:	dfc00217 	ldw	ra,8(sp)
1000ff80:	df000117 	ldw	fp,4(sp)
1000ff84:	dc000017 	ldw	r16,0(sp)
1000ff88:	dec00304 	addi	sp,sp,12
1000ff8c:	f800283a 	ret

1000ff90 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
1000ff90:	defffe04 	addi	sp,sp,-8
1000ff94:	df000115 	stw	fp,4(sp)
1000ff98:	df000104 	addi	fp,sp,4
1000ff9c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
1000ffa0:	e0bfff17 	ldw	r2,-4(fp)
1000ffa4:	10bffe84 	addi	r2,r2,-6
1000ffa8:	10c00428 	cmpgeui	r3,r2,16
1000ffac:	18001a1e 	bne	r3,zero,10010018 <alt_exception_cause_generated_bad_addr+0x88>
1000ffb0:	100690ba 	slli	r3,r2,2
1000ffb4:	00840074 	movhi	r2,4097
1000ffb8:	10bff204 	addi	r2,r2,-56
1000ffbc:	1885883a 	add	r2,r3,r2
1000ffc0:	10800017 	ldw	r2,0(r2)
1000ffc4:	1000683a 	jmp	r2
1000ffc8:	10010008 	cmpgei	zero,r2,1024
1000ffcc:	10010008 	cmpgei	zero,r2,1024
1000ffd0:	10010018 	cmpnei	zero,r2,1024
1000ffd4:	10010018 	cmpnei	zero,r2,1024
1000ffd8:	10010018 	cmpnei	zero,r2,1024
1000ffdc:	10010008 	cmpgei	zero,r2,1024
1000ffe0:	10010010 	cmplti	zero,r2,1024
1000ffe4:	10010018 	cmpnei	zero,r2,1024
1000ffe8:	10010008 	cmpgei	zero,r2,1024
1000ffec:	10010008 	cmpgei	zero,r2,1024
1000fff0:	10010018 	cmpnei	zero,r2,1024
1000fff4:	10010008 	cmpgei	zero,r2,1024
1000fff8:	10010010 	cmplti	zero,r2,1024
1000fffc:	10010018 	cmpnei	zero,r2,1024
10010000:	10010018 	cmpnei	zero,r2,1024
10010004:	10010008 	cmpgei	zero,r2,1024
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10010008:	00800044 	movi	r2,1
1001000c:	00000306 	br	1001001c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10010010:	0005883a 	mov	r2,zero
10010014:	00000106 	br	1001001c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10010018:	0005883a 	mov	r2,zero
  }
}
1001001c:	e037883a 	mov	sp,fp
10010020:	df000017 	ldw	fp,0(sp)
10010024:	dec00104 	addi	sp,sp,4
10010028:	f800283a 	ret

1001002c <atexit>:
1001002c:	200b883a 	mov	r5,r4
10010030:	000d883a 	mov	r6,zero
10010034:	0009883a 	mov	r4,zero
10010038:	000f883a 	mov	r7,zero
1001003c:	00100f41 	jmpi	100100f4 <__register_exitproc>

10010040 <exit>:
10010040:	defffe04 	addi	sp,sp,-8
10010044:	000b883a 	mov	r5,zero
10010048:	dc000015 	stw	r16,0(sp)
1001004c:	dfc00115 	stw	ra,4(sp)
10010050:	2021883a 	mov	r16,r4
10010054:	00102080 	call	10010208 <__call_exitprocs>
10010058:	00840074 	movhi	r2,4097
1001005c:	108a9804 	addi	r2,r2,10848
10010060:	11000017 	ldw	r4,0(r2)
10010064:	20800f17 	ldw	r2,60(r4)
10010068:	10000126 	beq	r2,zero,10010070 <exit+0x30>
1001006c:	103ee83a 	callr	r2
10010070:	8009883a 	mov	r4,r16
10010074:	001039c0 	call	1001039c <_exit>

10010078 <memcmp>:
10010078:	01c000c4 	movi	r7,3
1001007c:	3980192e 	bgeu	r7,r6,100100e4 <memcmp+0x6c>
10010080:	2144b03a 	or	r2,r4,r5
10010084:	11c4703a 	and	r2,r2,r7
10010088:	10000f26 	beq	r2,zero,100100c8 <memcmp+0x50>
1001008c:	20800003 	ldbu	r2,0(r4)
10010090:	28c00003 	ldbu	r3,0(r5)
10010094:	10c0151e 	bne	r2,r3,100100ec <memcmp+0x74>
10010098:	31bfff84 	addi	r6,r6,-2
1001009c:	01ffffc4 	movi	r7,-1
100100a0:	00000406 	br	100100b4 <memcmp+0x3c>
100100a4:	20800003 	ldbu	r2,0(r4)
100100a8:	28c00003 	ldbu	r3,0(r5)
100100ac:	31bfffc4 	addi	r6,r6,-1
100100b0:	10c00e1e 	bne	r2,r3,100100ec <memcmp+0x74>
100100b4:	21000044 	addi	r4,r4,1
100100b8:	29400044 	addi	r5,r5,1
100100bc:	31fff91e 	bne	r6,r7,100100a4 <__alt_data_end+0xf80100a4>
100100c0:	0005883a 	mov	r2,zero
100100c4:	f800283a 	ret
100100c8:	20c00017 	ldw	r3,0(r4)
100100cc:	28800017 	ldw	r2,0(r5)
100100d0:	1880041e 	bne	r3,r2,100100e4 <memcmp+0x6c>
100100d4:	31bfff04 	addi	r6,r6,-4
100100d8:	21000104 	addi	r4,r4,4
100100dc:	29400104 	addi	r5,r5,4
100100e0:	39bff936 	bltu	r7,r6,100100c8 <__alt_data_end+0xf80100c8>
100100e4:	303fe91e 	bne	r6,zero,1001008c <__alt_data_end+0xf801008c>
100100e8:	003ff506 	br	100100c0 <__alt_data_end+0xf80100c0>
100100ec:	10c5c83a 	sub	r2,r2,r3
100100f0:	f800283a 	ret

100100f4 <__register_exitproc>:
100100f4:	00840074 	movhi	r2,4097
100100f8:	defffa04 	addi	sp,sp,-24
100100fc:	108a9804 	addi	r2,r2,10848
10010100:	dc000315 	stw	r16,12(sp)
10010104:	14000017 	ldw	r16,0(r2)
10010108:	dc400415 	stw	r17,16(sp)
1001010c:	dfc00515 	stw	ra,20(sp)
10010110:	80805217 	ldw	r2,328(r16)
10010114:	2023883a 	mov	r17,r4
10010118:	10003626 	beq	r2,zero,100101f4 <__register_exitproc+0x100>
1001011c:	10c00117 	ldw	r3,4(r2)
10010120:	010007c4 	movi	r4,31
10010124:	20c00e16 	blt	r4,r3,10010160 <__register_exitproc+0x6c>
10010128:	1a400044 	addi	r9,r3,1
1001012c:	8800211e 	bne	r17,zero,100101b4 <__register_exitproc+0xc0>
10010130:	18c00084 	addi	r3,r3,2
10010134:	18c7883a 	add	r3,r3,r3
10010138:	18c7883a 	add	r3,r3,r3
1001013c:	12400115 	stw	r9,4(r2)
10010140:	10c7883a 	add	r3,r2,r3
10010144:	19400015 	stw	r5,0(r3)
10010148:	0005883a 	mov	r2,zero
1001014c:	dfc00517 	ldw	ra,20(sp)
10010150:	dc400417 	ldw	r17,16(sp)
10010154:	dc000317 	ldw	r16,12(sp)
10010158:	dec00604 	addi	sp,sp,24
1001015c:	f800283a 	ret
10010160:	00800034 	movhi	r2,0
10010164:	10800004 	addi	r2,r2,0
10010168:	10002526 	beq	r2,zero,10010200 <__register_exitproc+0x10c>
1001016c:	01006404 	movi	r4,400
10010170:	d9400015 	stw	r5,0(sp)
10010174:	d9800115 	stw	r6,4(sp)
10010178:	d9c00215 	stw	r7,8(sp)
1001017c:	00000000 	call	10000000 <__reset>
10010180:	d9400017 	ldw	r5,0(sp)
10010184:	d9800117 	ldw	r6,4(sp)
10010188:	d9c00217 	ldw	r7,8(sp)
1001018c:	10001c26 	beq	r2,zero,10010200 <__register_exitproc+0x10c>
10010190:	80c05217 	ldw	r3,328(r16)
10010194:	10000115 	stw	zero,4(r2)
10010198:	02400044 	movi	r9,1
1001019c:	10c00015 	stw	r3,0(r2)
100101a0:	80805215 	stw	r2,328(r16)
100101a4:	10006215 	stw	zero,392(r2)
100101a8:	10006315 	stw	zero,396(r2)
100101ac:	0007883a 	mov	r3,zero
100101b0:	883fdf26 	beq	r17,zero,10010130 <__alt_data_end+0xf8010130>
100101b4:	18d1883a 	add	r8,r3,r3
100101b8:	4211883a 	add	r8,r8,r8
100101bc:	1211883a 	add	r8,r2,r8
100101c0:	41802215 	stw	r6,136(r8)
100101c4:	01000044 	movi	r4,1
100101c8:	11806217 	ldw	r6,392(r2)
100101cc:	20c8983a 	sll	r4,r4,r3
100101d0:	310cb03a 	or	r6,r6,r4
100101d4:	11806215 	stw	r6,392(r2)
100101d8:	41c04215 	stw	r7,264(r8)
100101dc:	01800084 	movi	r6,2
100101e0:	89bfd31e 	bne	r17,r6,10010130 <__alt_data_end+0xf8010130>
100101e4:	11806317 	ldw	r6,396(r2)
100101e8:	3108b03a 	or	r4,r6,r4
100101ec:	11006315 	stw	r4,396(r2)
100101f0:	003fcf06 	br	10010130 <__alt_data_end+0xf8010130>
100101f4:	80805304 	addi	r2,r16,332
100101f8:	80805215 	stw	r2,328(r16)
100101fc:	003fc706 	br	1001011c <__alt_data_end+0xf801011c>
10010200:	00bfffc4 	movi	r2,-1
10010204:	003fd106 	br	1001014c <__alt_data_end+0xf801014c>

10010208 <__call_exitprocs>:
10010208:	00840074 	movhi	r2,4097
1001020c:	108a9804 	addi	r2,r2,10848
10010210:	10800017 	ldw	r2,0(r2)
10010214:	defff404 	addi	sp,sp,-48
10010218:	dd800815 	stw	r22,32(sp)
1001021c:	d8800015 	stw	r2,0(sp)
10010220:	10805204 	addi	r2,r2,328
10010224:	dd000615 	stw	r20,24(sp)
10010228:	dc800415 	stw	r18,16(sp)
1001022c:	dfc00b15 	stw	ra,44(sp)
10010230:	df000a15 	stw	fp,40(sp)
10010234:	ddc00915 	stw	r23,36(sp)
10010238:	dd400715 	stw	r21,28(sp)
1001023c:	dcc00515 	stw	r19,20(sp)
10010240:	dc400315 	stw	r17,12(sp)
10010244:	dc000215 	stw	r16,8(sp)
10010248:	2025883a 	mov	r18,r4
1001024c:	2829883a 	mov	r20,r5
10010250:	d8800115 	stw	r2,4(sp)
10010254:	05bfffc4 	movi	r22,-1
10010258:	d8800017 	ldw	r2,0(sp)
1001025c:	14c05217 	ldw	r19,328(r2)
10010260:	98001d26 	beq	r19,zero,100102d8 <__call_exitprocs+0xd0>
10010264:	dd400117 	ldw	r21,4(sp)
10010268:	98800117 	ldw	r2,4(r19)
1001026c:	173fffc4 	addi	fp,r2,-1
10010270:	e0000d16 	blt	fp,zero,100102a8 <__call_exitprocs+0xa0>
10010274:	14000044 	addi	r16,r2,1
10010278:	8421883a 	add	r16,r16,r16
1001027c:	8421883a 	add	r16,r16,r16
10010280:	84402004 	addi	r17,r16,128
10010284:	9c63883a 	add	r17,r19,r17
10010288:	9c21883a 	add	r16,r19,r16
1001028c:	a0001e26 	beq	r20,zero,10010308 <__call_exitprocs+0x100>
10010290:	80804017 	ldw	r2,256(r16)
10010294:	15001c26 	beq	r2,r20,10010308 <__call_exitprocs+0x100>
10010298:	e73fffc4 	addi	fp,fp,-1
1001029c:	843fff04 	addi	r16,r16,-4
100102a0:	8c7fff04 	addi	r17,r17,-4
100102a4:	e5bff91e 	bne	fp,r22,1001028c <__alt_data_end+0xf801028c>
100102a8:	00800034 	movhi	r2,0
100102ac:	10800004 	addi	r2,r2,0
100102b0:	10000926 	beq	r2,zero,100102d8 <__call_exitprocs+0xd0>
100102b4:	98800117 	ldw	r2,4(r19)
100102b8:	1000311e 	bne	r2,zero,10010380 <__call_exitprocs+0x178>
100102bc:	98800017 	ldw	r2,0(r19)
100102c0:	10003426 	beq	r2,zero,10010394 <__call_exitprocs+0x18c>
100102c4:	9809883a 	mov	r4,r19
100102c8:	a8800015 	stw	r2,0(r21)
100102cc:	00000000 	call	10000000 <__reset>
100102d0:	acc00017 	ldw	r19,0(r21)
100102d4:	983fe41e 	bne	r19,zero,10010268 <__alt_data_end+0xf8010268>
100102d8:	dfc00b17 	ldw	ra,44(sp)
100102dc:	df000a17 	ldw	fp,40(sp)
100102e0:	ddc00917 	ldw	r23,36(sp)
100102e4:	dd800817 	ldw	r22,32(sp)
100102e8:	dd400717 	ldw	r21,28(sp)
100102ec:	dd000617 	ldw	r20,24(sp)
100102f0:	dcc00517 	ldw	r19,20(sp)
100102f4:	dc800417 	ldw	r18,16(sp)
100102f8:	dc400317 	ldw	r17,12(sp)
100102fc:	dc000217 	ldw	r16,8(sp)
10010300:	dec00c04 	addi	sp,sp,48
10010304:	f800283a 	ret
10010308:	98800117 	ldw	r2,4(r19)
1001030c:	80c00017 	ldw	r3,0(r16)
10010310:	10bfffc4 	addi	r2,r2,-1
10010314:	17001526 	beq	r2,fp,1001036c <__call_exitprocs+0x164>
10010318:	80000015 	stw	zero,0(r16)
1001031c:	183fde26 	beq	r3,zero,10010298 <__alt_data_end+0xf8010298>
10010320:	00800044 	movi	r2,1
10010324:	1708983a 	sll	r4,r2,fp
10010328:	98806217 	ldw	r2,392(r19)
1001032c:	9dc00117 	ldw	r23,4(r19)
10010330:	2084703a 	and	r2,r4,r2
10010334:	1000061e 	bne	r2,zero,10010350 <__call_exitprocs+0x148>
10010338:	183ee83a 	callr	r3
1001033c:	98800117 	ldw	r2,4(r19)
10010340:	15ffc51e 	bne	r2,r23,10010258 <__alt_data_end+0xf8010258>
10010344:	a8800017 	ldw	r2,0(r21)
10010348:	14ffd326 	beq	r2,r19,10010298 <__alt_data_end+0xf8010298>
1001034c:	003fc206 	br	10010258 <__alt_data_end+0xf8010258>
10010350:	98806317 	ldw	r2,396(r19)
10010354:	2084703a 	and	r2,r4,r2
10010358:	1000061e 	bne	r2,zero,10010374 <__call_exitprocs+0x16c>
1001035c:	89400017 	ldw	r5,0(r17)
10010360:	9009883a 	mov	r4,r18
10010364:	183ee83a 	callr	r3
10010368:	003ff406 	br	1001033c <__alt_data_end+0xf801033c>
1001036c:	9f000115 	stw	fp,4(r19)
10010370:	003fea06 	br	1001031c <__alt_data_end+0xf801031c>
10010374:	89000017 	ldw	r4,0(r17)
10010378:	183ee83a 	callr	r3
1001037c:	003fef06 	br	1001033c <__alt_data_end+0xf801033c>
10010380:	98800017 	ldw	r2,0(r19)
10010384:	982b883a 	mov	r21,r19
10010388:	1027883a 	mov	r19,r2
1001038c:	983fb61e 	bne	r19,zero,10010268 <__alt_data_end+0xf8010268>
10010390:	003fd106 	br	100102d8 <__alt_data_end+0xf80102d8>
10010394:	0005883a 	mov	r2,zero
10010398:	003ffa06 	br	10010384 <__alt_data_end+0xf8010384>

1001039c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
1001039c:	defffd04 	addi	sp,sp,-12
100103a0:	df000215 	stw	fp,8(sp)
100103a4:	df000204 	addi	fp,sp,8
100103a8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
100103ac:	0001883a 	nop
100103b0:	e0bfff17 	ldw	r2,-4(fp)
100103b4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
100103b8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
100103bc:	10000226 	beq	r2,zero,100103c8 <_exit+0x2c>
    ALT_SIM_FAIL();
100103c0:	002af070 	cmpltui	zero,zero,43969
100103c4:	00000106 	br	100103cc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
100103c8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
100103cc:	003fff06 	br	100103cc <__alt_data_end+0xf80103cc>
